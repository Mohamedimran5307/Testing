Index: Pageobjects/AddParticipant_page.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Pageobjects/AddParticipant_page.py b/Pageobjects/AddParticipant_page.py
new file mode 100644
--- /dev/null	(date 1690613291937)
+++ b/Pageobjects/AddParticipant_page.py	(date 1690613291937)
@@ -0,0 +1,75 @@
+from Pageobjects.Basepage import Basepage
+from selenium.webdriver.common.by import By
+from Configurations.config import Testdata
+
+
+class Participant_page(Basepage):
+    PARTICIPANTS_BUTTON = (By.ID, "navbar-participants")
+    PARTICIPANT_BUTTON = (By.ID, "Participant1")
+    PARTICIPANT_LOAD_MORE = (By.CSS_SELECTOR,"button[data-testid=load-more-button-test-button]")
+    PARTICIPANT_CARD_BUTTON = (By.ID, "Participants-card-")
+    ORGANIZATION_NAME_FIELD = (By.ID, "organisation-name-id")
+    ORGANIZATION_EMAIL_ID_FIELD = (By.ID, "add-participant-mail-id")
+    ORGANIZATION_WEBSITE_LINK = (By.ID, "add-participant-website-link")
+    ORGANIZATION_ADDRESS = (By.ID, "add-participant-organisation-address")
+    COUNTRY_DROP_DOWN = (By.ID, "country-in-add-participants")
+    SELECT_COUNTRY = (By.ID, "country-[object Object]103")
+    PINCODE_FIELD = (By.ID, "add-participant-pin-code")
+    FIRST_NAME_FIELD = (By.ID, "add-participant-first-name")
+    LAST_NAME_FIELD = (By.ID, "add-participant-last-name")
+    ORGANIZATION_ROOT_USER_EMAIL_ID_FIELD = (By.ID, "add-participant-rootuser-mail-id")
+    ORGANIZATION_CONTACT_NUMBER = (By.ID, "add-participant-phone-number")
+    SUBMIT_BUTTON = (By.ID, "add-participant-submit-button")
+    CO_STEWARD_CHECKBOX = (By.ID, "add-participant-make-costeward")
+    SIGN_OUT_BUTTON = (By.ID, "navbar-signout")
+    COSTEWARD_TAB = (By.ID, "Co-Steward0")
+    COSTEWARD_LIST_VIEW_BUTTON = (By.ID,"Co-stewardlist-view-title")
+    PARTICIPATE_LIST_VIEW_BUTTON = (By.ID,"Participantslist-view")
+    COSTEWARD_LOAD_MORE_BUTTON = (By.ID,"Co-steward-load-more-button")
+    NEW_PARTICIPANT_REQUEST = (By.ID, "New Participant Requests2")
+    NEW_PARTICIPANT_REQUEST_LIST_VIEW_BUTTON = (By.ID,"Newlist-view")
+    PARTICIPANT_REQUEST = (By.ID, "Newgrid-card-id0")
+    LOAD_MORE_BUTTON = (By.ID, "New-load-more-button")
+    # LOAD_MORE_BUTTON = (By.XPATH, "//button[@id='New-load-more-button']")
+    APPROVE_BUTTON = (By.ID, "details-page-approve-button")
+    REJECT_BUTTON = (By.ID,"details-page-reject-button")
+    BACK_BUTTON = (By.ID,"details-page-back-button")
+    INVITE_PARTICIPANT_BUTTON= (By.ID,"add-participant-submit-button")
+    INVITE_PARTICIPANT_EMAIL_FIELD = (By.ID,"invite-participants-emails-textfield")
+    ADD_INVITE_NOTE = (By.XPATH, "/html/body/div/div/div[2]/div/div[4]/div/div[2]/div/div/div")
+    INVITE_SUBMIT_BUTTON = (By.ID,"details-page-load-more-dataset-button")
+    INVITE_CANCEL_BUTTON = (By.ID,"")
+    """Constructor of the page class"""
+
+    def __init__(self, driver):
+        super().__init__(driver)
+        self.driver.get(Testdata.BASEURL)
+
+    """ These are the page actions for the Add_participant_page"""
+
+    def adding_participant(self):
+        self.do_click(self.PARTICIPANTS_BUTTON)
+        self.do_click(self.PARTICIPANT_BUTTON)
+        self.do_click(self.PARTICIPANT_CARD_BUTTON)
+        self.do_click(self.ORGANIZATION_NAME_FIELD)
+        self.do_sendkeys(self.ORGANIZATION_NAME_FIELD, Testdata.ORGANIZATION_NAME)
+        self.do_click(self.ORGANIZATION_EMAIL_ID_FIELD)
+        self.do_sendkeys(self.ORGANIZATION_EMAIL_ID_FIELD, Testdata.ORGANIZATION_EMAIL_ID)
+        self.do_click(self.ORGANIZATION_WEBSITE_LINK)
+        self.do_sendkeys(self.ORGANIZATION_WEBSITE_LINK, Testdata.ORGANIZATION_WEBSITE_LINK)
+        self.do_click(self.ORGANIZATION_ADDRESS)
+        self.do_sendkeys(self.ORGANIZATION_ADDRESS, Testdata.ORGANIZATION_ADDRESS)
+        self.do_click(self.SELECT_COUNTRY)
+        self.do_sendkeys(self.PINCODE_FIELD, Testdata.PINCODE)
+        self.do_click(self.FIRST_NAME_FIELD)
+        self.do_sendkeys(self.FIRST_NAME_FIELD, Testdata.FIRST_NAME)
+        self.do_click(self.LAST_NAME_FIELD)
+        self.do_sendkeys(self.LAST_NAME_FIELD, Testdata.LAST_NAME)
+        self.do_click(self.ORGANIZATION_ROOT_USER_EMAIL_ID_FIELD)
+        self.do_sendkeys(self.ORGANIZATION_ROOT_USER_EMAIL_ID_FIELD, Testdata.ORGANIZATION_ROOT_USER_EMAIL_ID)
+        self.do_click(self.ORGANIZATION_CONTACT_NUMBER)
+        self.do_sendkeys(self.ORGANIZATION_CONTACT_NUMBER,Testdata.CONTACT_NUMBER)
+        self.do_click(self.CO_STEWARD_CHECKBOX)
+        self.do_click(self.SUBMIT_BUTTON)
+        self.do_click(self.COSTEWARD_TAB)
+
Index: Pageobjects/Datasetpage.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Pageobjects/Datasetpage.py b/Pageobjects/Datasetpage.py
new file mode 100644
--- /dev/null	(date 1690794929385)
+++ b/Pageobjects/Datasetpage.py	(date 1690794929385)
@@ -0,0 +1,161 @@
+from selenium.webdriver.common.by import By
+
+from Configurations.config import Testdata
+from Pageobjects.Basepage import Basepage
+
+"""By locators"""
+
+
+class Datasetspage(Basepage):
+    DATASET_TAB = (By.ID, "navbar-dataset")
+    # LIST_VIEW_BUTTON = (By.XPATH,"//p[text()='List view']")
+    LIST_VIEW_BUTTON = (By.ID, "dataset-list-view-id")
+    ADD_NEW_DATASET = (By.ID, "dataset-add-new-dataset-in-gridview")
+    ADD_NEW_BUTTON_LIST_VIEW = (By.ID, "dataset-add-new-dataset")
+    ADD_DATASET_NAME_FIELD = (By.ID, "add-dataset-name")
+    Add_DATASET_DESCRIPTION_FIELD = (By.ID, "add-dataset-description")
+    CONSTANTLY_UPDATING_CHECKBOX = (By.ID, "check-box-Constantly-updating")
+    NEXT_BUTTON = (By.ID, "add-dataset-submit-btn")
+    CANCEL_BUTTON = (By.ID, "add-dataset-cancel-btn")
+    UPLOAD_LOCAL = (By.XPATH, "//input[@type='file']")
+    UPLOAD_FILE = (By.ID, "add-dataset-upload-file-btn")
+    DELETE_BUTTON = (By.ID, "accordion-uploaded-file-delete-button-id0")
+    FILE_STANDARIZE_FIELD = (By.ID, "standardi-seselect-file-name")
+    FILE_FOR_STANDARIZATION = (By.ID, "standardise-file-name-0")
+    SELECT_DATAPOINT_ATTRIBUTE_STD = (By.ID, "standardise-select-datapoint-category1")
+    DATAPOINT_CATEGORY = (By.ID, "standardise-datapoint-category-option-2")
+    DATAPOINT_CATEGORY_2 = (By.ID, "standardise-datapoint-category-option-1")
+    CLEAR_DATAPOINT_ATTRIBUTE = (By.ID, "standardise-clear-datapoint-category1")
+    DATAPOINT_ATTRIBUTE_FIELD = (By.ID, "standardise-datapoint-attribute1")
+    DATAPOINT_ATTRIBUTE = (By.ID, "standardise-datapoint-attribute-1")
+    MASK_CHECK_BOX = (By.ID, "check-box-1")
+    APPLY_BUTTON = (By.ID, "standardise-apply-btn")
+    CATEGORY_ACCORDION = (By.ID, "uploaded-file-accordion-0")
+    SELECT_CATEGORY = (By.ID, "check-box-0")
+    SELECT_GREOGRAPHY_FIELD = (By.ID, "geography-select-country")
+    SELECT_COUNTRY = (By.ID, "geography-select-countryIndia")
+    SELECT_STATE_FIELD = (By.ID, "geography-select-state")
+    SELECT_STATE = (By.ID, "geography-select-stateAndhra Pradesh")
+    SELECT_CITY_FIELD = (By.ID, "geography-select-city")
+    SELECT_CITY = (By.ID, "geography-select-cityAdoni")
+    UPLOAD_POLICY_FIELD = (By.ID, "usege-policy-select-file")
+    UPLOAD_POLICY_FILE = (By.ID, "usage_policy-file-name-0")
+    APPLY_BUTTON_STD = (By.ID, "usege-policy-apply-btn")
+    SUBMIT_BUTTON = (By.ID, "add-dataset-submit-btn")
+    MySQL_TAB = (By.ID, "add-dataset-upload-type-mysql")
+    DATABASE_NAME_FIELD_MySQL = (By.XPATH, "MySQL-upload-dataset-db-name-id")
+    USER_NAME_MYSQL_FIELD = (By.ID, "MySQL-upload-dataset-user-name-id")
+    PASSWORD_MYSQL_FIELD = (By.ID, "MySQL-upload-dataset-password-id")
+    DATABASE_HOST_URL_MySQL_FIELD = (By.ID, "MySQL-upload-dataset-database-host-url-id")
+    MYSQL_PORT_FIELD = (By.ID, "MySQL-upload-dataset-port-id")
+    MYSQL_CONNECT_BUTTON = (By.ID, "MySQL-upload-dataset-connect-btn")
+    SELECT_TABLE_MYSQL_FIELD = (By.ID, "MySQL-upload-dataset-select-id")
+    SELECT_TABLE_MYSQL = (By.ID, "MySQL-upload-dataset-select-id-7")
+    SELECT_COLUMN_MYSQL_1 = (By.ID, "MySQL-uploaded-data-checkbox-id-0")
+    SELECT_COLUMN_MYSQL_2 = (By.ID, "MySQL-uploaded-data-checkbox-id-1")
+    FILE_NAME_MYSQL_IMPORT_DATA_FIELD = (By.ID, "MySQL-upload-dataset-filename-id")
+    IMPORT_BUTTON_MYSQL = (By.ID, "MySQL-upload-dataset-import-btn")
+    POSTGRES_TAB = (By.ID, "add-dataset-upload-type-postgres")
+    DATABASE_NAME_FIELD_Postgres = (By.ID, "Postgres-upload-dataset-db-name-id")
+    USER_NAME_POSTGRES_FIELD = (By.ID, "Postgres-upload-dataset-user-name-id")
+    PASSWORD_POSTGRES_FIELD = (By.ID, "Postgres-upload-dataset-password-id")
+    DATABASE_HOST_URL_POSTGRES_FIELD = (By.ID, "Postgres-upload-dataset-database-host-url-id")
+    POSTGRES_PORT_FIELD = (By.ID, "Postgres-upload-dataset-port-id")
+    POSTGRES_CONNECT_BUTTON = (By.ID, "Postgres-upload-dataset-connect-btn")
+    SELECT_TABLE_POSTGRES_FIELD = (By.ID, "Postgres-upload-dataset-select-id")
+    SELECT_TABLE_POSTGRES = (By.ID, "Postgres-upload-dataset-select-id-9")
+    SELECT_COLUMN_POSTGRES_1 = (By.ID, "Postgres-uploaded-data-checkbox-id-0")
+    SELECT_COLUMN_POSTGRES_2 = (By.ID, "Postgres-uploaded-data-checkbox-id-1")
+    FILE_NAME_POSTGRES_IMPORT_DATA_FIELD = (By.ID, "Postgres-upload-dataset-filename-id")
+    IMPORT_BUTTON_POSTGRES = (By.ID, "Postgres-upload-dataset-import-btn")
+    REST_API_TAB = (By.ID, "add-dataset-upload-type-rest-api")
+    API_URL_FIELD = (By.ID, "upload-dataset-api-url-id")
+    AUTH_TYPE_FIELD = (By.ID, "upload-dataset-api-select-auth-type-id")
+    NO_AUTH_OPTION = (By.ID, "upload-dataset-api-auth-type-0")
+    API_KEY_OPTION = (By.ID, "upload-dataset-api-auth-type-1")
+    API_KEY_NAME_FIELD = (By.ID, "upload-dataset-api-key-id")
+    KEY_KEY_VALUE_FIELD = (By.ID, "upload-dataset-api-key-value-id")
+    BEARER_OPTION = (By.ID, "upload-dataset-api-auth-type-2")
+    AUTH_TOKEN_FIELD = (By.ID, "upload-dataset-api-auth-token-id")
+    FILE_NAME_REST_API_IMPORT_DATA_FIELD = (By.ID, "upload-dataset-api-name-of-import-file-id")
+    IMPORT_REST_API_BUTTON = (By.ID, "upload-dataset-api-import-btn")
+    SIGN_OUT_BUTTON = (By.ID, "navbar-signout")
+    FIRST_DATASET = (By.ID, "dataset-card-view-id0")
+    EDIT_DATASET = (By.XPATH, "//button[text()='Edit dataset']")
+    ACCORDION_UPLOADED_FILES = (By.XPATH, "//p[text()='Uploaded Files']")
+    DOWNLOAD_UPLOADED_FILES = (By.XPATH, "//button[text()='Download']")
+    SECOND_DATASET = (By.ID, "dataset-card-view-id1")
+    DELETE_DATASET = (By.XPATH, "//button[text()='Delete dataset']")
+    CONFIRM_DELETE_BUTTON = (By.CSS_SELECTOR, "button[data-testid=deletepopper]")
+    BACK_BUTTON = (By.XPATH, "//button[text()='Back']")
+    DATASETS_LOAD_MORE_BUTTON = (By.ID, "dataset-loadmore-btn")
+    SEARCH_DATASET = (By.ID, "dataset-search-input-id")
+    FILTER_GEOGRAPHY = (By.ID, "dataset-filter-by-geography-id")
+    FILTER_COUNTRY = (By.ID, "dataset-filter-by-country-id")
+    FILTER_SELECT_COUNTRY = (By.ID, "dataset-filter-country-id100")
+    FILTER_STATE = (By.ID, "select-country-in-geography-id")
+    FILTER_SELECT_STATE = (By.ID, "select-country-in-geography-id1")
+    FILTER_SELECT_CITY = (By.ID, "select-state-in-geography-id8")  # Anantapur - No datasets
+    FILTER_CITY = (By.ID, "select-state-in-geography-id")
+    CANCEL_CITY = (By.CSS_SELECTOR, "svg[data-testid=CancelIcon]")
+    FILTER_CATEGORY = (By.ID, "dataset-filter-by-categories-id")
+    CHECKBOX_SUBCATEGORY = (By.ID, "check-box-0")
+    FILTER_DATE = (By.ID, "dataset-filter-by-date-id")
+    FROM_DATE_FIELD_FILTER = (By.ID, "filter-by-date-from-date")
+    END_DATE_FIELD_FILTER = (By.ID, "filter-by-date-to-date")
+    CLEAR_ALL_BUTTON_FILTERS = (By.ID, "dataset-filter-clear-all-id")
+
+    def __init__(self, driver):
+        super().__init__(driver)
+        self.driver.get(Testdata.BASEURL)
+
+    def test_adding_dataset(self):
+        self.do_click(self.ADD_NEW_DATASET)
+        self.do_click(self.ADD_DATASET_NAME_FIELD)
+        self.do_sendkeys(self.ADD_DATASET_NAME_FIELD, Testdata.CONNECTOR_NAME)
+        self.do_click(self.Add_DATASET_DESCRIPTION_FIELD)
+        self.do_sendkeys(self.Add_DATASET_DESCRIPTION_FIELD, Testdata.CONNECTOR_DESCRIPTION)
+        self.do_click(self.CONSTANTLY_UPDATING_CHECKBOX)
+        self.do_click(self.NEXT_BUTTON)
+        self.do_sendkeys(self.UPLOAD_LOCAL, Testdata.UPLOAD_FILE)
+        self.do_click(self.DELETE_BUTTON)
+        self.do_sendkeys(self.UPLOAD_LOCAL, Testdata.UPLOAD_FILE)
+        self.do_click(self.UPLOAD_FILE)
+        self.do_click(self.NEXT_BUTTON)
+        self.do_click(self.DELETE_BUTTON)
+        self.do_sendkeys_1()
+        self.do_click(self.UPLOAD_FILE)
+        self.driver.execute_script("window.scrollBy(0,500);")
+        self.do_click(self.NEXT_BUTTON)
+        self.do_click(self.FILE_STANDARIZE_FIELD)
+        self.do_click(self.FILE_FOR_STANDARIZATION)
+        self.do_click(self.SELECT_DATAPOINT_ATTRIBUTE_STD)
+        self.do_click(self.DATAPOINT_CATEGORY)
+        self.do_click(self.CLEAR_DATAPOINT_ATTRIBUTE)
+        self.do_click(self.SELECT_DATAPOINT_ATTRIBUTE_STD)
+        self.do_click(self.DATAPOINT_CATEGORY)
+        self.do_click(self.DATAPOINT_ATTRIBUTE_FIELD)
+        self.do_click(self.DATAPOINT_ATTRIBUTE)
+        self.do_clickable_mask()
+        self.driver.execute_script("window.scrollBy(0,2000);")
+        self.do_click(self.APPLY_BUTTON)
+        self.do_click(self.NEXT_BUTTON)
+        self.driver.execute_script("window.scrollBy(0,-300);")
+        self.do_click(self.CATEGORY_ACCORDION)
+        self.do_clickable_CATEGORY()
+        self.driver.execute_script("window.scrollBy(0,600);")
+        self.do_click(self.SELECT_GREOGRAPHY_FIELD)
+        self.do_click(self.SELECT_COUNTRY)
+        self.do_click(self.SELECT_STATE_FIELD)
+        self.do_click(self.SELECT_STATE)
+        self.do_click(self.SELECT_CITY_FIELD)
+        self.do_click(self.SELECT_CITY)
+        self.do_click(self.NEXT_BUTTON)
+        self.driver.execute_script("window.scrollBy(0,-300);")
+        self.do_click(self.UPLOAD_POLICY_FIELD)
+        self.do_click(self.UPLOAD_POLICY_FILE)
+        self.driver.execute_script("window.scrollBy(0,700);")
+        self.do_clickable_REGISTER_USER()
+        self.driver.execute_script("window.scrollBy(0,600);")
+        self.do_click(self.APPLY_BUTTON_STD)
+        self.do_click(self.SUBMIT_BUTTON)
Index: Pageobjects/Connectorpage.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Pageobjects/Connectorpage.py b/Pageobjects/Connectorpage.py
new file mode 100644
--- /dev/null	(date 1687244071655)
+++ b/Pageobjects/Connectorpage.py	(date 1687244071655)
@@ -0,0 +1,74 @@
+from selenium.webdriver.common.by import By
+
+from Configurations.config import Testdata
+from Pageobjects.Basepage import Basepage
+
+"""By locators"""
+
+class Connectorspage(Basepage):
+    CONNECTOR_BUTTON = (By.ID, "navbar-connectors")
+    ADD_CONNECTOR_BUTTON = (By.ID, "add-connector")
+    CONNECTOR_NAME_FIELD = (By.ID, "connector-name")
+    CONNECTOR_DESCRIPTION_FIELD = (By.ID, "connector-description")
+    SELECT_ORGANIZATION_DROPDOWN = (By.ID, "connectors-select-orgnisation-id")
+    SELECT_ORGANIZATION_1 = (By.XPATH ,"//li[text()='Imran Agri Solutions']")
+    SELECT_ORGANIZATION_2 = (By.XPATH ,"//li[text()='Imran growers']")
+    SELECT_DATASET_DROPDOWN = (By.ID, "connectors-select-dataset-id")
+    SELECT_DATASET_1 = (By.XPATH, "//li[text()='PXD 1']")
+    SELECT_DATASET_2 = (By.XPATH, "//li[text()='LDI 1']")
+    SELECT_FILE_DROPDOWN = (By.ID, "connectors-select-file-id")
+    SELECT_DATASET_FILE = (By.ID, "connectors-select-file-id-option0")
+    ADD_BUTTON = (By.ID, "add-connector-button")
+    DELETE_DATASET_FILE = (By.ID, "delete-integration-card0")  # indexing needed
+    SELECT_ALL_COLUMNS_CHECKBOX_1 = (By.ID, "select-all-0-columns")
+    # SELECT_ALL_COLUMNS_CHECKBOX_1 = (By.XPATH, "//input[@id='select-all-columns']")
+    SELECT_ALL_COLUMNS_CHECKBOX_2 = (By.ID, "select-all-1-columns")
+    JOIN_BY_ICON = (By.ID, "link-icon")
+    LEFT_JOIN_FIELD = (By.ID, "primary_col_0_select_for_join")
+    SELECT_ANY_COLUMN_LEFT = (By.ID, "file-9-columns-left")  # LACTATION_STAGE
+    RIGHT_JOIN_FIELD = (By.ID, "secondary_col_select_for_join")
+    SELECT_ANY_COLUMN_RIGHT = (By.ID, "file-9-columns-right")  # LACTATION_STAGE
+    JOIN_TYPE_ICON = (By.ID, "innerjoin")
+    APPLY_BUTTON = (By.ID, "generate_button_apply")
+    CANCEL_BUTTON = (By.ID, "generate_button_apply")
+    DOWNLOAD_BUTTON = (By.ID, "download_button")
+    INTEGRAGTE_MORE_DATASETS_BUTTON = (By.ID, "integrate-more-datasets-button")
+    SAVE_CONNECTOR_BUTTON = (By.ID, "save-connector-button")
+    DELETE_CONNECTOR_BUTTON = (By.ID, "delete-connector-button")
+    CANCEL_CONNECTOR_BUTTON = (By.ID, "cancel-button")
+
+    """Constructor of the page class"""
+
+    def __init__(self, driver):
+        super().__init__(driver)
+        self.driver.get(Testdata.BASEURL)
+
+    def add_connector(self):
+        self.do_click(self.CONNECTOR_BUTTON)
+        self.do_click(self.ADD_CONNECTOR_BUTTON)
+        self.do_click(self.CONNECTOR_NAME_FIELD)
+        self.do_sendkeys(self.CONNECTOR_NAME_FIELD, Testdata.CONNECTOR_NAME)
+        self.do_click(self.CONNECTOR_DESCRIPTION_FIELD)
+        self.do_sendkeys(self.CONNECTOR_DESCRIPTION_FIELD, Testdata.CONNECTOR_DESCRIPTION)
+        self.do_click(self.SELECT_ORGANIZATION_DROPDOWN)
+        self.do_click(self.SELECT_ORGANIZATION)
+        self.do_click(self.SELECT_DATASET_DROPDOWN)
+        self.do_click(self.SELECT_DATASET)
+        self.do_click(self.SELECT_FILE_DROPDOWN)
+        self.do_click(self.SELECT_DATASET_FILE)
+        self.do_click(self.ADD_BUTTON)
+        # self.do_clickable_2()
+        self.do_scroll_up(self.CONNECTOR_NAME_FIELD)
+        self.do_click(self.SELECT_ORGANIZATION_DROPDOWN)
+        self.do_click(self.SELECT_ORGANIZATION)
+        self.do_click(self.SELECT_DATASET_DROPDOWN)
+        self.do_click(self.SELECT_DATASET)
+        self.do_click(self.SELECT_FILE_DROPDOWN)
+        self.do_click(self.SELECT_DATASET_FILE)
+        self.do_click(self.ADD_BUTTON)
+        self.do_click(self.SELECT_ALL_COLUMNS_CHECKBOX_2)
+        self.do_click(self.JOIN_BY_ICON)
+        self.do_click(self.LEFT_JOIN_FIELD)
+        self.do_click(self.SELECT_ANY_COLUMN_LEFT)
+        self.do_click(self.RIGHT_JOIN_FIELD)
+        self.do_click(self.SELECT_ANY_COLUMN_RIGHT)
Index: Pageobjects/SettingsPage.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Pageobjects/SettingsPage.py b/Pageobjects/SettingsPage.py
new file mode 100644
--- /dev/null	(date 1690889817903)
+++ b/Pageobjects/SettingsPage.py	(date 1690889817903)
@@ -0,0 +1,182 @@
+from selenium.webdriver.common.by import By
+
+from Configurations.config import Testdata
+from Pageobjects.Basepage import Basepage
+from Pageobjects.Homepage import Homepage
+
+"""By locators"""
+
+
+class SettingsPage(Basepage):
+    SETTINGS_BUTTON = (By.ID, "navbar-settings")
+    FIRST_NAME_FIELD = (By.ID, "profile_details_first_name")
+    LAST_NAME_FIELD = (By.ID, "profile_details_last_name")
+    SELECT_COUNTRY_FLAG = (By.ID, "")
+    CONTACT_NUMBER_FIELD = (By.ID, "profile_details_contact_number")
+    SUBMIT_BUTTON = (By.ID, "submitbutton_account")
+    CANCEL_BUTTON = (By.ID, "cancelbutton_account")
+    ORGANIZATION_SETTINGS_TAB = (By.ID, "org-settings-2")
+    ORGANIZATION_NAME_FIELD = (By.ID, "organisation_name")
+    ORGANIZATION_EMAIL_FIELD = (By.ID, "organisation_mail_id")
+    ORGANIZATION_WEBSITE_LINK_FIELD = (By.ID, "organisation_website_link")
+    ORGANIZATION_CONTACTNUMBER_FIELD = (By.ID, "organisation_contact_number")
+    ORGANIZATION_ADDRESS_FIELD = (By.ID, "organisation_address")
+    COUNTRY_FIELD = (By.ID, "country_select")
+    SELECT_COUNTRY = (By.XPATH, "//li[text()='India']")
+    ORGANIZATION_PINCODE_FIELD = (By.ID, "organisation_pin_code")
+    ORGANIZATION_DESCRIPTION_FIELD = (By.ID, "organisation_description")
+    UPLOAD_ORGANIZATION_LOGO= (By.ID,"file-upload-drag-and-drop-org-upload-file")
+    CANCEL_LOGO_BUTTON = (By.ID,"cancel-uploaded-file")
+    DONE_BUTTON_LOGO = (By.ID,"crop-image-preview-done-btn")
+    ORGANIZATION_SUBMIT_BUTTON = (By.ID, "submitbutton_org")
+    POLICY_TAB = (By.ID, "policy-settings-3")
+    ADD_NEW_POLICY = (By.ID, "addnew-policy-button")
+    POLICY_NAME_FIELD = (By.ID, "policyName")
+    POLICY_DESCRIPTION = (By.XPATH, "/html/body/div/div/div[2]/div/div/div[5]/div/div[2]/div[2]/div/div/div[2]/div/div[2]/div")
+    POLICY_FILE_UPLOAD = (By.ID, "file-upload-drag-and-drop-upload-policy-file")
+    ADD_POLICY = (By.ID, "add-policy-button")
+    UPDATE_POLICY = (By.ID, "accordian-0-header")
+    UPDATE_POLICY_NAME_FIELD = (By.ID, "0-policyName-update")
+    UPDATE_POLICY_DESCRIPTION_FIELD = (By.XPATH, "//div[@id='0-accordian-detail']//div//div[@aria-label='Description']")
+    UPDATE_POLICY_FILE_UPLOAD = (By.ID,"file-upload-drag-and-drop-0-file-update")
+    UPDATE_CLOSE_BUTTON = (By.ID, "1-cancel-uploaded-file-icon")
+    UPDATE_SAVE_BUTTON = (By.ID, "save-button-policy")
+    UPDATE_POLICY_DELETE_ICON = (By.ID, "0delete-icon")
+    UPDATE_POLICY_DELETE_POPPER = (By.ID, "0-delete-popper-accordian-button")
+    UPDATE_POLICY_DELETE_POPPER2 = (By.ID,"0-delete-popper-policy-button")
+    UPDATE_POLICY_DELETE_BUTTON2 = (By.ID,"delete-button-policy")
+    CATEGORY_TAB = (By.ID, "category-settings-4")
+    ADD_NEW_CATEGORY = (By.ID, "addnew-category-button")
+    CATEGORY_NAME_FIELD = (By.ID, "categoryName")
+    CATEGORY_DESCRIPTION_FIELD = (By.ID, "category_description")
+    ADD_CATEGORY_BUTTON = (By.ID, "add-category-button")
+    UPDATE_CATEGORY_ACCORDION = (By.ID, "accordian-0-header")
+    UPDATE_CATEGORY_ACCORDION3 = (By.ID,"accordian-2-header")
+    ADD_SUB_CATEGORY_NAME_FIELD = (By.ID, "each_subcategory")
+    ADD_SUB_CATEGORY_ICON = (By.ID, "add-sub-category-button")
+    SUB_CATEGORY_DELETE_BUTTON = (By.ID, "delete4-sub-category")
+    UPDATE_CATEGORY_EDIT_ICON = (By.ID, "0edit-icon")
+    EDIT_CATEGORY_NAME_FIELD = (By.ID, "edit-0-head-accordian-name")
+    UPDATE_CATEGORY_NAME_BUTTON = (By.ID,"edit-0-button-datapoint")
+    UPDATE_CATEGORY_DELETE_ICON = (By.ID, "2delete-icon")
+    UPDATE_CATEGORY_POPPER_BUTTON_2 = (By.ID, "2-delete-popper-accordian-button")
+    DELETE_CATEGORY_BUTTON = (By.ID,"delete-button-category")
+    CATEGORY_SUBMIT_BUTTON = (By.ID, "submit-button-category")
+    CANCEL_BUTTON_CATEGORY = (By.ID,"cancel-button-category")
+    DATAPOINT_TAB = (By.ID, "datapoint-settings-5")
+    DATAPOINT_CATEGORY_NAME_FIELD = (By.ID, "datapoint-name-input-box-id")
+    DATAPOINT_CATEGORY_DESCRIPTION_FIELD = (By.ID, "datapoint-name-input-box-description-id")
+    DATAPOINT_CATEGORY_ADD_BUTTON = (By.ID, "add-datapoint-button")
+    DATAPOINT_CATEGORY_SUBMIT_BUTTON = (By.ID, "addte-add-datapoint-button")
+    UPDATE_DATAPOINT_CATEGORY = (By.ID, "datapoint-category-4-accordian")
+    ADD_DATAPOINT_ATTRIBUTE_NAME_FIELD = (By.ID, "datapoint-attribute-input-box-id")
+    ADD_DATAPOINT_ATTRIBUTE_ICON = (By.ID, "add-subcategories-button")
+    EDIT_DATAPOINT_CATEGORY_NAME_FIELD = (By.ID, "")
+    UPDATE_DATAPOINT_CATEGORY_NAME_BUTTON = (By.ID, "update-0-button-category")
+    UPDATE_DATAPOINT_CATEGORY_EDIT_BUTTON = (By.ID, "edit_button_datapoint")
+    DELETE_DATAPOINT_CATEGORY = (By.ID, "delete_button_datapoint")
+    DELETE_DATAPOINT_CATEGORY_2 = (By.ID, "")
+    SIGN_OUT_BUTTON = (By.ID,"navbar-signout")
+
+    def __init__(self, driver):
+        super().__init__(driver)
+
+    """ These are the page actions for the Home_page"""
+
+    def test_update_account_settings_page(self):
+        self.do_click(self.FIRST_NAME_FIELD)
+        self.do_select_all(self.FIRST_NAME_FIELD)
+        self.do_clear(self.FIRST_NAME_FIELD)
+        self.do_sendkeys(self.FIRST_NAME_FIELD, Testdata.ACCOUNT_FIRST_NAME)
+        self.do_click(self.LAST_NAME_FIELD)
+        self.do_select_all(self.LAST_NAME_FIELD)
+        self.do_clear(self.LAST_NAME_FIELD)
+        self.do_sendkeys(self.LAST_NAME_FIELD, Testdata.ACCOUNT_LAST_NAME)
+        self.do_click(self.SELECT_COUNTRY_FLAG)
+        self.do_click(self.CONTACT_NUMBER_FIELD)
+        self.do_clear(self.CONTACT_NUMBER_FIELD)
+        self.do_sendkeys(self.CONTACT_NUMBER_FIELD, Testdata.CONTACT_NUMBER)
+        self.do_click(self.SUBMIT_BUTTON)
+
+    def test_update_organization_settings_page(self):
+        self.do_click(self.ORGANIZATION_SETTINGS_TAB)
+        self.do_click(self.ORGANIZATION_NAME_FIELD)
+        self.do_select_all(self.ORGANIZATION_NAME_FIELD)
+        self.do_clear(self.ORGANIZATION_NAME_FIELD)
+        self.do_click(self.ORGANIZATION_EMAIL_FIELD)
+        self.do_select_all(self.ORGANIZATION_EMAIL_FIELD)
+        self.do_clear(self.ORGANIZATION_EMAIL_FIELD)
+        self.do_click(self.ORGANIZATION_WEBSITE_LINK_FIELD)
+        self.do_select_all(self.ORGANIZATION_WEBSITE_LINK_FIELD)
+        self.do_clear(self.ORGANIZATION_WEBSITE_LINK_FIELD)
+        self.do_click(self.ORGANIZATION_CONTACTNUMBER_FIELD)
+        self.do_clear(self.ORGANIZATION_CONTACTNUMBER_FIELD)
+        self.do_click(self.COUNTRY_FIELD)
+        self.do_click(self.SELECT_COUNTRY)
+        self.do_click(self.ORGANIZATION_PINCODE_FIELD)
+        self.do_clear(self.ORGANIZATION_PINCODE_FIELD)
+        self.do_click(self.ORGANIZATION_DESCRIPTION_FIELD)
+        self.do_select_all(self.ORGANIZATION_DESCRIPTION_FIELD)
+        self.do_clear(self.ORGANIZATION_DESCRIPTION_FIELD)
+        self.do_click(self.ORGANIZATION_SUBMIT_BUTTON)
+
+    def test_add_policy(self):
+        self.do_click(self.POLICY_TAB)
+        self.do_click(self.ADD_NEW_POLICY)
+        self.do_click(self.POLICY_DESCRIPTION)
+        self.do_sendkeys(self.POLICY_DESCRIPTION, Testdata.POLICY_DESCRIPTION)
+        self.do_click(self.ADD_POLICY)
+
+    def test_update_policy(self):
+        self.do_click(self.UPDATE_POLICY)
+        self.do_click(self.UPDATE_POLICY_NAME_FIELD)
+        self.do_select_all(self.UPDATE_POLICY_NAME_FIELD)
+        self.do_clear(self.UPDATE_POLICY_NAME_FIELD)
+        self.do_sendkeys(self.UPDATE_POLICY_NAME_FIELD, Testdata.UPDATE_POLICY_NAME)
+        self.do_click(self.UPDATE_POLICY_DESCRIPTION_FIELD)
+        self.do_select_all(self.UPDATE_POLICY_DESCRIPTION_FIELD)
+        self.do_clear(self.UPDATE_POLICY_DESCRIPTION_FIELD)
+        self.do_sendkeys(self.UPDATE_POLICY_DESCRIPTION_FIELD, Testdata.UPDATE_POLICY_DESCRIPTION)
+        self.do_click(self.UPDATE_SAVE_BUTTON)
+
+
+    def test_add_category(self):
+        self.do_click(self.CATEGORY_TAB)
+        self.do_click(self.ADD_NEW_CATEGORY)
+        self.do_click(self.CATEGORY_NAME_FIELD)
+        self.do_sendkeys(self.CATEGORY_NAME_FIELD, Testdata.CATEGORY_NAME)
+        self.do_click(self.CATEGORY_DESCRIPTION_FIELD)
+        self.do_sendkeys(self.CATEGORY_DESCRIPTION_FIELD, Testdata.CATEGORY_DESCRIPTION)
+        self.do_click(self.ADD_CATEGORY_BUTTON)
+
+    def test_update_categories(self):
+        self.do_click(self.UPDATE_CATEGORY_ACCORDION)
+        self.do_click(self.ADD_SUB_CATEGORY_NAME_FIELD)
+        self.do_sendkeys(self.ADD_SUB_CATEGORY_NAME_FIELD, Testdata.ADD_SUB_CATEGORY_NAME)
+        self.do_click(self.ADD_SUB_CATEGORY_ICON)
+        self.do_click(self.CATEGORY_SUBMIT_BUTTON)
+
+    def test_adding_datapoint(self):
+        self.do_click(self.DATAPOINT_TAB)
+        self.do_click(self.DATAPOINT_CATEGORY_NAME_FIELD)
+        self.do_sendkeys(self.DATAPOINT_CATEGORY_NAME_FIELD, Testdata.DATAPOINT_CATEGORY_NAME)
+        self.do_click(self.DATAPOINT_CATEGORY_DESCRIPTION_FIELD)
+        self.do_sendkeys(self.DATAPOINT_CATEGORY_DESCRIPTION_FIELD, Testdata.DATAPOINT_CATEGORY_DESCRIPTION)
+        self.do_click(self.DATAPOINT_CATEGORY_ADD_BUTTON)
+        self.do_click(self.DATAPOINT_CATEGORY_SUBMIT_BUTTON)
+
+    def test_update_Datapoint_attributes(self):
+        self.do_click(self.UPDATE_DATAPOINT_CATEGORY)
+        self.do_click(self.ADD_DATAPOINT_ATTRIBUTE_NAME_FIELD)
+        self.do_sendkeys(self.ADD_DATAPOINT_ATTRIBUTE_NAME_FIELD, Testdata.ADD_DATAPOINT_ATTRIBUTES)
+        self.do_click(self.ADD_DATAPOINT_ATTRIBUTE_ICON)
+        self.do_click(self.DATAPOINT_CATEGORY_SUBMIT_BUTTON)
+        self.do_click(self.UPDATE_DATAPOINT_CATEGORY_EDIT_BUTTON)
+        self.do_click(self.EDIT_DATAPOINT_CATEGORY_NAME_FIELD)
+        self.do_select_all(self.EDIT_DATAPOINT_CATEGORY_NAME_FIELD)
+        self.do_clear(self.EDIT_DATAPOINT_CATEGORY_NAME_FIELD)
+        self.do_sendkeys(self.EDIT_DATAPOINT_CATEGORY_NAME_FIELD, Testdata.UPDATED_DATAPOINT_CATEGORY_NAME)
+        self.do_click(self.UPDATE_DATAPOINT_CATEGORY_NAME_BUTTON)
+        self.do_click(self.DATAPOINT_CATEGORY_SUBMIT_BUTTON)
+        self.do_click(self.DELETE_DATAPOINT_CATEGORY)
+        self.do_click(self.DELETE_DATAPOINT_CATEGORY_2)
Index: Pageobjects/Basepage.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Pageobjects/Basepage.py b/Pageobjects/Basepage.py
new file mode 100644
--- /dev/null	(date 1690893124886)
+++ b/Pageobjects/Basepage.py	(date 1690893124886)
@@ -0,0 +1,248 @@
+from selenium.webdriver import ActionChains
+from selenium.webdriver.support.ui import WebDriverWait
+from selenium.webdriver.common.keys import Keys
+from selenium.webdriver.common.by import By
+from selenium.webdriver.support import expected_conditions as EC
+from selenium.common.exceptions import TimeoutException
+from selenium.webdriver.common.action_chains import ActionChains
+
+"""This is parent class of the pages (Login page)"""
+
+"""It contains all the generic methods and Utilities for all the pages"""
+
+
+class Basepage:
+    def __init__(self, driver):
+        self.driver = driver
+
+    def do_click(self, by_locator):
+        wait = WebDriverWait(self.driver, 10)
+        element = wait.until(EC.visibility_of_element_located(by_locator))
+        # print("element in click fun", by_locator, element)
+        element.click()
+
+    def do_click_Delete_Button(self):
+        wait = WebDriverWait(self.driver, 10)  # Wait for a maximum of 10 seconds
+        element = wait.until(EC.element_to_be_clickable((By.XPATH, "//button[text()='Delete']")))
+        element.click()
+        # self.driver.find_element(By.XPATH, "//button[text()='Delete']").click()
+
+    def do_click_ADD_DATAPOINT_ATTRIBUTE_NAME_FIELD(self):
+        wait = WebDriverWait(self.driver, 10)  # Wait for a maximum of 10 seconds
+        element = wait.until(EC.presence_of_all_elements_located((By.ID, "datapoint-attribute-input-box-id")))
+        print("element", element)
+        element[0].click()
+    def do_click_LOAD_MORE(self):
+        self.driver.find_element(By.XPATH, "/html/body/div/div/div[2]/div/div[5]/div/button").click()
+
+    # def do_hover_to_element(self):
+    #     element = self.driver.find_element(By.CSS_SELECTOR,"button#New-load-more-button")
+    #     actions = ActionChains(self.driver)
+    #     actions.move_to_element(element).perform()
+    #     # Scroll the element into view if it's not visible after hover
+    #     self.driver.execute_script("arguments[0].scrollIntoView(true);", element)
+    #     element.click()
+
+    # def do_hover_to_element(self, SELECT_ALL_COLUMNS_CHECKBOX_1):
+    #     actions = ActionChains(self.driver)
+    # WebDriverWait(self.driver, 20).until(actions.move_to_element(SELECT_ALL_COLUMNS_CHECKBOX_1)).perform().click()
+
+    def do_click_constanly_updating_checkbox(self):
+        self.driver.find_element(By.ID, "check-box-undefined").click()
+
+    def do_click_costeward_checkbox(self):
+        self.driver.find_element(By.ID, "add-participant-make-costeward").click()
+
+    def do_click_apply_button(self):
+        self.driver.find_element(By.ID, "generate_button").click()
+
+    def do_clickable_Checkbox_Connectors_2(self):
+        self.driver.find_element(By.ID, "select-all-1-columns").click()
+
+    def do_clickable_mask(self):
+        self.driver.find_element(By.ID, "check-box-1").click()
+
+    def do_clickable_CATEGORY(self):
+        self.driver.find_element(By.ID, "check-box-0").click()
+
+    def do_clickable_REGISTER_USER(self):
+        self.driver.find_element(By.ID, "usege-policy-register-user-dataset-checkbox").click()
+
+    def do_clickable_MYSQL_COLUMN_CHECKBOX(self):
+        self.driver.find_element(By.ID, "MySQL-uploaded-data-checkbox-id-0").click()
+        self.driver.find_element(By.ID, "MySQL-uploaded-data-checkbox-id-1").click()
+        self.driver.find_element(By.ID, "MySQL-uploaded-data-checkbox-id-2").click()
+        self.driver.find_element(By.ID, "MySQL-uploaded-data-checkbox-id-3").click()
+        self.driver.find_element(By.ID, "MySQL-uploaded-data-checkbox-id-4").click()
+
+    def do_clickable_POSTGRES_COLUMN_CHECKBOX(self):
+        self.driver.find_element(By.ID, "Postgres-uploaded-data-checkbox-id-0").click()
+        self.driver.find_element(By.ID, "Postgres-uploaded-data-checkbox-id-1").click()
+        self.driver.find_element(By.ID, "Postgres-uploaded-data-checkbox-id-2").click()
+        self.driver.find_element(By.ID, "Postgres-uploaded-data-checkbox-id-3").click()
+        self.driver.find_element(By.ID, "Postgres-uploaded-data-checkbox-id-4").click()
+
+    def do_clickable_Checkbox_Connectors(self):
+        self.driver.find_element(By.ID, "select-all-0-columns").click()
+
+    def do_click_DATABASE_NAME_FIELD(self):
+        self.driver.find_element(By.ID, "MySQL-upload-dataset-db-name-id").click()
+
+    def do_sendkeys_DATABASE_NAME_FIELD(self):
+        self.driver.find_element(By.ID, "MySQL-upload-dataset-db-name-id").send_keys("suitecrm")
+
+    def do_click_USER_NAME_MYSQL_FIELD(self):
+        self.driver.find_element(By.ID, "MySQL-upload-dataset-user-name-id").click()
+
+    def do_sendkeys_USER_NAME_MYSQL_FIELD(self):
+        self.driver.find_element(By.ID, "MySQL-upload-dataset-user-name-id").send_keys("readonly")
+
+    def do_click_PASSWORD_MYSQL_FIELD(self):
+        self.driver.find_element(By.ID, "MySQL-upload-dataset-password-id").click()
+
+    def do_sendkeys_PASSWORD_MYSQL_FIELD(self):
+        self.driver.find_element(By.ID, "MySQL-upload-dataset-password-id").send_keys("KLxnnme.C_2GR#G")
+
+    def do_click_DATABASE_HOST_URL_MySQL_FIELD(self):
+        self.driver.find_element(By.ID, "MySQL-upload-dataset-database-host-url-id").click()
+
+    def do_sendkeys_DATABASE_HOST_URL_MySQL_FIELD(self):
+        self.driver.find_element(By.ID, "MySQL-upload-dataset-database-host-url-id").send_keys(
+            "copiamexiconoetlparadigitalgreen.cskysn2rpea7.us-east-2.rds.amazonaws.com")
+
+    def do_sendkeys_MYSQL_PORT_FIELD(self):
+        self.driver.find_element(By.ID, "MySQL-upload-dataset-port-id").send_keys("3306")
+
+    def do_click_MYSQL_PORT_FIELD(self):
+        self.driver.find_element(By.ID, "MySQL-upload-dataset-port-id").click()
+
+    def do_click_MYSQL_CONNECT_BUTTON(self):
+        self.driver.find_element(By.ID, "MySQL-upload-dataset-connect-btn").click()
+
+    def do_click_SELECT_TABLE_MYSQL_FIELD(self):
+        self.driver.find_element(By.ID, "MySQL-upload-dataset-select-id").click()
+
+    def do_click_SELECT_TABLE_MYSQL(self):
+        self.driver.find_element(By.ID, "MySQL-upload-dataset-select-id-7").click()
+
+    def do_click_FILE_NAME_MYSQL_IMPORT_DATA_FIELD(self):
+        self.driver.find_element(By.ID, "MySQL-upload-dataset-filename-id").click()
+
+    def do_sendkeys_FILE_NAME_MYSQL_IMPORT_DATA_FIELD(self):
+        self.driver.find_element(By.ID, "MySQL-upload-dataset-filename-id").send_keys("FILE_NAME_SQL")
+
+    def do_click_IMPORT_BUTTON_MYSQL(self):
+        self.driver.find_element(By.ID, "MySQL-upload-dataset-import-btn").click()
+
+    def do_click_DATABASE_NAME_FIELD_Postgres(self):
+        self.driver.find_element(By.ID, "Postgres-upload-dataset-db-name-id").click()
+
+    def do_sendkeys_DATABASE_NAME_FIELD_Postgres(self):
+        self.driver.find_element(By.ID, "Postgres-upload-dataset-db-name-id").send_keys("postgres")
+
+    def do_click_USER_NAME_POSTGRES_FIELD(self):
+        self.driver.find_element(By.ID, "Postgres-upload-dataset-user-name-id").click()
+
+    def do_sendkeys_USER_NAME_POSTGRES_FIELD(self):
+        self.driver.find_element(By.ID, "Postgres-upload-dataset-user-name-id").send_keys("root")
+
+    def do_click_PASSWORD_POSTGRES_FIELD(self):
+        self.driver.find_element(By.ID, "Postgres-upload-dataset-password-id").click()
+
+    def do_sendkeys_PASSWORD_POSTGRES_FIELD(self):
+        self.driver.find_element(By.ID, "Postgres-upload-dataset-password-id").send_keys("xKG1A4bQ2XX3@e!8d")
+
+    def do_click_DATABASE_HOST_URL_POSTGRES_FIELD(self):
+        self.driver.find_element(By.ID, "Postgres-upload-dataset-database-host-url-id").click()
+
+    def do_sendkeys_DATABASE_HOST_URL_POSTGRES_FIELD(self):
+        self.driver.find_element(By.ID, "Postgres-upload-dataset-database-host-url-id").send_keys(
+            "52.64.104.116")
+
+    def do_click_POSTGRES_PORT_FIELD(self):
+        self.driver.find_element(By.ID, "Postgres-upload-dataset-port-id").click()
+
+    def do_sendkeys_POSTGRES_PORT_FIELD(self):
+        self.driver.find_element(By.ID, "Postgres-upload-dataset-port-id").send_keys("5542")
+
+    def do_click_POSTGRES_CONNECT_BUTTON(self):
+        self.driver.find_element(By.ID, "Postgres-upload-dataset-connect-btn").click()
+
+    def do_click_SELECT_TABLE_POSTGRES_FIELD(self):
+        self.driver.find_element(By.ID, "Postgres-upload-dataset-select-id").click()
+
+    def do_click_SELECT_TABLE_POSTGRES(self):
+        self.driver.find_element(By.ID, "Postgres-upload-dataset-select-id-1").click()
+
+    def do_click_FILE_NAME_POSTGRES_IMPORT_DATA_FIELD(self):
+        self.driver.find_element(By.ID, "Postgres-upload-dataset-filename-id").click()
+
+    def do_sendkeys_FILE_NAME_POSTGRES_IMPORT_DATA_FIELD(self):
+        self.driver.find_element(By.ID, "Postgres-upload-dataset-filename-id").send_keys("FILE_NAME_POSTGRES")
+
+    def do_click_IMPORT_BUTTON_POSTGRES(self):
+        self.driver.find_element(By.ID, "Postgres-upload-dataset-import-btn").click()
+
+    def do_select_all(self, by_locator):
+        Text = WebDriverWait(self.driver, 10).until(EC.visibility_of_element_located(by_locator))
+        Text.send_keys(Keys.COMMAND, "a")
+
+    def do_clear(self, by_locator):
+        Text = WebDriverWait(self.driver, 10).until(EC.visibility_of_element_located(by_locator))
+        Text.send_keys(Keys.BACK_SPACE)
+
+    def do_enter(self, by_locator):
+        Text = WebDriverWait(self.driver, 10).until(EC.visibility_of_element_located(by_locator))
+        Text.send_keys(Keys.ENTER)
+
+    def do_scroll_down(self, by_locator):
+        WebDriverWait(self.driver, 10).until(EC.visibility_of_element_located(by_locator)).send_keys(Keys.PAGE_DOWN)
+
+    def do_scroll_up(self, by_locator):
+        WebDriverWait(self.driver, 10).until(EC.visibility_of_element_located(by_locator)).send_keys(Keys.PAGE_UP)
+
+    def do_sendkeys(self, by_locator, text):
+        WebDriverWait(self.driver, 10).until(EC.visibility_of_element_located(by_locator)).send_keys(text)
+
+    def do_sendkeys_1(self):
+        self.driver.find_element(By.XPATH, "//input[@type='file']").send_keys(
+            "/Users/shaikmohamedimran/Desktop/CIMMYT_Data/PXD Feed (1).xlsx")
+
+    def do_sendkeys_edit_dataset(self):
+        self.driver.find_element(By.XPATH, "//input[@type='file']").send_keys(
+            "/Users/shaikmohamedimran/Desktop/CIMMYT_Data/LDI_31.xls")
+
+    def do_sendkeys_ORG_LOGO(self):
+        self.driver.find_element(By.XPATH, "//input[@type='file']").send_keys(
+            "/Users/shaikmohamedimran/Desktop/CIMMYT_Data/DigitalGreen_logo.png")
+
+    def do_sendkeys_POLICIES(self):
+        self.driver.find_element(By.XPATH, "//input[@type='file']").send_keys(
+            "/Users/shaikmohamedimran/Desktop/CIMMYT_Data/Warranties.pdf")
+
+    def do_click_checkbox_filter_Subcategories(self):
+        self.driver.find_element(By.ID, "check-box-1").click()
+
+    def do_sendkeys_UPDATE_POLICIES(self):
+        self.driver.find_element(By.ID, "file-upload-drag-and-drop-0-file-update").send_keys(
+            "/Users/shaikmohamedimran/Desktop/CIMMYT_Data/Warranties.pdf")
+
+    def get_element_text(self, by_locator):
+        element = WebDriverWait(self.driver, 10).until(EC.visibility_of_element_located(by_locator))
+        return element.text
+
+    def is_visible(self, by_locator):
+        element = WebDriverWait(self.driver, 10).until(EC.visibility_of_element_located(by_locator))
+        return bool(element)
+
+    def is_enabled(self, by_locator):
+        element = WebDriverWait(self.driver, 10).until(EC.visibility_of_element_located(by_locator))
+        return bool(element)
+
+    def get_title(self, title):
+        WebDriverWait(self.driver, 10).until(EC.title_is(title))
+        return self.driver.title
+
+    def get_AUTH_TOKEN(self):
+        AUTH_TOKEN = self.driver.execute_script("return window.localStorage.getItem('JWTToken')")
+        return AUTH_TOKEN
Index: Pageobjects/Loginpage.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Pageobjects/Loginpage.py b/Pageobjects/Loginpage.py
new file mode 100644
--- /dev/null	(date 1690441871950)
+++ b/Pageobjects/Loginpage.py	(date 1690441871950)
@@ -0,0 +1,63 @@
+from time import sleep
+
+from selenium.webdriver.common.by import By
+
+from Configurations.config import Testdata
+from Pageobjects.Basepage import Basepage
+from Pageobjects.Homepage import Homepage
+
+"""By locators"""
+
+
+class Loginpage(Basepage):
+    REGISTER_TAB = (By.ID,"navbar-register")
+    LOGIN_AS_ADMIN_BUTTON = (By.ID, "navbar-login")
+    USERNAME_FIELD = (By.ID, "email_id_for_login")
+    SEND_OTP_BUTTON = (By.ID, "send-otp-btn")
+    ENTER_OTP = (By.ID, "email_id_for_login")
+    VERIFY_OTP_BUTTON = (By.ID, "send-otp-btn")
+    SIGNOUT_BUTTON = (By.ID,"navbar-signout")
+
+    ORGANIZATION_NAME_FIELD = (By.ID, "organisation-name-id")
+    ORGANIZATION_EMAIL_ID_FIELD = (By.ID, "add-participant-mail-id")
+    ORGANIZATION_WEBSITE_LINK = (By.ID, "add-participant-website-link")
+    ORGANIZATION_ADDRESS = (By.ID, "add-participant-organisation-address")
+    COUNTRY_DROP_DOWN = (By.ID, "country-in-add-participants")
+    SELECT_COUNTRY = (By.ID, "country-[object Object]103")
+    PINCODE_FIELD = (By.ID, "add-participant-pin-code")
+    FIRST_NAME_FIELD = (By.ID, "add-participant-first-name")
+    LAST_NAME_FIELD = (By.ID, "add-participant-last-name")
+    ORGANIZATION_ROOT_USER_EMAIL_ID_FIELD = (By.ID,"add-participant-rootuser-mail-id")
+    ORGANIZATION_CONTACT_NUMBER = (By.ID, "add-participant-phone-number")
+    SELECT_COSTEWARD_DROP_DOWN = (By.ID,"select_costeward")
+    SELECT_COSTEWARD = (By.ID,"select-costeward-7")
+    CANCEL_BUTTON = (By.ID,"add-participant-cancel-button")
+    SUBMIT_BUTTON = (By.ID, "add-participant-submit-button")
+
+    """Constructor of the page class"""
+
+    def __init__(self, driver):
+        super().__init__(driver)
+        self.driver.get(Testdata.BASEURL)
+        sleep(2)
+
+    """This is to get the Homepage title"""
+
+    def get_Home_page_title(self, title):
+        return self.get_title(title)
+
+    """ These are the page actions for the Login_page"""
+
+    def do_login(self, username, OTP):
+        # signout_button = self.driver.find_element(By.ID,"navbar-signout")
+        # print(signout_button)
+        # if signout_button == "Signout":
+        #
+        #     self.do_click(self.SIGNOUT_BUTTON)
+        # # else:
+        self.do_click(self.LOGIN_AS_ADMIN_BUTTON)
+        self.do_sendkeys(self.USERNAME_FIELD, username)
+        self.do_click(self.SEND_OTP_BUTTON)
+        self.do_sendkeys(self.ENTER_OTP, OTP)
+        self.do_click(self.VERIFY_OTP_BUTTON)
+        # return Homepage(self.driver)
Index: Configurations/config.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Configurations/config.py b/Configurations/config.py
new file mode 100644
--- /dev/null	(date 1690888794583)
+++ b/Configurations/config.py	(date 1690888794583)
@@ -0,0 +1,212 @@
+import random
+import string
+
+
+class Testdata:
+    CHROME_EXECUTABLE_PATH = "/Users/shaikmohamedimran/Desktop/D/Web drivers/chromedriver.exe"
+
+    BASEURL = "https://datahubethstage.farmstack.co/"
+    USER_NAME = "imran+1@digitalgreen.org"
+    OTP = "123456"
+    HOMEPAGE_TITLE = "DataHub"
+    N = 10
+    ORGANIZATION_NAME = ''.join(random.choices(string.ascii_letters, k=N))
+
+    # ORGANIZATION_EMAIL_ID:
+    # generate a random username
+    username = ''.join(random.choice(string.ascii_lowercase) for i in range(8))
+
+    # generate a random domain
+    domain = ''.join(random.choice(string.ascii_lowercase) for i in range(10))
+
+    # create the email address
+    ORGANIZATION_EMAIL_ID = f"{username}@{domain}.com"
+
+    # INVITE PARTICIPANT_EMAIL_ID:
+    # generate a random username
+    username = ''.join(random.choice(string.ascii_lowercase) for i in range(9))
+
+    # generate a random domain
+    domain = ''.join(random.choice(string.ascii_lowercase) for i in range(8))
+
+    # create the email address
+    INVITE_PARTICIPANT_EMAIL_ID = f"{username}@{domain}.com"
+    ADD_INVITE_NOTE_TEXT = "I have gone through your website, I am interest to join in your organization"
+    # ORGANIZATION_EMAIL_ID_2:
+    # generate a random username
+    username = ''.join(random.choice(string.ascii_lowercase) for i in range(10))
+
+    # generate a random domain
+    domain = ''.join(random.choice(string.ascii_lowercase) for i in range(6))
+
+    # create the email address
+    ORGANIZATION_EMAIL_ID_2 = f"{username}@{domain}.com"
+
+    # generate a random domain name
+    domain = ''.join(random.choice(string.ascii_lowercase) for i in range(10))
+
+    # create the website link
+    ORGANIZATION_WEBSITE_LINK = f"https://www.{domain}.com"
+
+    ORGANIZATION_ADDRESS = "Bangalore"
+
+    # generate a random 6-digit pin code
+    PINCODE = random.randint(100000, 999999)
+
+    N = 10
+    FIRST_NAME = ''.join(random.choices(string.ascii_letters, k=N))
+    N = 10
+    LAST_NAME = ''.join(random.choices(string.ascii_letters, k=N))
+
+    CONTACT_NUMBER = "9876545678"
+
+    # generate a random username
+    username = ''.join(random.choice(string.ascii_lowercase) for i in range(10))
+
+    # generate a random domain
+    domain = ''.join(random.choice(string.ascii_lowercase) for i in range(5))
+
+    # create the email address
+    ORGANIZATION_ROOT_USER_EMAIL_ID = f"{username}@{domain}.com"
+
+    # generate a random username
+    username = ''.join(random.choice(string.ascii_lowercase) for i in range(10))
+
+    # generate a random domain
+    domain = ''.join(random.choice(string.ascii_lowercase) for i in range(6))
+
+    # create the email address
+    ORGANIZATION_ROOT_USER_EMAIL_ID_2 = f"{username}@{domain}.com"
+
+    ACCOUNT_FIRST_NAME = "Imran"
+    ACCOUNT_LAST_NAME = "Shaik"
+    ACCOUNT_CONTACT_NUMBER = "9876543876"
+
+    # Update the Organization settings:
+
+    UPDATE_ORGANIZATION_NAME = "Imran Agri Solutions"
+    UPDATE_ORGANIZATION_MAIL_ID = "imranagrisolutions@gmail.com"
+    UPDATE_ORGANIZATION_WEBSITE_LINK = "https://www.ImranAgriSolutions@gmail.co"
+    UPDATE_ORGANIZATION_CONTACT_NUMBER = "7013733824"
+    UPDATE_ORGANIZATION_ADDRESS = "Bangalore"
+    UPDATE_ORGANIZATION_PINCODE = "567876"
+    UPDATE_ORGANIZATION_DESCRIPTION = "Data and information can be exchanged trustworthily without the need to monetise or pay for insights."
+
+    # Update the Policy Settings:
+    N = 10
+    POLICY_NAME = ''.join(random.choices(string.ascii_letters, k=N))
+    POLICY_DESCRIPTION = "Warranties"
+
+    N = 10
+    UPDATE_POLICY_NAME = ''.join(random.choices(string.ascii_letters, k=N))
+    UPDATE_POLICY_DESCRIPTION = "Terms and Conditions"
+
+    # Update the Policy Settings:
+    N = 12
+    CATEGORY_NAME = ''.join(random.choices(string.ascii_letters, k=N))
+    CATEGORY_DESCRIPTION = "SERICULTURE"
+
+    N = 8
+    ADD_SUB_CATEGORY_NAME = ''.join(random.choices(string.ascii_letters, k=N))
+
+    N = 10
+    DATAPOINT_CATEGORY_NAME = ''.join(random.choices(string.ascii_letters, k=N))
+
+    DATAPOINT_CATEGORY_DESCRIPTION = "Testing"
+
+    N = 9
+    ADD_DATAPOINT_ATTRIBUTES = ''.join(random.choices(string.ascii_letters, k=N))
+
+
+    UPDATED_DATAPOINT_CATEGORY_NAME = "DIGITALGREEN"
+
+    N = 15
+    characters = string.ascii_letters + string.digits
+    CONNECTOR_NAME = ''.join(random.choices(characters, k=N))
+
+    # N = 16
+    # CONNECTOR_NAME_MySQL = ''.join(random.choices(string.ascii_letters, k=N))
+    #
+    # N = 13
+    # CONNECTOR_NAME_Postgres = ''.join(random.choices(string.ascii_letters, k=N))
+
+    N = 10
+    characters = string.ascii_letters + string.digits
+    CONNECTOR_DESCRIPTION = ''.join(random.choices(characters, k=N))
+
+    N = 15
+    characters = string.ascii_letters + string.digits
+    DATASET_NAME = ''.join(random.choices(characters, k=N))
+
+    N = 10
+    characters = string.ascii_letters + string.digits
+    DATASET_DESCRIPTION = ''.join(random.choices(characters, k=N))
+
+    N = 16
+    characters = string.ascii_letters + string.digits
+    DATASET_NAME_MYSQL = ''.join(random.choices(characters, k=N))
+
+    N = 10
+    characters = string.ascii_letters + string.digits
+    DATASET_DESCRIPTION_MYSQL = ''.join(random.choices(characters, k=N))
+
+    N = 14
+    characters = string.ascii_letters + string.digits
+    DATASET_NAME_POSTGRES = ''.join(random.choices(characters, k=N))
+
+    N = 10
+    characters = string.ascii_letters + string.digits
+    DATASET_DESCRIPTION_POSTGRES = ''.join(random.choices(characters, k=N))
+
+    N = 18
+    characters = string.ascii_letters + string.digits
+    DATASET_NAME_REST_API = ''.join(random.choices(characters, k=N))
+
+    N = 10
+    characters = string.ascii_letters + string.digits
+    DATASET_DESCRIPTION_REST_API = ''.join(random.choices(characters, k=N))
+    # Upload file from Local:
+    UPLOAD_FILE = "/Users/shaikmohamedimran/Desktop/CIMMYT_Data/PXD Feed (1).xlsx"
+
+    DATABASE_NAME_MYSQL = "suitecrm"
+    USER_NAME_MYSQL = "readonly"
+    PASSWORD_MYSQL = "KLxnnme.C_2GR#G"
+    DATABASE_HOST_URL_MYSQL = "copiamexiconoetlparadigitalgreen.cskysn2rpea7.us-east-2.rds.amazonaws.com"
+    PORT_MYSQL = "3306"
+
+    DATABASE_NAME_POSTGRES = "postgres"
+    USER_NAME_POSTGRES = "root"
+    PASSWORD_POSTGRES = "xKG1A4bQ2XX3@e!8d"
+    DATABASE_HOST_URL_POSTGRES = "52.64.104.116"
+    PORT_POSTGRES = "5542"
+
+    N = 12
+    FILE_NAME_SQL = ''.join(random.choices(string.ascii_letters, k=N))
+
+    N = 12
+    FILE_NAME_POSTGRES = ''.join(random.choices(string.ascii_letters, k=N))
+
+    GET_API_URL_NOAUTH = "https://datahubethstage.farmstack.co/be/microsite/admin_organization/"
+    GET_API_URL_API_KEY = "https://chilly.qualix.ai/portal/scan/scan-history?from_date=15-02-2023&to_date=17-02-2023"
+    GET_API_URL_BEARER = "https://datahubethstage.farmstack.co/be/datahub/dataset/v2/category/"
+
+    API_KEY_NAME = "API-KEY"
+    API_KEY_VALUE = "9zvtydnon1a6jr3ltzex"
+    N = 12
+    FILE_NAME_NOAUTH = ''.join(random.choices(string.ascii_letters, k=N))
+
+    N = 12
+    FILE_NAME_API_KEY = ''.join(random.choices(string.ascii_letters, k=N))
+
+    N = 12
+    FILE_NAME_BEARER = ''.join(random.choices(string.ascii_letters, k=N))
+
+    SEARCH_INPUT_TEXT = "Dataset"
+
+    FILTER_START_DATE = "01/01/2023"
+
+    FILTER_END_DATE = "30/07/2023"
+
+    UPLOAD_POLICY_FILE = "/Users/shaikmohamedimran/Desktop/CIMMYT_Data/Warranties.pdf"
+
+    UPDATE_CATGEORY_NAME_FIELD = "Agricultural crops"
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1676187555623)
+++ b/.idea/modules.xml	(date 1676187555623)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/Farmstack 2.0.iml" filepath="$PROJECT_DIR$/Farmstack 2.0.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: Testcases/confitest.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Testcases/confitest.py b/Testcases/confitest.py
new file mode 100644
--- /dev/null	(date 1690267849135)
+++ b/Testcases/confitest.py	(date 1690267849135)
@@ -0,0 +1,24 @@
+from selenium import webdriver
+import pytest
+from selenium.webdriver.chrome.service import Service
+from Configurations.config import Testdata
+
+
+@pytest.fixture(params=["chrome"], scope='class')
+def init_driver(request):
+    driver = None
+    if request.param == "chrome":
+        # Path to the ChromeDriver executable
+        chrome_driver_path = Testdata.CHROME_EXECUTABLE_PATH
+
+        # Create a Service object
+        chrome_service = Service(executable_path=chrome_driver_path)
+
+        # Launch ChromeDriver using the Service object
+        driver = webdriver.Chrome(service=chrome_service)
+        request.cls.driver = driver
+        # yield
+        # driver.quit()
+        driver.implicitly_wait(10)
+        yield driver
+        driver.quit()
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
new file mode 100644
--- /dev/null	(date 1690893447018)
+++ b/.idea/workspace.xml	(date 1690893447018)
@@ -0,0 +1,184 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="AutoImportSettings">
+    <option name="autoReloadType" value="SELECTIVE" />
+  </component>
+  <component name="ChangeListManager">
+    <list default="true" id="011485fb-3af2-4fa6-818a-81154f254bb8" name="Changes" comment="">
+      <change afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/modules.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/vcs.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Configurations/config.py" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Farmstack 2.0.iml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Pageobjects/AddParticipant_page.py" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Pageobjects/Basepage.py" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Pageobjects/Connectorpage.py" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Pageobjects/Datasetpage.py" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Pageobjects/Homepage.py" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Pageobjects/Loginpage.py" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Pageobjects/SettingsPage.py" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Pageobjects/__init__.py" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Testcases/__init__.py" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Testcases/confitest.py" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Testcases/test_addparticipantpage.py" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Testcases/test_base.py" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Testcases/test_connectorpage.py" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Testcases/test_datasetpage.py" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Testcases/test_homepage.py" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Testcases/test_loginpage.py" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Testcases/test_settingspage.py" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Utilities/__init__.py" afterDir="false" />
+    </list>
+    <option name="SHOW_DIALOG" value="false" />
+    <option name="HIGHLIGHT_CONFLICTS" value="true" />
+    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
+    <option name="LAST_RESOLUTION" value="IGNORE" />
+  </component>
+  <component name="FileTemplateManagerImpl">
+    <option name="RECENT_TEMPLATES">
+      <list>
+        <option value="Python Script" />
+        <option value="Setup Script" />
+      </list>
+    </option>
+  </component>
+  <component name="Git.Settings">
+    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
+  </component>
+  <component name="MarkdownSettingsMigration">
+    <option name="stateVersion" value="1" />
+  </component>
+  <component name="ProjectId" id="2Ld4ISAfOYUtK5vTRZIItcwr7pQ" />
+  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
+  <component name="ProjectViewState">
+    <option name="hideEmptyMiddlePackages" value="true" />
+    <option name="showLibraryContents" value="true" />
+  </component>
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;settings.editor.selected.configurable&quot;: &quot;configurable.group.build&quot;
+  }
+}</component>
+  <component name="RecentsManager">
+    <key name="MoveFile.RECENT_KEYS">
+      <recent name="$PROJECT_DIR$/Testcases" />
+    </key>
+  </component>
+  <component name="RunManager" selected="Python tests.Python tests for test_settingspage.Test_Settings_page.test_Delete_Button_Category">
+    <configuration name="Python tests for test_settingspage.Test_Settings_page.test_Adding_Datapoint_Attributes" type="tests" factoryName="Autodetect" temporary="true" nameIsGenerated="true">
+      <module name="Farmstack 2.0" />
+      <option name="INTERPRETER_OPTIONS" value="" />
+      <option name="PARENT_ENVS" value="true" />
+      <option name="SDK_HOME" value="" />
+      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/Testcases" />
+      <option name="IS_MODULE_SDK" value="true" />
+      <option name="ADD_CONTENT_ROOTS" value="true" />
+      <option name="ADD_SOURCE_ROOTS" value="true" />
+      <option name="_new_additionalArguments" value="&quot;&quot;" />
+      <option name="_new_target" value="&quot;test_settingspage.Test_Settings_page.test_Adding_Datapoint_Attributes&quot;" />
+      <option name="_new_targetType" value="&quot;PYTHON&quot;" />
+      <method v="2" />
+    </configuration>
+    <configuration name="Python tests for test_settingspage.Test_Settings_page.test_Cancel_Button_Account_Settings" type="tests" factoryName="Autodetect" temporary="true" nameIsGenerated="true">
+      <module name="Farmstack 2.0" />
+      <option name="INTERPRETER_OPTIONS" value="" />
+      <option name="PARENT_ENVS" value="true" />
+      <option name="SDK_HOME" value="" />
+      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/Testcases" />
+      <option name="IS_MODULE_SDK" value="true" />
+      <option name="ADD_CONTENT_ROOTS" value="true" />
+      <option name="ADD_SOURCE_ROOTS" value="true" />
+      <option name="_new_additionalArguments" value="&quot;&quot;" />
+      <option name="_new_target" value="&quot;test_settingspage.Test_Settings_page.test_Cancel_Button_Account_Settings&quot;" />
+      <option name="_new_targetType" value="&quot;PYTHON&quot;" />
+      <method v="2" />
+    </configuration>
+    <configuration name="Python tests for test_settingspage.Test_Settings_page.test_Cancel_Button_Account_Settings.test_Delete_Button_Category" type="tests" factoryName="Autodetect" temporary="true" nameIsGenerated="true">
+      <module name="Farmstack 2.0" />
+      <option name="INTERPRETER_OPTIONS" value="" />
+      <option name="PARENT_ENVS" value="true" />
+      <option name="SDK_HOME" value="" />
+      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/Testcases" />
+      <option name="IS_MODULE_SDK" value="true" />
+      <option name="ADD_CONTENT_ROOTS" value="true" />
+      <option name="ADD_SOURCE_ROOTS" value="true" />
+      <option name="_new_additionalArguments" value="&quot;&quot;" />
+      <option name="_new_target" value="&quot;test_settingspage.Test_Settings_page.test_Cancel_Button_Account_Settings.test_Delete_Button_Category&quot;" />
+      <option name="_new_targetType" value="&quot;PYTHON&quot;" />
+      <method v="2" />
+    </configuration>
+    <configuration name="Python tests for test_settingspage.Test_Settings_page.test_Delete_Button_Category" type="tests" factoryName="Autodetect" temporary="true" nameIsGenerated="true">
+      <module name="Farmstack 2.0" />
+      <option name="INTERPRETER_OPTIONS" value="" />
+      <option name="PARENT_ENVS" value="true" />
+      <option name="SDK_HOME" value="" />
+      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/Testcases" />
+      <option name="IS_MODULE_SDK" value="true" />
+      <option name="ADD_CONTENT_ROOTS" value="true" />
+      <option name="ADD_SOURCE_ROOTS" value="true" />
+      <option name="_new_additionalArguments" value="&quot;&quot;" />
+      <option name="_new_target" value="&quot;test_settingspage.Test_Settings_page.test_Delete_Button_Category&quot;" />
+      <option name="_new_targetType" value="&quot;PYTHON&quot;" />
+      <method v="2" />
+    </configuration>
+    <configuration name="Python tests for test_settingspage.Test_Settings_page.test_adding_datapoint_category" type="tests" factoryName="Autodetect" temporary="true" nameIsGenerated="true">
+      <module name="Farmstack 2.0" />
+      <option name="INTERPRETER_OPTIONS" value="" />
+      <option name="PARENT_ENVS" value="true" />
+      <option name="SDK_HOME" value="" />
+      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/Testcases" />
+      <option name="IS_MODULE_SDK" value="true" />
+      <option name="ADD_CONTENT_ROOTS" value="true" />
+      <option name="ADD_SOURCE_ROOTS" value="true" />
+      <option name="_new_additionalArguments" value="&quot;&quot;" />
+      <option name="_new_target" value="&quot;test_settingspage.Test_Settings_page.test_adding_datapoint_category&quot;" />
+      <option name="_new_targetType" value="&quot;PYTHON&quot;" />
+      <method v="2" />
+    </configuration>
+    <recent_temporary>
+      <list>
+        <item itemvalue="Python tests.Python tests for test_settingspage.Test_Settings_page.test_Delete_Button_Category" />
+        <item itemvalue="Python tests.Python tests for test_settingspage.Test_Settings_page.test_Cancel_Button_Account_Settings.test_Delete_Button_Category" />
+        <item itemvalue="Python tests.Python tests for test_settingspage.Test_Settings_page.test_Adding_Datapoint_Attributes" />
+        <item itemvalue="Python tests.Python tests for test_settingspage.Test_Settings_page.test_adding_datapoint_category" />
+        <item itemvalue="Python tests.Python tests for test_settingspage.Test_Settings_page.test_Cancel_Button_Account_Settings" />
+      </list>
+    </recent_temporary>
+  </component>
+  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
+  <component name="TaskManager">
+    <task active="true" id="Default" summary="Default task">
+      <changelist id="011485fb-3af2-4fa6-818a-81154f254bb8" name="Changes" comment="" />
+      <created>1676187554506</created>
+      <option name="number" value="Default" />
+      <option name="presentableId" value="Default" />
+      <updated>1676187554506</updated>
+    </task>
+    <servers />
+  </component>
+  <component name="XDebuggerManager">
+    <breakpoint-manager>
+      <breakpoints>
+        <line-breakpoint enabled="true" suspend="THREAD" type="python-line">
+          <url>file://$PROJECT_DIR$/Pageobjects/SettingsPage.py</url>
+          <line>73</line>
+          <option name="timeStamp" value="19" />
+        </line-breakpoint>
+        <line-breakpoint enabled="true" suspend="THREAD" type="python-line">
+          <url>file://$PROJECT_DIR$/Pageobjects/SettingsPage.py</url>
+          <line>77</line>
+          <option name="timeStamp" value="20" />
+        </line-breakpoint>
+        <line-breakpoint enabled="true" suspend="THREAD" type="python-line">
+          <url>file://$PROJECT_DIR$/Pageobjects/AddParticipant_page.py</url>
+          <line>40</line>
+          <option name="timeStamp" value="22" />
+        </line-breakpoint>
+      </breakpoints>
+    </breakpoint-manager>
+  </component>
+</project>
\ No newline at end of file
Index: Testcases/test_loginpage.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Testcases/test_loginpage.py b/Testcases/test_loginpage.py
new file mode 100644
--- /dev/null	(date 1690788241373)
+++ b/Testcases/test_loginpage.py	(date 1690788241373)
@@ -0,0 +1,61 @@
+from time import sleep
+
+import pytest
+import allure
+
+from Configurations.config import Testdata
+from Pageobjects.Loginpage import Loginpage
+from Testcases.confitest import init_driver
+from Testcases.test_base import Basetest
+
+from allure_commons.types import AttachmentType
+
+
+class Test_login(Basetest):
+
+    @allure.description("Testing Homepage Title")
+    @allure.severity(allure.severity_level.CRITICAL)
+    def test_Home_page_title(self):
+        self.Homepage = Loginpage(self.driver)
+        title = self.Homepage.get_title(Testdata.HOMEPAGE_TITLE)
+        print(title)
+
+        if self.driver.title == "DataHub":
+            allure.attach(self.driver.get_screenshot_as_png(), name="Valid Homepage",
+                          attachment_type=AttachmentType.PNG)
+            assert True, "Valid Homepagee"
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="Invalid Homepage",
+                          attachment_type=AttachmentType.PNG)
+            assert False, "Invalid Homepage"
+        print("Completed")
+
+    @allure.description("Testing Log in functionality")
+    @allure.severity(allure.severity_level.CRITICAL)
+    def test_login_as_admin(self):
+        self.loginpage = Loginpage(self.driver)
+        sleep(3)
+        self.driver.execute_script("window.localStorage.clear();")
+        sleep(3)
+        self.driver.execute_script("window.location.reload(true);")
+        sleep(2)
+        self.driver.maximize_window()
+        self.loginpage.do_click(Loginpage.LOGIN_AS_ADMIN_BUTTON)
+        self.loginpage.do_click(Loginpage.USERNAME_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.USERNAME_FIELD, Testdata.USER_NAME)
+        self.loginpage.do_click(Loginpage.SEND_OTP_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.ENTER_OTP)
+        self.loginpage.do_sendkeys(Loginpage.ENTER_OTP, Testdata.OTP)
+        self.loginpage.do_click(Loginpage.VERIFY_OTP_BUTTON)
+        sleep(2)
+        if self.driver.current_url == "https://datahubethstage.farmstack.co/datahub/new_datasets":
+            allure.attach(self.driver.get_screenshot_as_png(), name="Login is successful",
+                          attachment_type=AttachmentType.PNG)
+            assert True, "Login is successful"
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="Login is failed",
+                          attachment_type=AttachmentType.PNG)
+            assert False, "Login is failed"
+        print("Completed")
+
Index: Farmstack 2.0.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Farmstack 2.0.iml b/Farmstack 2.0.iml
new file mode 100644
--- /dev/null	(date 1676187601804)
+++ b/Farmstack 2.0.iml	(date 1676187601804)
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="PYTHON_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$" />
+    <orderEntry type="jdk" jdkName="Python 3.10 (Farmstack 2.0)" jdkType="Python SDK" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1676187555639)
+++ b/.idea/vcs.xml	(date 1676187555639)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: Testcases/test_addparticipantpage.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Testcases/test_addparticipantpage.py b/Testcases/test_addparticipantpage.py
new file mode 100644
--- /dev/null	(date 1690830640055)
+++ b/Testcases/test_addparticipantpage.py	(date 1690830640055)
@@ -0,0 +1,816 @@
+from time import sleep
+
+import pytest
+from selenium.webdriver.common.by import By
+import allure
+from allure_commons.types import AttachmentType
+from Pageobjects.Basepage import Basepage
+from Configurations.config import Testdata
+from Pageobjects.Loginpage import Loginpage
+from Testcases.confitest import init_driver
+from Testcases.test_base import Basetest
+from Pageobjects.AddParticipant_page import Participant_page
+
+
+class Test_add_participant(Basetest):
+
+    @allure.description("Testing Admin Adding Participant")
+    @allure.severity(allure.severity_level.CRITICAL)
+    def test_Admin_adding_participant(self):
+        self.loginpage = Loginpage(self.driver)
+        sleep(3)
+        self.driver.execute_script("window.localStorage.clear();")
+        sleep(3)
+        self.driver.execute_script("window.location.reload(true);")
+        sleep(2)
+        self.driver.maximize_window()
+        self.loginpage.do_click(Loginpage.LOGIN_AS_ADMIN_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.USERNAME_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.USERNAME_FIELD, Testdata.USER_NAME)
+        self.loginpage.do_click(Loginpage.SEND_OTP_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.ENTER_OTP)
+        self.loginpage.do_sendkeys(Loginpage.ENTER_OTP, Testdata.OTP)
+        self.loginpage.do_click(Loginpage.VERIFY_OTP_BUTTON)
+        sleep(2)
+        self.participant_page = Participant_page(self.driver)
+        self.driver.maximize_window()
+        self.participant_page.do_click(Participant_page.PARTICIPANTS_BUTTON)
+        sleep(2)
+        self.participant_page.do_click(Participant_page.PARTICIPANT_BUTTON)
+        sleep(2)
+        self.participant_page.do_click(Participant_page.PARTICIPANT_CARD_BUTTON)
+        sleep(1)
+        self.participant_page.do_click(Participant_page.ORGANIZATION_NAME_FIELD)
+        sleep(2)
+        self.participant_page.do_sendkeys(Participant_page.ORGANIZATION_NAME_FIELD, Testdata.ORGANIZATION_NAME)
+        sleep(1)
+        self.participant_page.do_click(Participant_page.ORGANIZATION_EMAIL_ID_FIELD)
+        self.participant_page.do_sendkeys(Participant_page.ORGANIZATION_EMAIL_ID_FIELD, Testdata.ORGANIZATION_EMAIL_ID)
+        sleep(2)
+        self.participant_page.do_click(Participant_page.ORGANIZATION_WEBSITE_LINK)
+        self.participant_page.do_sendkeys(Participant_page.ORGANIZATION_WEBSITE_LINK,
+                                          Testdata.ORGANIZATION_WEBSITE_LINK)
+        self.participant_page.do_click(Participant_page.ORGANIZATION_ADDRESS)
+        self.participant_page.do_sendkeys(Participant_page.ORGANIZATION_ADDRESS, Testdata.ORGANIZATION_ADDRESS)
+        self.participant_page.do_click(Participant_page.COUNTRY_DROP_DOWN)
+        sleep(1)
+        self.participant_page.do_click(Participant_page.SELECT_COUNTRY)
+        self.participant_page.do_click(Participant_page.PINCODE_FIELD)
+        self.participant_page.do_sendkeys(Participant_page.PINCODE_FIELD, Testdata.PINCODE)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,500);")
+        sleep(2)
+        self.participant_page.do_click(Participant_page.FIRST_NAME_FIELD)
+        self.participant_page.do_sendkeys(Participant_page.FIRST_NAME_FIELD, Testdata.FIRST_NAME)
+        self.participant_page.do_click(Participant_page.LAST_NAME_FIELD)
+        self.participant_page.do_sendkeys(Participant_page.LAST_NAME_FIELD, Testdata.LAST_NAME)
+        self.participant_page.do_click(Participant_page.ORGANIZATION_ROOT_USER_EMAIL_ID_FIELD)
+        self.participant_page.do_sendkeys(Participant_page.ORGANIZATION_ROOT_USER_EMAIL_ID_FIELD,
+                                          Testdata.ORGANIZATION_ROOT_USER_EMAIL_ID_2)
+        self.participant_page.do_click(Participant_page.ORGANIZATION_CONTACT_NUMBER)
+        self.participant_page.do_sendkeys(Participant_page.ORGANIZATION_CONTACT_NUMBER, Testdata.CONTACT_NUMBER)
+        sleep(3)
+        self.participant_page.do_click(Participant_page.SUBMIT_BUTTON)
+        sleep(10)
+        self.participant_page.do_click(Participant_page.PARTICIPANT_BUTTON)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,300);")
+        sleep(2)
+
+        if self.driver.current_url == "https://datahubethstage.farmstack.co/datahub/participants":
+            allure.attach(self.driver.get_screenshot_as_png(), name="Successfully Participant is added by admin",
+                          attachment_type=AttachmentType.PNG)
+            assert True, "Participant is successfully added by admin"
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="Failed to add Participant by admin",
+                          attachment_type=AttachmentType.PNG)
+            assert False, "Failed to add Participant by admin"
+
+        self.participant_page.do_click(Participant_page.SIGN_OUT_BUTTON)
+        print("Completed")
+
+    @allure.description("Testing Admin Adding Participant to Co-steward")
+    @allure.severity(allure.severity_level.CRITICAL)
+    def test_Admin_adding_participant_to_costeward(self):
+        self.loginpage = Loginpage(self.driver)
+        sleep(3)
+        self.driver.execute_script("window.localStorage.clear();")
+        sleep(3)
+        self.driver.execute_script("window.location.reload(true);")
+        sleep(2)
+        self.driver.maximize_window()
+        self.loginpage.do_click(Loginpage.LOGIN_AS_ADMIN_BUTTON)
+        self.loginpage.do_click(Loginpage.USERNAME_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.USERNAME_FIELD, Testdata.USER_NAME)
+        self.loginpage.do_click(Loginpage.SEND_OTP_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.ENTER_OTP)
+        self.loginpage.do_sendkeys(Loginpage.ENTER_OTP, Testdata.OTP)
+        self.loginpage.do_click(Loginpage.VERIFY_OTP_BUTTON)
+        sleep(2)
+        self.participant_page = Participant_page(self.driver)
+        self.driver.maximize_window()
+        self.participant_page.do_click(Participant_page.PARTICIPANTS_BUTTON)
+        sleep(2)
+        self.participant_page.do_click(Participant_page.PARTICIPANT_BUTTON)
+        sleep(2)
+        self.participant_page.do_click(Participant_page.PARTICIPANT_CARD_BUTTON)
+        sleep(1)
+        self.participant_page.do_click(Participant_page.ORGANIZATION_NAME_FIELD)
+        sleep(2)
+        self.participant_page.do_sendkeys(Participant_page.ORGANIZATION_NAME_FIELD, Testdata.ORGANIZATION_NAME)
+        sleep(1)
+        self.participant_page.do_click(Participant_page.ORGANIZATION_EMAIL_ID_FIELD)
+        self.participant_page.do_sendkeys(Participant_page.ORGANIZATION_EMAIL_ID_FIELD,
+                                          Testdata.ORGANIZATION_EMAIL_ID_2)
+        sleep(2)
+        self.participant_page.do_click(Participant_page.ORGANIZATION_WEBSITE_LINK)
+        self.participant_page.do_sendkeys(Participant_page.ORGANIZATION_WEBSITE_LINK,
+                                          Testdata.ORGANIZATION_WEBSITE_LINK)
+        self.participant_page.do_click(Participant_page.ORGANIZATION_ADDRESS)
+        self.participant_page.do_sendkeys(Participant_page.ORGANIZATION_ADDRESS, Testdata.ORGANIZATION_ADDRESS)
+        self.participant_page.do_click(Participant_page.COUNTRY_DROP_DOWN)
+        sleep(1)
+        self.participant_page.do_click(Participant_page.SELECT_COUNTRY)
+        self.participant_page.do_click(Participant_page.PINCODE_FIELD)
+        self.participant_page.do_sendkeys(Participant_page.PINCODE_FIELD, Testdata.PINCODE)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,500);")
+        sleep(2)
+        self.participant_page.do_click(Participant_page.FIRST_NAME_FIELD)
+        self.participant_page.do_sendkeys(Participant_page.FIRST_NAME_FIELD, Testdata.FIRST_NAME)
+        self.participant_page.do_click(Participant_page.LAST_NAME_FIELD)
+        self.participant_page.do_sendkeys(Participant_page.LAST_NAME_FIELD, Testdata.LAST_NAME)
+        self.participant_page.do_click(Participant_page.ORGANIZATION_ROOT_USER_EMAIL_ID_FIELD)
+        self.participant_page.do_sendkeys(Participant_page.ORGANIZATION_ROOT_USER_EMAIL_ID_FIELD,
+                                          Testdata.ORGANIZATION_ROOT_USER_EMAIL_ID)
+        self.participant_page.do_click(Participant_page.ORGANIZATION_CONTACT_NUMBER)
+        self.participant_page.do_sendkeys(Participant_page.ORGANIZATION_CONTACT_NUMBER, Testdata.CONTACT_NUMBER)
+        sleep(2)
+        self.participant_page.do_click_costeward_checkbox()
+        sleep(2)
+        self.participant_page.do_click(Participant_page.SUBMIT_BUTTON)
+        sleep(2)
+        self.participant_page.do_click(Participant_page.COSTEWARD_TAB)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,300);")
+        sleep(2)
+        print("Done")
+
+        if self.driver.current_url == "https://datahubethstage.farmstack.co/datahub/participants":
+            allure.attach(self.driver.get_screenshot_as_png(), name="Successfully Costeward is added by admin",
+                          attachment_type=AttachmentType.PNG)
+            assert True, "Costeward is successfully added by admin"
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="Failed to add Costeward by admin",
+                          attachment_type=AttachmentType.PNG)
+            assert False, "Failed to add Costeward by admin"
+
+        self.participant_page.do_click(Participant_page.SIGN_OUT_BUTTON)
+        print("Completed")
+
+    @allure.description("Testing Selecting Costeward while participant registration tab")
+    @allure.severity(allure.severity_level.CRITICAL)
+    def test_Selecting_Costeward_while_participant_registration(self):
+        self.loginpage = Loginpage(self.driver)
+        sleep(3)
+        self.driver.execute_script("window.localStorage.clear();")
+        sleep(3)
+        self.driver.execute_script("window.location.reload(true);")
+        sleep(2)
+        self.driver.maximize_window()
+        self.loginpage.do_click(Loginpage.REGISTER_TAB)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.ORGANIZATION_NAME_FIELD)
+        sleep(2)
+        self.loginpage.do_sendkeys(Loginpage.ORGANIZATION_NAME_FIELD, Testdata.ORGANIZATION_NAME)
+        sleep(1)
+        self.loginpage.do_click(Loginpage.ORGANIZATION_EMAIL_ID_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.ORGANIZATION_EMAIL_ID_FIELD, Testdata.ORGANIZATION_EMAIL_ID)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.ORGANIZATION_WEBSITE_LINK)
+        self.loginpage.do_sendkeys(Loginpage.ORGANIZATION_WEBSITE_LINK,
+                                   Testdata.ORGANIZATION_WEBSITE_LINK)
+        self.loginpage.do_click(Loginpage.ORGANIZATION_ADDRESS)
+        self.loginpage.do_sendkeys(Loginpage.ORGANIZATION_ADDRESS, Testdata.ORGANIZATION_ADDRESS)
+        self.loginpage.do_click(Loginpage.COUNTRY_DROP_DOWN)
+        sleep(1)
+        self.loginpage.do_click(Loginpage.SELECT_COUNTRY)
+        self.loginpage.do_click(Loginpage.PINCODE_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.PINCODE_FIELD, Testdata.PINCODE)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,500);")
+        sleep(2)
+        self.loginpage.do_click(Loginpage.FIRST_NAME_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.FIRST_NAME_FIELD, Testdata.FIRST_NAME)
+        self.loginpage.do_click(Loginpage.LAST_NAME_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.LAST_NAME_FIELD, Testdata.LAST_NAME)
+        self.loginpage.do_click(Loginpage.ORGANIZATION_ROOT_USER_EMAIL_ID_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.ORGANIZATION_ROOT_USER_EMAIL_ID_FIELD,
+                                   Testdata.ORGANIZATION_ROOT_USER_EMAIL_ID_2)
+        self.loginpage.do_click(Loginpage.ORGANIZATION_CONTACT_NUMBER)
+        self.loginpage.do_sendkeys(Loginpage.ORGANIZATION_CONTACT_NUMBER, Testdata.CONTACT_NUMBER)
+        sleep(3)
+        self.loginpage.do_click(Loginpage.SELECT_COSTEWARD_DROP_DOWN)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.SELECT_COSTEWARD)
+        sleep(3)
+        self.loginpage.do_click(Loginpage.SUBMIT_BUTTON)
+        sleep(5)
+        if self.driver.current_url == "https://datahubethstage.farmstack.co/home":
+            allure.attach(self.driver.get_screenshot_as_png(), name="Selecting Costeward while participant "
+                                                                    "registration is successful",
+                          attachment_type=AttachmentType.PNG)
+            assert True, "Selecting Costeward while participant registration is successful"
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="Failed to Selecting Costeward while participant "
+                                                                    "registration",
+                          attachment_type=AttachmentType.PNG)
+            assert False, "Failed to Selecting Costeward while participant registration"
+        print("Completed")
+
+    @allure.description("Testing Participant Registration tab")
+    @allure.severity(allure.severity_level.CRITICAL)
+    def test_participant_registration(self):
+        self.loginpage = Loginpage(self.driver)
+        sleep(3)
+        self.driver.execute_script("window.localStorage.clear();")
+        sleep(3)
+        self.driver.execute_script("window.location.reload(true);")
+        sleep(2)
+        self.driver.maximize_window()
+        self.loginpage.do_click(Loginpage.REGISTER_TAB)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.ORGANIZATION_NAME_FIELD)
+        sleep(2)
+        self.loginpage.do_sendkeys(Loginpage.ORGANIZATION_NAME_FIELD, Testdata.ORGANIZATION_NAME)
+        sleep(1)
+        self.loginpage.do_click(Loginpage.ORGANIZATION_EMAIL_ID_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.ORGANIZATION_EMAIL_ID_FIELD, Testdata.ORGANIZATION_EMAIL_ID)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.ORGANIZATION_WEBSITE_LINK)
+        self.loginpage.do_sendkeys(Loginpage.ORGANIZATION_WEBSITE_LINK,
+                                   Testdata.ORGANIZATION_WEBSITE_LINK)
+        self.loginpage.do_click(Loginpage.ORGANIZATION_ADDRESS)
+        self.loginpage.do_sendkeys(Loginpage.ORGANIZATION_ADDRESS, Testdata.ORGANIZATION_ADDRESS)
+        self.loginpage.do_click(Loginpage.COUNTRY_DROP_DOWN)
+        sleep(1)
+        self.loginpage.do_click(Loginpage.SELECT_COUNTRY)
+        self.loginpage.do_click(Loginpage.PINCODE_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.PINCODE_FIELD, Testdata.PINCODE)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,500);")
+        sleep(2)
+        self.loginpage.do_click(Loginpage.FIRST_NAME_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.FIRST_NAME_FIELD, Testdata.FIRST_NAME)
+        self.loginpage.do_click(Loginpage.LAST_NAME_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.LAST_NAME_FIELD, Testdata.LAST_NAME)
+        self.loginpage.do_click(Loginpage.ORGANIZATION_ROOT_USER_EMAIL_ID_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.ORGANIZATION_ROOT_USER_EMAIL_ID_FIELD,
+                                   Testdata.ORGANIZATION_ROOT_USER_EMAIL_ID_2)
+        self.loginpage.do_click(Loginpage.ORGANIZATION_CONTACT_NUMBER)
+        self.loginpage.do_sendkeys(Loginpage.ORGANIZATION_CONTACT_NUMBER, Testdata.CONTACT_NUMBER)
+        sleep(3)
+        self.loginpage.do_click(Loginpage.SUBMIT_BUTTON)
+        sleep(2)
+
+        if self.driver.current_url == "https://datahubethstage.farmstack.co/home":
+            allure.attach(self.driver.get_screenshot_as_png(), name="Successfully Participant is registered",
+                          attachment_type=AttachmentType.PNG)
+            assert True, "Participant is successfully registered"
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="Failed to registered Participant",
+                          attachment_type=AttachmentType.PNG)
+            assert False, "Failed to registered Participant"
+        print("Completed")
+
+    @allure.description("Testing cancel button")
+    @allure.severity(allure.severity_level.NORMAL)
+    def test_Cancel_button(self):
+        self.loginpage = Loginpage(self.driver)
+        sleep(3)
+        self.driver.execute_script("window.localStorage.clear();")
+        sleep(3)
+        self.driver.execute_script("window.location.reload(true);")
+        sleep(2)
+        self.driver.maximize_window()
+        self.loginpage.do_click(Loginpage.REGISTER_TAB)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,700);")
+        sleep(2)
+        self.loginpage.do_click(Loginpage.CANCEL_BUTTON)
+        sleep(2)
+        if self.driver.current_url == "https://datahubethstage.farmstack.co/home":
+            allure.attach(self.driver.get_screenshot_as_png(), name="Cancel button is visible",
+                          attachment_type=AttachmentType.PNG)
+            assert True, "Cancel button is visible"
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="Cancel button is invisible",
+                          attachment_type=AttachmentType.PNG)
+            assert False, "Cancel button is invisible"
+
+    @allure.description("Testing Approving participant request by admin")
+    @allure.severity(allure.severity_level.CRITICAL)
+    def test_Approving_Participant_Request_Button(self):
+        self.loginpage = Loginpage(self.driver)
+        sleep(3)
+        self.driver.execute_script("window.localStorage.clear();")
+        sleep(3)
+        self.driver.execute_script("window.location.reload(true);")
+        sleep(2)
+        self.driver.maximize_window()
+        self.loginpage.do_click(Loginpage.LOGIN_AS_ADMIN_BUTTON)
+        self.loginpage.do_click(Loginpage.USERNAME_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.USERNAME_FIELD, Testdata.USER_NAME)
+        self.loginpage.do_click(Loginpage.SEND_OTP_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.ENTER_OTP)
+        self.loginpage.do_sendkeys(Loginpage.ENTER_OTP, Testdata.OTP)
+        self.loginpage.do_click(Loginpage.VERIFY_OTP_BUTTON)
+        sleep(2)
+        self.participant_page = Participant_page(self.driver)
+        self.driver.maximize_window()
+        self.participant_page.do_click(Participant_page.PARTICIPANTS_BUTTON)
+        sleep(2)
+        self.participant_page.do_click(Participant_page.NEW_PARTICIPANT_REQUEST)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,300);")
+        sleep(2)
+        self.participant_page.do_click(Participant_page.PARTICIPANT_REQUEST)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,800);")
+        sleep(2)
+        self.participant_page.do_click(Participant_page.APPROVE_BUTTON)
+        sleep(2)
+
+        if self.driver.current_url == "https://datahubethstage.farmstack.co/datahub/participants":
+            allure.attach(self.driver.get_screenshot_as_png(), name="Successfully Participant request is approved by "
+                                                                    "admin",
+                          attachment_type=AttachmentType.PNG)
+            assert True, "Successfully Participant request is approved by admin"
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="Failed to approve Participant request by admin",
+                          attachment_type=AttachmentType.PNG)
+            assert False, "Failed to approve participant request by admin"
+
+        self.participant_page.do_click(Participant_page.SIGN_OUT_BUTTON)
+        print("Completed")
+
+    @allure.description("Testing Rejecting participant request by admin")
+    @allure.severity(allure.severity_level.CRITICAL)
+    def test_Rejecting_Participant_Request_Button(self):
+        self.loginpage = Loginpage(self.driver)
+        sleep(3)
+        self.driver.execute_script("window.localStorage.clear();")
+        sleep(3)
+        self.driver.execute_script("window.location.reload(true);")
+        sleep(2)
+        self.driver.maximize_window()
+        self.loginpage.do_click(Loginpage.LOGIN_AS_ADMIN_BUTTON)
+        self.loginpage.do_click(Loginpage.USERNAME_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.USERNAME_FIELD, Testdata.USER_NAME)
+        self.loginpage.do_click(Loginpage.SEND_OTP_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.ENTER_OTP)
+        self.loginpage.do_sendkeys(Loginpage.ENTER_OTP, Testdata.OTP)
+        self.loginpage.do_click(Loginpage.VERIFY_OTP_BUTTON)
+        sleep(2)
+        self.participant_page = Participant_page(self.driver)
+        self.driver.maximize_window()
+        self.participant_page.do_click(Participant_page.PARTICIPANTS_BUTTON)
+        sleep(2)
+        self.participant_page.do_click(Participant_page.NEW_PARTICIPANT_REQUEST)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,300);")
+        sleep(2)
+        self.participant_page.do_click(Participant_page.PARTICIPANT_REQUEST)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,800);")
+        sleep(2)
+        self.participant_page.do_click(Participant_page.REJECT_BUTTON)
+        sleep(2)
+
+        if self.driver.current_url == "https://datahubethstage.farmstack.co/datahub/participants":
+            allure.attach(self.driver.get_screenshot_as_png(), name="Successfully Participant request is rejected by "
+                                                                    "admin",
+                          attachment_type=AttachmentType.PNG)
+            assert True, "Successfully Participant request is rejected by admin"
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="Failed to rejected Participant request by admin",
+                          attachment_type=AttachmentType.PNG)
+            assert False, "Failed to rejected participant request by admin"
+
+        self.participant_page.do_click(Participant_page.SIGN_OUT_BUTTON)
+        print("Completed")
+
+    @allure.description("Testing Back button in New participant request")
+    @allure.severity(allure.severity_level.CRITICAL)
+    def test_Back_Button_in_New_Participant_Request(self):
+        self.loginpage = Loginpage(self.driver)
+        sleep(3)
+        self.driver.execute_script("window.localStorage.clear();")
+        sleep(3)
+        self.driver.execute_script("window.location.reload(true);")
+        sleep(2)
+        self.driver.maximize_window()
+        self.loginpage.do_click(Loginpage.LOGIN_AS_ADMIN_BUTTON)
+        self.loginpage.do_click(Loginpage.USERNAME_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.USERNAME_FIELD, Testdata.USER_NAME)
+        self.loginpage.do_click(Loginpage.SEND_OTP_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.ENTER_OTP)
+        self.loginpage.do_sendkeys(Loginpage.ENTER_OTP, Testdata.OTP)
+        self.loginpage.do_click(Loginpage.VERIFY_OTP_BUTTON)
+        sleep(2)
+        self.participant_page = Participant_page(self.driver)
+        self.driver.maximize_window()
+        self.participant_page.do_click(Participant_page.PARTICIPANTS_BUTTON)
+        sleep(2)
+        self.participant_page.do_click(Participant_page.NEW_PARTICIPANT_REQUEST)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,300);")
+        sleep(2)
+        self.participant_page.do_click(Participant_page.PARTICIPANT_REQUEST)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,800);")
+        sleep(2)
+        self.participant_page.do_click(Participant_page.BACK_BUTTON)
+        sleep(2)
+
+        if self.driver.current_url == "https://datahubethstage.farmstack.co/datahub/participants":
+            allure.attach(self.driver.get_screenshot_as_png(), name="Back button is visible",
+                          attachment_type=AttachmentType.PNG)
+            assert True, "Back button is visible"
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="Back button is invisible",
+                          attachment_type=AttachmentType.PNG)
+            assert False, "Back button is invisible"
+
+        self.participant_page.do_click(Participant_page.SIGN_OUT_BUTTON)
+        print("Completed")
+
+    @allure.description("Testing Participant load more button")
+    @allure.severity(allure.severity_level.CRITICAL)
+    def test_Participant_tab(self):
+        self.loginpage = Loginpage(self.driver)
+        sleep(3)
+        self.driver.execute_script("window.localStorage.clear();")
+        sleep(3)
+        self.driver.execute_script("window.location.reload(true);")
+        sleep(2)
+        self.driver.maximize_window()
+        self.loginpage.do_click(Loginpage.LOGIN_AS_ADMIN_BUTTON)
+        self.loginpage.do_click(Loginpage.USERNAME_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.USERNAME_FIELD, Testdata.USER_NAME)
+        self.loginpage.do_click(Loginpage.SEND_OTP_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.ENTER_OTP)
+        self.loginpage.do_sendkeys(Loginpage.ENTER_OTP, Testdata.OTP)
+        self.loginpage.do_click(Loginpage.VERIFY_OTP_BUTTON)
+        sleep(2)
+        self.participant_page = Participant_page(self.driver)
+        self.driver.maximize_window()
+        self.participant_page.do_click(Participant_page.PARTICIPANTS_BUTTON)
+        sleep(2)
+        self.participant_page.do_click(Participant_page.PARTICIPANT_BUTTON)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,800);")
+        sleep(3)
+        self.participant_page.do_click(Participant_page.PARTICIPANT_LOAD_MORE)
+        sleep(2)
+
+        if self.driver.current_url == "https://datahubethstage.farmstack.co/datahub/participants":
+            allure.attach(self.driver.get_screenshot_as_png(), name="Participant load more button is visible",
+                          attachment_type=AttachmentType.PNG)
+            assert True, "Participant load more button is visible"
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="Participant load more button is invisible",
+                          attachment_type=AttachmentType.PNG)
+            assert False, "Participant load more button is invisible"
+
+        self.participant_page.do_click(Participant_page.SIGN_OUT_BUTTON)
+        print("Completed")
+
+    @allure.description("Testing New Participant Request load more button")
+    @allure.severity(allure.severity_level.CRITICAL)
+    def test_New_participant_request_tab(self):
+        self.loginpage = Loginpage(self.driver)
+        sleep(3)
+        self.driver.execute_script("window.localStorage.clear();")
+        sleep(3)
+        self.driver.execute_script("window.location.reload(true);")
+        sleep(2)
+        self.driver.maximize_window()
+        self.loginpage.do_click(Loginpage.LOGIN_AS_ADMIN_BUTTON)
+        self.loginpage.do_click(Loginpage.USERNAME_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.USERNAME_FIELD, Testdata.USER_NAME)
+        self.loginpage.do_click(Loginpage.SEND_OTP_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.ENTER_OTP)
+        self.loginpage.do_sendkeys(Loginpage.ENTER_OTP, Testdata.OTP)
+        self.loginpage.do_click(Loginpage.VERIFY_OTP_BUTTON)
+        sleep(2)
+        self.participant_page = Participant_page(self.driver)
+        self.driver.maximize_window()
+        self.participant_page.do_click(Participant_page.PARTICIPANTS_BUTTON)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,800);")
+        sleep(3)
+        self.participant_page.do_click_LOAD_MORE()
+        sleep(2)
+
+        if self.driver.current_url == "https://datahubethstage.farmstack.co/datahub/participants":
+            allure.attach(self.driver.get_screenshot_as_png(), name="New Participant Request Tab is visible",
+                          attachment_type=AttachmentType.PNG)
+            assert True, "New Participant Request Tab is visible"
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="New Participant Request Tab is invisible",
+                          attachment_type=AttachmentType.PNG)
+            assert False, "New Participant Request Tab is invisible"
+
+        self.participant_page.do_click(Participant_page.SIGN_OUT_BUTTON)
+        print("Completed")
+
+    @allure.description("Testing Costeward tab load more is visible")
+    @allure.severity(allure.severity_level.CRITICAL)
+    def test_Costeward_tab(self):
+        self.loginpage = Loginpage(self.driver)
+        sleep(3)
+        self.driver.execute_script("window.localStorage.clear();")
+        sleep(3)
+        self.driver.execute_script("window.location.reload(true);")
+        sleep(2)
+        self.driver.maximize_window()
+        self.loginpage.do_click(Loginpage.LOGIN_AS_ADMIN_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.USERNAME_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.USERNAME_FIELD, Testdata.USER_NAME)
+        self.loginpage.do_click(Loginpage.SEND_OTP_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.ENTER_OTP)
+        self.loginpage.do_sendkeys(Loginpage.ENTER_OTP, Testdata.OTP)
+        self.loginpage.do_click(Loginpage.VERIFY_OTP_BUTTON)
+        sleep(2)
+        self.participant_page = Participant_page(self.driver)
+        self.driver.maximize_window()
+        self.participant_page.do_click(Participant_page.PARTICIPANTS_BUTTON)
+        sleep(2)
+        self.participant_page.do_click(Participant_page.COSTEWARD_TAB)
+        sleep(3)
+        self.driver.execute_script("window.scrollBy(0,800);")
+        sleep(2)
+        self.participant_page.do_click(Participant_page.COSTEWARD_LOAD_MORE_BUTTON)
+        sleep(3)
+        self.driver.execute_script("window.scrollBy(0,-800);")
+        sleep(3)
+
+        if self.driver.current_url == "https://datahubethstage.farmstack.co/datahub/participants":
+            allure.attach(self.driver.get_screenshot_as_png(), name="Costeward load more button is visible",
+                          attachment_type=AttachmentType.PNG)
+            assert True, "Costeward load more button is visible"
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="Costeward load more button is invisible",
+                          attachment_type=AttachmentType.PNG)
+            assert False, "Costeward load more button is invisible"
+
+        self.participant_page.do_click(Participant_page.SIGN_OUT_BUTTON)
+        print("Completed")
+
+    @allure.description("Testing Costeward list view is visible")
+    @allure.severity(allure.severity_level.CRITICAL)
+    def test_Costeward_List_View(self):
+        self.loginpage = Loginpage(self.driver)
+        sleep(3)
+        self.driver.execute_script("window.localStorage.clear();")
+        sleep(3)
+        self.driver.execute_script("window.location.reload(true);")
+        sleep(2)
+        self.driver.maximize_window()
+        self.loginpage.do_click(Loginpage.LOGIN_AS_ADMIN_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.USERNAME_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.USERNAME_FIELD, Testdata.USER_NAME)
+        self.loginpage.do_click(Loginpage.SEND_OTP_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.ENTER_OTP)
+        self.loginpage.do_sendkeys(Loginpage.ENTER_OTP, Testdata.OTP)
+        self.loginpage.do_click(Loginpage.VERIFY_OTP_BUTTON)
+        sleep(2)
+        self.participant_page = Participant_page(self.driver)
+        self.driver.maximize_window()
+        self.participant_page.do_click(Participant_page.PARTICIPANTS_BUTTON)
+        sleep(2)
+        self.participant_page.do_click(Participant_page.COSTEWARD_TAB)
+        sleep(3)
+        self.participant_page.do_click(Participant_page.COSTEWARD_LIST_VIEW_BUTTON)
+        sleep(3)
+
+        if self.driver.current_url == "https://datahubethstage.farmstack.co/datahub/participants":
+            allure.attach(self.driver.get_screenshot_as_png(), name="Costeward list view is visible",
+                          attachment_type=AttachmentType.PNG)
+            assert True, "Costeward list view is visible"
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="Costeward list view is invisible",
+                          attachment_type=AttachmentType.PNG)
+            assert False, "Costeward list view is invisible"
+
+        self.participant_page.do_click(Participant_page.SIGN_OUT_BUTTON)
+        print("Completed")
+
+    @allure.description("Testing participant list view is visible")
+    @allure.severity(allure.severity_level.CRITICAL)
+    def test_Participant_List_View(self):
+        self.loginpage = Loginpage(self.driver)
+        sleep(3)
+        self.driver.execute_script("window.localStorage.clear();")
+        sleep(3)
+        self.driver.execute_script("window.location.reload(true);")
+        sleep(2)
+        self.driver.maximize_window()
+        self.loginpage.do_click(Loginpage.LOGIN_AS_ADMIN_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.USERNAME_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.USERNAME_FIELD, Testdata.USER_NAME)
+        self.loginpage.do_click(Loginpage.SEND_OTP_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.ENTER_OTP)
+        self.loginpage.do_sendkeys(Loginpage.ENTER_OTP, Testdata.OTP)
+        self.loginpage.do_click(Loginpage.VERIFY_OTP_BUTTON)
+        sleep(2)
+        self.participant_page = Participant_page(self.driver)
+        self.driver.maximize_window()
+        self.participant_page.do_click(Participant_page.PARTICIPANTS_BUTTON)
+        sleep(2)
+        self.participant_page.do_click(Participant_page.PARTICIPANT_BUTTON)
+        sleep(3)
+        self.participant_page.do_click(Participant_page.PARTICIPATE_LIST_VIEW_BUTTON)
+        sleep(3)
+        self.driver.execute_script("window.scrollBy(0,300);")
+        sleep(2)
+
+        if self.driver.current_url == "https://datahubethstage.farmstack.co/datahub/participants":
+            allure.attach(self.driver.get_screenshot_as_png(), name="Participant list view is visible",
+                          attachment_type=AttachmentType.PNG)
+            assert True, "Participant list view is visible"
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="Participant list view is invisible",
+                          attachment_type=AttachmentType.PNG)
+            assert False, "Participant list view is invisible"
+
+        self.participant_page.do_click(Participant_page.SIGN_OUT_BUTTON)
+        print("Completed")
+
+    @allure.description("Testing New participant request list view is visible")
+    @allure.severity(allure.severity_level.CRITICAL)
+    def test_New_Participant_Request_List_View(self):
+        self.loginpage = Loginpage(self.driver)
+        sleep(3)
+        self.driver.execute_script("window.localStorage.clear();")
+        sleep(3)
+        self.driver.execute_script("window.location.reload(true);")
+        sleep(2)
+        self.driver.maximize_window()
+        self.loginpage.do_click(Loginpage.LOGIN_AS_ADMIN_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.USERNAME_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.USERNAME_FIELD, Testdata.USER_NAME)
+        self.loginpage.do_click(Loginpage.SEND_OTP_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.ENTER_OTP)
+        self.loginpage.do_sendkeys(Loginpage.ENTER_OTP, Testdata.OTP)
+        self.loginpage.do_click(Loginpage.VERIFY_OTP_BUTTON)
+        sleep(2)
+        self.participant_page = Participant_page(self.driver)
+        self.driver.maximize_window()
+        self.participant_page.do_click(Participant_page.PARTICIPANTS_BUTTON)
+        sleep(2)
+        self.participant_page.do_click(Participant_page.NEW_PARTICIPANT_REQUEST)
+        sleep(3)
+        self.participant_page.do_click(Participant_page.NEW_PARTICIPANT_REQUEST_LIST_VIEW_BUTTON)
+        sleep(3)
+        self.driver.execute_script("window.scrollBy(0,200);")
+        sleep(3)
+
+        if self.driver.current_url == "https://datahubethstage.farmstack.co/datahub/participants":
+            allure.attach(self.driver.get_screenshot_as_png(), name="New participant request list view is visible",
+                          attachment_type=AttachmentType.PNG)
+            assert True, "New participant request list view is visible"
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="New participant request list view is invisible",
+                          attachment_type=AttachmentType.PNG)
+            assert False, "New participant request list view is invisible"
+
+        self.participant_page.do_click(Participant_page.SIGN_OUT_BUTTON)
+        print("Completed")
+
+    @allure.description("Testing Inviting participant is successful")
+    @allure.severity(allure.severity_level.CRITICAL)
+    def test_Invite_Participant(self):
+        self.loginpage = Loginpage(self.driver)
+        sleep(3)
+        self.driver.execute_script("window.localStorage.clear();")
+        sleep(3)
+        self.driver.execute_script("window.location.reload(true);")
+        sleep(2)
+        self.driver.maximize_window()
+        self.loginpage.do_click(Loginpage.LOGIN_AS_ADMIN_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.USERNAME_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.USERNAME_FIELD, Testdata.USER_NAME)
+        self.loginpage.do_click(Loginpage.SEND_OTP_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.ENTER_OTP)
+        self.loginpage.do_sendkeys(Loginpage.ENTER_OTP, Testdata.OTP)
+        self.loginpage.do_click(Loginpage.VERIFY_OTP_BUTTON)
+        sleep(2)
+        self.participant_page = Participant_page(self.driver)
+        self.driver.maximize_window()
+        self.participant_page.do_click(Participant_page.PARTICIPANTS_BUTTON)
+        sleep(2)
+        self.participant_page.do_click(Participant_page.PARTICIPANT_BUTTON)
+        sleep(3)
+        self.participant_page.do_click(Participant_page.INVITE_PARTICIPANT_BUTTON)
+        sleep(3)
+        self.participant_page.do_click(Participant_page.INVITE_PARTICIPANT_EMAIL_FIELD)
+        sleep(2)
+        self.participant_page.do_sendkeys(Participant_page.INVITE_PARTICIPANT_EMAIL_FIELD,
+                                          Testdata.INVITE_PARTICIPANT_EMAIL_ID)
+        sleep(2)
+        self.participant_page.do_enter(Participant_page.INVITE_PARTICIPANT_EMAIL_FIELD)
+        sleep(2)
+        self.participant_page.do_click(Participant_page.ADD_INVITE_NOTE)
+        self.participant_page.do_sendkeys(Participant_page.ADD_INVITE_NOTE, Testdata.ADD_INVITE_NOTE_TEXT)
+        sleep(3)
+        self.driver.execute_script("window.scrollBy(0,300);")
+        sleep(2)
+        self.participant_page.do_click(Participant_page.INVITE_SUBMIT_BUTTON)
+        sleep(3)
+
+        if self.driver.current_url == "https://datahubethstage.farmstack.co/datahub/participants/invite":
+            allure.attach(self.driver.get_screenshot_as_png(), name="Invite sent successfully",
+                          attachment_type=AttachmentType.PNG)
+            assert True, "Invite sent successfully"
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="Failed to sent invite",
+                          attachment_type=AttachmentType.PNG)
+            assert False, "Failed to sent invite"
+
+        self.participant_page.do_click(Participant_page.SIGN_OUT_BUTTON)
+        print("Completed")
+
+    @allure.description("Testing Cancel participant invitation")
+    @allure.severity(allure.severity_level.CRITICAL)
+    def test_Cancel_Participant_Invite(self):
+        self.loginpage = Loginpage(self.driver)
+        sleep(3)
+        self.driver.execute_script("window.localStorage.clear();")
+        sleep(3)
+        self.driver.execute_script("window.location.reload(true);")
+        sleep(2)
+        self.driver.maximize_window()
+        self.loginpage.do_click(Loginpage.LOGIN_AS_ADMIN_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.USERNAME_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.USERNAME_FIELD, Testdata.USER_NAME)
+        self.loginpage.do_click(Loginpage.SEND_OTP_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.ENTER_OTP)
+        self.loginpage.do_sendkeys(Loginpage.ENTER_OTP, Testdata.OTP)
+        self.loginpage.do_click(Loginpage.VERIFY_OTP_BUTTON)
+        sleep(2)
+        self.participant_page = Participant_page(self.driver)
+        self.driver.maximize_window()
+        self.participant_page.do_click(Participant_page.PARTICIPANTS_BUTTON)
+        sleep(2)
+        self.participant_page.do_click(Participant_page.PARTICIPANT_BUTTON)
+        sleep(3)
+        self.participant_page.do_click(Participant_page.INVITE_PARTICIPANT_BUTTON)
+        sleep(3)
+        self.participant_page.do_click(Participant_page.INVITE_PARTICIPANT_EMAIL_FIELD)
+        sleep(2)
+        self.participant_page.do_sendkeys(Participant_page.INVITE_PARTICIPANT_EMAIL_FIELD,
+                                          Testdata.INVITE_PARTICIPANT_EMAIL_ID)
+        sleep(2)
+        self.participant_page.do_enter(Participant_page.INVITE_PARTICIPANT_EMAIL_FIELD)
+        sleep(2)
+        self.participant_page.do_click(Participant_page.ADD_INVITE_NOTE)
+        self.participant_page.do_sendkeys(Participant_page.ADD_INVITE_NOTE, Testdata.ADD_INVITE_NOTE_TEXT)
+        sleep(3)
+        self.driver.execute_script("window.scrollBy(0,300);")
+        sleep(2)
+        self.participant_page.do_click(Participant_page.INVITE_CANCEL_BUTTON)
+        sleep(3)
+
+        if self.driver.current_url == "https://datahubethstage.farmstack.co/datahub/participants":
+            allure.attach(self.driver.get_screenshot_as_png(), name="Cancel participant invitation is visible",
+                          attachment_type=AttachmentType.PNG)
+            assert True, "Cancel participant invitation is visible"
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="Cancel participant invitation is invisible",
+                          attachment_type=AttachmentType.PNG)
+            assert False, "Cancel participant invitation is invisible"
+
+        self.participant_page.do_click(Participant_page.SIGN_OUT_BUTTON)
+        print("Completed")
Index: Testcases/test_datasetpage.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Testcases/test_datasetpage.py b/Testcases/test_datasetpage.py
new file mode 100644
--- /dev/null	(date 1690897073212)
+++ b/Testcases/test_datasetpage.py	(date 1690897073212)
@@ -0,0 +1,1244 @@
+from time import sleep
+from selenium.webdriver.support.ui import WebDriverWait
+from selenium.webdriver.support import expected_conditions as EC
+from Pageobjects.Homepage import Homepage
+from Pageobjects.Loginpage import Loginpage
+from Pageobjects.Datasetpage import Datasetspage
+from Testcases.test_base import Basetest
+from Configurations.config import Testdata
+from Testcases.confitest import init_driver
+import allure
+import allure_pytest
+from selenium.webdriver.common.by import By
+from allure_commons.types import AttachmentType
+
+
+class Test_datasetpage(Basetest):
+
+    @allure.description("Testing Adding Dataset")
+    @allure.severity(allure.severity_level.CRITICAL)
+    def test_add_dataset(self):
+        self.loginpage = Loginpage(self.driver)
+        sleep(3)
+        self.driver.execute_script("window.localStorage.clear();")
+        sleep(3)
+        self.driver.execute_script("window.location.reload(true);")
+        sleep(2)
+        self.driver.maximize_window()
+        sleep(2)
+        self.loginpage.do_click(Loginpage.LOGIN_AS_ADMIN_BUTTON)
+        self.loginpage.do_click(Loginpage.USERNAME_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.USERNAME_FIELD, Testdata.USER_NAME)
+        self.loginpage.do_click(Loginpage.SEND_OTP_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.ENTER_OTP)
+        self.loginpage.do_sendkeys(Loginpage.ENTER_OTP, Testdata.OTP)
+        self.loginpage.do_click(Loginpage.VERIFY_OTP_BUTTON)
+        sleep(2)
+        self.datasets_page = Datasetspage(self.driver)
+        sleep(2)
+        self.loginpage.do_click(Datasetspage.DATASET_TAB)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,500);")
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.ADD_NEW_DATASET)
+        sleep(2)
+        # self.driver.execute_script("window.scrollBy(0,-400);")
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.ADD_DATASET_NAME_FIELD)
+        self.datasets_page.do_sendkeys(Datasetspage.ADD_DATASET_NAME_FIELD, Testdata.CONNECTOR_NAME)
+        self.datasets_page.do_click(Datasetspage.Add_DATASET_DESCRIPTION_FIELD)
+        self.datasets_page.do_sendkeys(Datasetspage.Add_DATASET_DESCRIPTION_FIELD, Testdata.CONNECTOR_DESCRIPTION)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,400);")
+        sleep(2)
+        self.datasets_page.do_click_constanly_updating_checkbox()
+        self.datasets_page.do_click(Datasetspage.NEXT_BUTTON)
+        sleep(5)
+        self.driver.execute_script("window.scrollBy(0,500);")
+        sleep(5)
+        self.datasets_page.do_sendkeys_1()
+        sleep(3)
+        self.datasets_page.do_click(Datasetspage.DELETE_BUTTON)
+        sleep(3)
+        self.datasets_page.do_sendkeys_1()
+        sleep(3)
+        self.datasets_page.do_click(Datasetspage.UPLOAD_FILE)
+        sleep(3)
+        # self.driver.execute_script("window.scrollBy(0,500);")
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.NEXT_BUTTON)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.FILE_STANDARIZE_FIELD)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.FILE_FOR_STANDARIZATION)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,400);")
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.SELECT_DATAPOINT_ATTRIBUTE_STD)
+        # sleep(2)
+        self.datasets_page.do_click(Datasetspage.DATAPOINT_CATEGORY)
+        # sleep(2)
+        self.datasets_page.do_click(Datasetspage.CLEAR_DATAPOINT_ATTRIBUTE)
+        # sleep(2)
+        self.datasets_page.do_click(Datasetspage.SELECT_DATAPOINT_ATTRIBUTE_STD)
+        # sleep(2)
+        self.datasets_page.do_click(Datasetspage.DATAPOINT_CATEGORY)
+        # sleep(2)
+        self.datasets_page.do_click(Datasetspage.DATAPOINT_ATTRIBUTE_FIELD)
+        # sleep(2)
+        self.datasets_page.do_click(Datasetspage.DATAPOINT_ATTRIBUTE)
+        # sleep(2)
+        self.datasets_page.do_clickable_mask()
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,2200);")
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.APPLY_BUTTON)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.NEXT_BUTTON)
+        self.driver.execute_script("window.scrollBy(0,-300);")
+        self.datasets_page.do_click(Datasetspage.CATEGORY_ACCORDION)
+        self.datasets_page.do_clickable_CATEGORY()
+        self.driver.execute_script("window.scrollBy(0,600);")
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.SELECT_GREOGRAPHY_FIELD)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.SELECT_COUNTRY)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.SELECT_STATE_FIELD)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.SELECT_STATE)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.SELECT_CITY_FIELD)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.SELECT_CITY)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,300);")
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.NEXT_BUTTON)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,-300);")
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.UPLOAD_POLICY_FIELD)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.UPLOAD_POLICY_FILE)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,600);")
+        sleep(2)
+        self.datasets_page.do_clickable_REGISTER_USER()
+        sleep(2)
+        # self.driver.execute_script("window.scrollBy(0,400);")
+        # sleep(2)
+        self.datasets_page.do_click(Datasetspage.APPLY_BUTTON_STD)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.SUBMIT_BUTTON)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,500);")
+        sleep(2)
+
+        if self.driver.current_url == "https://datahubethstage.farmstack.co/datahub/new_datasets":
+            allure.attach(self.driver.get_screenshot_as_png(), name="Successfully Dataset is added",
+                          attachment_type=AttachmentType.PNG)
+            assert True, "Successfully Dataset is added"
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="Failed to add Dataset",
+                          attachment_type=AttachmentType.PNG)
+            assert False, "Failed to add Dataset"
+        self.datasets_page.do_click(Datasetspage.SIGN_OUT_BUTTON)
+        print("Completed Test Case")
+
+    @allure.description("Testing Adding Dataset from MySQL")
+    @allure.severity(allure.severity_level.CRITICAL)
+    def test_adding_dataset_MySQL(self):
+        self.loginpage = Loginpage(self.driver)
+        sleep(3)
+        self.driver.execute_script("window.localStorage.clear();")
+        sleep(3)
+        self.driver.execute_script("window.location.reload(true);")
+        sleep(2)
+        self.driver.maximize_window()
+        self.loginpage.do_click(Loginpage.LOGIN_AS_ADMIN_BUTTON)
+        self.loginpage.do_click(Loginpage.USERNAME_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.USERNAME_FIELD, Testdata.USER_NAME)
+        self.loginpage.do_click(Loginpage.SEND_OTP_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.ENTER_OTP)
+        self.loginpage.do_sendkeys(Loginpage.ENTER_OTP, Testdata.OTP)
+        self.loginpage.do_click(Loginpage.VERIFY_OTP_BUTTON)
+        sleep(2)
+        self.datasets_page = Datasetspage(self.driver)
+        sleep(2)
+        self.loginpage.do_click(Datasetspage.DATASET_TAB)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,500);")
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.ADD_NEW_DATASET)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.ADD_DATASET_NAME_FIELD)
+        sleep(2)
+        self.datasets_page.do_sendkeys(Datasetspage.ADD_DATASET_NAME_FIELD, Testdata.DATASET_NAME_MYSQL)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.Add_DATASET_DESCRIPTION_FIELD)
+        self.datasets_page.do_sendkeys(Datasetspage.Add_DATASET_DESCRIPTION_FIELD, Testdata.DATASET_DESCRIPTION_MYSQL)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,400);")
+        sleep(2)
+        self.datasets_page.do_click_constanly_updating_checkbox()
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.NEXT_BUTTON)
+        sleep(3)
+        self.driver.execute_script("window.scrollBy(0,500);")
+        sleep(3)
+        self.datasets_page.do_click(Datasetspage.MySQL_TAB)
+        sleep(2)
+        self.datasets_page.do_click_DATABASE_NAME_FIELD()
+        self.datasets_page.do_sendkeys_DATABASE_NAME_FIELD()
+        sleep(2)
+        self.datasets_page.do_click_USER_NAME_MYSQL_FIELD()
+        self.datasets_page.do_sendkeys_USER_NAME_MYSQL_FIELD()
+        sleep(2)
+        self.datasets_page.do_click_PASSWORD_MYSQL_FIELD()
+        self.datasets_page.do_sendkeys_PASSWORD_MYSQL_FIELD()
+        sleep(2)
+        self.datasets_page.do_click_DATABASE_HOST_URL_MySQL_FIELD()
+        self.datasets_page.do_sendkeys_DATABASE_HOST_URL_MySQL_FIELD()
+        sleep(2)
+        self.datasets_page.do_click_MYSQL_PORT_FIELD()
+        self.datasets_page.do_sendkeys_MYSQL_PORT_FIELD()
+        sleep(2)
+        self.datasets_page.do_click_MYSQL_CONNECT_BUTTON()
+        sleep(3)
+        self.datasets_page.do_click_SELECT_TABLE_MYSQL_FIELD()
+        sleep(2)
+        self.datasets_page.do_click_SELECT_TABLE_MYSQL()
+        sleep(3)
+        self.datasets_page.do_clickable_MYSQL_COLUMN_CHECKBOX()
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,400);")
+        sleep(2)
+        self.datasets_page.do_click_FILE_NAME_MYSQL_IMPORT_DATA_FIELD()
+        self.datasets_page.do_sendkeys_FILE_NAME_MYSQL_IMPORT_DATA_FIELD()
+        sleep(2)
+        self.datasets_page.do_click_IMPORT_BUTTON_MYSQL()
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,300);")
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.NEXT_BUTTON)
+        sleep(3)
+        self.driver.execute_script("window.scrollBy(0,-300);")
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.FILE_STANDARIZE_FIELD)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.FILE_FOR_STANDARIZATION)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,400);")
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.SELECT_DATAPOINT_ATTRIBUTE_STD)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.DATAPOINT_CATEGORY)
+        # sleep(2)
+        self.datasets_page.do_click(Datasetspage.CLEAR_DATAPOINT_ATTRIBUTE)
+        # sleep(2)
+        self.datasets_page.do_click(Datasetspage.SELECT_DATAPOINT_ATTRIBUTE_STD)
+        # sleep(2)
+        self.datasets_page.do_click(Datasetspage.DATAPOINT_CATEGORY)
+        # sleep(2)
+        self.datasets_page.do_click(Datasetspage.DATAPOINT_ATTRIBUTE_FIELD)
+        # sleep(2)
+        self.datasets_page.do_click(Datasetspage.DATAPOINT_ATTRIBUTE)
+        # sleep(2)
+        self.datasets_page.do_clickable_mask()
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,700);")
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.APPLY_BUTTON)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.NEXT_BUTTON)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,-300);")
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.CATEGORY_ACCORDION)
+        sleep(2)
+        self.datasets_page.do_clickable_CATEGORY()
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,600);")
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.SELECT_GREOGRAPHY_FIELD)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.SELECT_COUNTRY)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.SELECT_STATE_FIELD)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.SELECT_STATE)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.SELECT_CITY_FIELD)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.SELECT_CITY)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,300);")
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.NEXT_BUTTON)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,-300);")
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.UPLOAD_POLICY_FIELD)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.UPLOAD_POLICY_FILE)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,600);")
+        sleep(2)
+        self.datasets_page.do_clickable_REGISTER_USER()
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.APPLY_BUTTON_STD)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.SUBMIT_BUTTON)
+        sleep(3)
+        self.driver.execute_script("window.scrollBy(0,300);")
+        sleep(2)
+
+        if self.driver.current_url == "https://datahubethstage.farmstack.co/datahub/new_datasets":
+            allure.attach(self.driver.get_screenshot_as_png(), name="Successfully Dataset is added",
+                          attachment_type=AttachmentType.PNG)
+            assert True, "Successfully Dataset is added"
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="Failed to add Dataset",
+                          attachment_type=AttachmentType.PNG)
+            assert False, "Failed to add Dataset"
+        self.datasets_page.do_click(Datasetspage.SIGN_OUT_BUTTON)
+        print("Completed")
+
+    @allure.description("Testing Adding Dataset from Postgres")
+    @allure.severity(allure.severity_level.CRITICAL)
+    def test_adding_dataset_POSTGRES(self):
+        self.loginpage = Loginpage(self.driver)
+        sleep(3)
+        self.driver.execute_script("window.localStorage.clear();")
+        sleep(3)
+        self.driver.execute_script("window.location.reload(true);")
+        sleep(2)
+        self.driver.maximize_window()
+        self.loginpage.do_click(Loginpage.LOGIN_AS_ADMIN_BUTTON)
+        self.loginpage.do_click(Loginpage.USERNAME_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.USERNAME_FIELD, Testdata.USER_NAME)
+        self.loginpage.do_click(Loginpage.SEND_OTP_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.ENTER_OTP)
+        self.loginpage.do_sendkeys(Loginpage.ENTER_OTP, Testdata.OTP)
+        self.loginpage.do_click(Loginpage.VERIFY_OTP_BUTTON)
+        sleep(2)
+        self.datasets_page = Datasetspage(self.driver)
+        sleep(2)
+        self.loginpage.do_click(Datasetspage.DATASET_TAB)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,500);")
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.ADD_NEW_DATASET)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.ADD_DATASET_NAME_FIELD)
+        sleep(2)
+        self.datasets_page.do_sendkeys(Datasetspage.ADD_DATASET_NAME_FIELD, Testdata.DATASET_NAME_POSTGRES)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.Add_DATASET_DESCRIPTION_FIELD)
+        self.datasets_page.do_sendkeys(Datasetspage.Add_DATASET_DESCRIPTION_FIELD,
+                                       Testdata.DATASET_DESCRIPTION_POSTGRES)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,400);")
+        sleep(2)
+        self.datasets_page.do_click_constanly_updating_checkbox()
+        self.datasets_page.do_click(Datasetspage.NEXT_BUTTON)
+        sleep(5)
+        self.driver.execute_script("window.scrollBy(0,500);")
+        sleep(5)
+        self.datasets_page.do_click(Datasetspage.POSTGRES_TAB)
+        sleep(2)
+
+        # Postgres
+
+        self.datasets_page.do_click_DATABASE_NAME_FIELD_Postgres()
+        self.datasets_page.do_sendkeys_DATABASE_NAME_FIELD_Postgres()
+        sleep(2)
+        self.datasets_page.do_click_USER_NAME_POSTGRES_FIELD()
+        self.datasets_page.do_sendkeys_USER_NAME_POSTGRES_FIELD()
+        sleep(2)
+        self.datasets_page.do_click_PASSWORD_POSTGRES_FIELD()
+        self.datasets_page.do_sendkeys_PASSWORD_POSTGRES_FIELD()
+        sleep(2)
+        self.datasets_page.do_click_DATABASE_HOST_URL_POSTGRES_FIELD()
+        self.datasets_page.do_sendkeys_DATABASE_HOST_URL_POSTGRES_FIELD()
+        sleep(2)
+        self.datasets_page.do_click_POSTGRES_PORT_FIELD()
+        self.datasets_page.do_sendkeys_POSTGRES_PORT_FIELD()
+        sleep(2)
+        self.datasets_page.do_click_POSTGRES_CONNECT_BUTTON()
+        sleep(3)
+        self.datasets_page.do_click_SELECT_TABLE_POSTGRES_FIELD()
+        sleep(2)
+        self.datasets_page.do_click_SELECT_TABLE_POSTGRES()
+        sleep(3)
+        self.datasets_page.do_clickable_POSTGRES_COLUMN_CHECKBOX()
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,400);")
+        sleep(2)
+        self.datasets_page.do_click_FILE_NAME_POSTGRES_IMPORT_DATA_FIELD()
+        self.datasets_page.do_sendkeys_FILE_NAME_POSTGRES_IMPORT_DATA_FIELD()
+        sleep(2)
+        self.datasets_page.do_click_IMPORT_BUTTON_POSTGRES()
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.NEXT_BUTTON)
+        sleep(5)
+        self.datasets_page.do_click(Datasetspage.FILE_STANDARIZE_FIELD)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.FILE_FOR_STANDARIZATION)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,400);")
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.SELECT_DATAPOINT_ATTRIBUTE_STD)
+        # sleep(2)
+        self.datasets_page.do_click(Datasetspage.DATAPOINT_CATEGORY)
+        # sleep(2)
+        self.datasets_page.do_click(Datasetspage.CLEAR_DATAPOINT_ATTRIBUTE)
+        # sleep(2)
+        self.datasets_page.do_click(Datasetspage.SELECT_DATAPOINT_ATTRIBUTE_STD)
+        # sleep(2)
+        self.datasets_page.do_click(Datasetspage.DATAPOINT_CATEGORY)
+        # sleep(2)
+        self.datasets_page.do_click(Datasetspage.DATAPOINT_ATTRIBUTE_FIELD)
+        # sleep(2)
+        self.datasets_page.do_click(Datasetspage.DATAPOINT_ATTRIBUTE)
+        # sleep(2)
+        self.datasets_page.do_clickable_mask()
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,700);")
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.APPLY_BUTTON)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,300);")
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.NEXT_BUTTON)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,-300);")
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.CATEGORY_ACCORDION)
+        sleep(2)
+        self.datasets_page.do_clickable_CATEGORY()
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,600);")
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.SELECT_GREOGRAPHY_FIELD)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.SELECT_COUNTRY)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.SELECT_STATE_FIELD)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.SELECT_STATE)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.SELECT_CITY_FIELD)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.SELECT_CITY)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,300);")
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.NEXT_BUTTON)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,-300);")
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.UPLOAD_POLICY_FIELD)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.UPLOAD_POLICY_FILE)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,600);")
+        sleep(2)
+        self.datasets_page.do_clickable_REGISTER_USER()
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.APPLY_BUTTON_STD)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.SUBMIT_BUTTON)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,500);")
+        sleep(2)
+
+        if self.driver.current_url == "https://datahubethstage.farmstack.co/datahub/new_datasets":
+            allure.attach(self.driver.get_screenshot_as_png(), name="Successfully Dataset is added",
+                          attachment_type=AttachmentType.PNG)
+            assert True, "Successfully Dataset is added"
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="Failed to add Dataset",
+                          attachment_type=AttachmentType.PNG)
+            assert False, "Failed to add Dataset"
+        self.datasets_page.do_click(Datasetspage.SIGN_OUT_BUTTON)
+        print("Completed")
+
+    @allure.description("Testing Adding Dataset from Rest_API")
+    @allure.severity(allure.severity_level.CRITICAL)
+    def test_adding_dataset_REST_API(self):
+        self.loginpage = Loginpage(self.driver)
+        sleep(3)
+        self.driver.execute_script("window.localStorage.clear();")
+        sleep(3)
+        self.driver.execute_script("window.location.reload(true);")
+        sleep(2)
+        self.driver.maximize_window()
+        self.loginpage.do_click(Loginpage.LOGIN_AS_ADMIN_BUTTON)
+        self.loginpage.do_click(Loginpage.USERNAME_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.USERNAME_FIELD, Testdata.USER_NAME)
+        self.loginpage.do_click(Loginpage.SEND_OTP_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.ENTER_OTP)
+        self.loginpage.do_sendkeys(Loginpage.ENTER_OTP, Testdata.OTP)
+        self.loginpage.do_click(Loginpage.VERIFY_OTP_BUTTON)
+        sleep(2)
+        self.datasets_page = Datasetspage(self.driver)
+        sleep(2)
+        self.loginpage.do_click(Datasetspage.DATASET_TAB)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,500);")
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.ADD_NEW_DATASET)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.ADD_DATASET_NAME_FIELD)
+        self.datasets_page.do_sendkeys(Datasetspage.ADD_DATASET_NAME_FIELD, Testdata.DATASET_NAME_REST_API)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.Add_DATASET_DESCRIPTION_FIELD)
+        self.datasets_page.do_sendkeys(Datasetspage.Add_DATASET_DESCRIPTION_FIELD,
+                                       Testdata.DATASET_DESCRIPTION_REST_API)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,400);")
+        sleep(2)
+        self.datasets_page.do_click_constanly_updating_checkbox()
+        self.datasets_page.do_click(Datasetspage.NEXT_BUTTON)
+        sleep(5)
+        self.driver.execute_script("window.scrollBy(0,500);")
+        sleep(5)
+        self.datasets_page.do_click(Datasetspage.REST_API_TAB)
+        sleep(2)
+        #
+        # NO_AUTH
+        self.datasets_page.do_click(Datasetspage.API_URL_FIELD)
+        sleep(2)
+        self.datasets_page.do_sendkeys(Datasetspage.API_URL_FIELD, Testdata.GET_API_URL_NOAUTH)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.AUTH_TYPE_FIELD)
+        self.datasets_page.do_click(Datasetspage.NO_AUTH_OPTION)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.FILE_NAME_REST_API_IMPORT_DATA_FIELD)
+        sleep(2)
+        self.datasets_page.do_sendkeys(Datasetspage.FILE_NAME_REST_API_IMPORT_DATA_FIELD, Testdata.FILE_NAME_NOAUTH)
+        self.datasets_page.do_click(Datasetspage.IMPORT_REST_API_BUTTON)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.POSTGRES_TAB)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.REST_API_TAB)
+        sleep(2)
+
+        # # API_KEY
+        #
+        self.datasets_page.do_click(Datasetspage.API_URL_FIELD)
+        self.datasets_page.do_sendkeys(Datasetspage.API_URL_FIELD, Testdata.GET_API_URL_API_KEY)
+        self.datasets_page.do_click(Datasetspage.AUTH_TYPE_FIELD)
+        self.datasets_page.do_click(Datasetspage.API_KEY_OPTION)
+        self.datasets_page.do_click(Datasetspage.API_KEY_NAME_FIELD)
+        self.datasets_page.do_sendkeys(Datasetspage.API_KEY_NAME_FIELD, Testdata.API_KEY_NAME)
+        self.datasets_page.do_click(Datasetspage.KEY_KEY_VALUE_FIELD)
+        self.datasets_page.do_sendkeys(Datasetspage.KEY_KEY_VALUE_FIELD, Testdata.API_KEY_VALUE)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.FILE_NAME_REST_API_IMPORT_DATA_FIELD)
+        self.datasets_page.do_sendkeys(Datasetspage.FILE_NAME_REST_API_IMPORT_DATA_FIELD, Testdata.FILE_NAME_API_KEY)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.IMPORT_REST_API_BUTTON)
+        sleep(10)
+        self.datasets_page.do_click(Datasetspage.POSTGRES_TAB)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.REST_API_TAB)
+        sleep(2)
+
+        # BEARER
+        self.datasets_page.do_click(Datasetspage.API_URL_FIELD)
+        self.datasets_page.do_sendkeys(Datasetspage.API_URL_FIELD, Testdata.GET_API_URL_BEARER)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.AUTH_TYPE_FIELD)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.BEARER_OPTION)
+        self.datasets_page.do_click(Datasetspage.AUTH_TOKEN_FIELD)
+        sleep(2)
+        text = self.datasets_page.get_AUTH_TOKEN()
+        self.datasets_page.do_sendkeys(Datasetspage.AUTH_TOKEN_FIELD, text.replace('"', ''))
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.FILE_NAME_REST_API_IMPORT_DATA_FIELD)
+        self.datasets_page.do_sendkeys(Datasetspage.FILE_NAME_REST_API_IMPORT_DATA_FIELD, Testdata.FILE_NAME_BEARER)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.IMPORT_REST_API_BUTTON)
+        sleep(3)
+        self.driver.execute_script("window.scrollBy(0,300);")
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.NEXT_BUTTON)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,300);")
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.NEXT_BUTTON)
+        self.driver.execute_script("window.scrollBy(0,-300);")
+        self.datasets_page.do_click(Datasetspage.CATEGORY_ACCORDION)
+        self.datasets_page.do_clickable_CATEGORY()
+        self.driver.execute_script("window.scrollBy(0,700);")
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.SELECT_GREOGRAPHY_FIELD)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.SELECT_COUNTRY)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.SELECT_STATE_FIELD)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.SELECT_STATE)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.SELECT_CITY_FIELD)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.SELECT_CITY)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,300);")
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.NEXT_BUTTON)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,-300);")
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.UPLOAD_POLICY_FIELD)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.UPLOAD_POLICY_FILE)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,600);")
+        sleep(2)
+        self.datasets_page.do_clickable_REGISTER_USER()
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.APPLY_BUTTON_STD)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.SUBMIT_BUTTON)
+        sleep(3)
+        self.driver.execute_script("window.scrollBy(0,500);")
+        sleep(2)
+
+        if self.driver.current_url == "https://datahubethstage.farmstack.co/datahub/new_datasets":
+            allure.attach(self.driver.get_screenshot_as_png(), name="Successfully Dataset is added",
+                          attachment_type=AttachmentType.PNG)
+            assert True, "Successfully Dataset is added"
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="Failed to add Dataset",
+                          attachment_type=AttachmentType.PNG)
+            assert False, "Failed to add Dataset"
+
+    @allure.description("Testing Dataset list view is visible")
+    @allure.severity(allure.severity_level.CRITICAL)
+    def test_Dataset_List_View(self):
+        self.loginpage = Loginpage(self.driver)
+        sleep(3)
+        self.driver.execute_script("window.localStorage.clear();")
+        sleep(3)
+        self.driver.execute_script("window.location.reload(true);")
+        sleep(2)
+        self.driver.maximize_window()
+        self.loginpage.do_click(Loginpage.LOGIN_AS_ADMIN_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.USERNAME_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.USERNAME_FIELD, Testdata.USER_NAME)
+        self.loginpage.do_click(Loginpage.SEND_OTP_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.ENTER_OTP)
+        self.loginpage.do_sendkeys(Loginpage.ENTER_OTP, Testdata.OTP)
+        self.loginpage.do_click(Loginpage.VERIFY_OTP_BUTTON)
+        sleep(3)
+        self.datasets_page = Datasetspage(self.driver)
+        sleep(2)
+        self.loginpage.do_click(Datasetspage.DATASET_TAB)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,500);")
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.LIST_VIEW_BUTTON)
+        sleep(3)
+
+        if self.driver.current_url == "https://datahubethstage.farmstack.co/datahub/new_datasets":
+            allure.attach(self.driver.get_screenshot_as_png(), name="Dataset list view is visible",
+                          attachment_type=AttachmentType.PNG)
+            assert True, "Dataset list view is visible"
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="Dataset view is invisible",
+                          attachment_type=AttachmentType.PNG)
+            assert False, "Dataset list view is invisible"
+
+        self.datasets_page.do_click(Datasetspage.SIGN_OUT_BUTTON)
+        print("Completed")
+
+    @allure.description("Testing Add Dataset button is visible")
+    @allure.severity(allure.severity_level.CRITICAL)
+    def test_Add_Dataset_Button_List_View(self):
+        self.loginpage = Loginpage(self.driver)
+        sleep(3)
+        self.driver.execute_script("window.localStorage.clear();")
+        sleep(3)
+        self.driver.execute_script("window.location.reload(true);")
+        sleep(2)
+        self.driver.maximize_window()
+        self.loginpage.do_click(Loginpage.LOGIN_AS_ADMIN_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.USERNAME_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.USERNAME_FIELD, Testdata.USER_NAME)
+        self.loginpage.do_click(Loginpage.SEND_OTP_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.ENTER_OTP)
+        self.loginpage.do_sendkeys(Loginpage.ENTER_OTP, Testdata.OTP)
+        self.loginpage.do_click(Loginpage.VERIFY_OTP_BUTTON)
+        sleep(3)
+        self.datasets_page = Datasetspage(self.driver)
+        sleep(2)
+        self.loginpage.do_click(Datasetspage.DATASET_TAB)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,500);")
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.LIST_VIEW_BUTTON)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.ADD_NEW_BUTTON_LIST_VIEW)
+        sleep(2)
+
+        if self.driver.current_url == "https://datahubethstage.farmstack.co/datahub/new_datasets/add":
+            allure.attach(self.driver.get_screenshot_as_png(), name="Add Dataset button list view is visible",
+                          attachment_type=AttachmentType.PNG)
+            assert True, "Add Dataset button list view is visible"
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="Add Dataset button view is invisible",
+                          attachment_type=AttachmentType.PNG)
+            assert False, "Add Dataset button list view is invisible"
+
+        self.datasets_page.do_click(Datasetspage.SIGN_OUT_BUTTON)
+        print("Completed")
+
+    @allure.description("Testing Edit Dataset button is visible")
+    @allure.severity(allure.severity_level.CRITICAL)
+    def test_Edit_Dataset_Button(self):
+        self.loginpage = Loginpage(self.driver)
+        sleep(3)
+        self.driver.execute_script("window.localStorage.clear();")
+        sleep(3)
+        self.driver.execute_script("window.location.reload(true);")
+        sleep(2)
+        self.driver.maximize_window()
+        self.loginpage.do_click(Loginpage.LOGIN_AS_ADMIN_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.USERNAME_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.USERNAME_FIELD, Testdata.USER_NAME)
+        self.loginpage.do_click(Loginpage.SEND_OTP_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.ENTER_OTP)
+        self.loginpage.do_sendkeys(Loginpage.ENTER_OTP, Testdata.OTP)
+        self.loginpage.do_click(Loginpage.VERIFY_OTP_BUTTON)
+        sleep(3)
+        self.datasets_page = Datasetspage(self.driver)
+        sleep(2)
+        self.loginpage.do_click(Datasetspage.DATASET_TAB)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,500);")
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.FIRST_DATASET)
+        sleep(5)
+        self.datasets_page.do_click(Datasetspage.EDIT_DATASET)
+        sleep(3)
+        self.driver.execute_script("window.scrollBy(0,400);")
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.NEXT_BUTTON)
+        sleep(5)
+        self.driver.execute_script("window.scrollBy(0,500);")
+        sleep(5)
+        # self.datasets_page.do_click(Datasetspage.DELETE_BUTTON)
+        # sleep(3)
+        self.datasets_page.do_sendkeys_edit_dataset()
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.UPLOAD_FILE)
+        sleep(3)
+        self.driver.execute_script("window.scrollBy(0,300);")
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.NEXT_BUTTON)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.FILE_STANDARIZE_FIELD)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.FILE_FOR_STANDARIZATION)
+        sleep(3)
+        self.driver.execute_script("window.scrollBy(0,400);")
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.SELECT_DATAPOINT_ATTRIBUTE_STD)
+        # sleep(2)
+        self.datasets_page.do_click(Datasetspage.DATAPOINT_CATEGORY_2)
+        # sleep(2)
+        self.datasets_page.do_click(Datasetspage.CLEAR_DATAPOINT_ATTRIBUTE)
+        # sleep(2)
+        self.datasets_page.do_click(Datasetspage.SELECT_DATAPOINT_ATTRIBUTE_STD)
+        # sleep(2)
+        self.datasets_page.do_click(Datasetspage.DATAPOINT_CATEGORY_2)
+        # sleep(2)
+        self.datasets_page.do_click(Datasetspage.DATAPOINT_ATTRIBUTE_FIELD)
+        # sleep(2)
+        self.datasets_page.do_click(Datasetspage.DATAPOINT_ATTRIBUTE)
+        # sleep(2)
+        self.datasets_page.do_clickable_mask()
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,1400);")
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.APPLY_BUTTON)
+        sleep(5)
+        self.datasets_page.do_click(Datasetspage.NEXT_BUTTON)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,-300);")
+        self.datasets_page.do_click(Datasetspage.CATEGORY_ACCORDION)
+        self.datasets_page.do_clickable_CATEGORY()
+        self.driver.execute_script("window.scrollBy(0,600);")
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.SELECT_GREOGRAPHY_FIELD)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.SELECT_COUNTRY)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.SELECT_STATE_FIELD)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.SELECT_STATE)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.SELECT_CITY_FIELD)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.SELECT_CITY)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,300);")
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.NEXT_BUTTON)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,-300);")
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.UPLOAD_POLICY_FIELD)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.UPLOAD_POLICY_FILE)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,600);")
+        sleep(2)
+        self.datasets_page.do_clickable_REGISTER_USER()
+        sleep(2)
+        # self.driver.execute_script("window.scrollBy(0,400);")
+        # sleep(2)
+        self.datasets_page.do_click(Datasetspage.APPLY_BUTTON_STD)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.SUBMIT_BUTTON)
+        sleep(3)
+
+        if self.driver.current_url == "https://datahubethstage.farmstack.co/datahub/new_datasets":
+            allure.attach(self.driver.get_screenshot_as_png(), name="Successfully Dataset is updated",
+                          attachment_type=AttachmentType.PNG)
+            assert True, "Successfully Dataset is updated"
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="Failed to update Dataset",
+                          attachment_type=AttachmentType.PNG)
+            assert False, "Failed to update Dataset"
+        self.datasets_page.do_click(Datasetspage.SIGN_OUT_BUTTON)
+        print("Completed Test Case")
+
+    @allure.description("Testing Download Dataset is visible")
+    @allure.severity(allure.severity_level.CRITICAL)
+    def test_Downlaod_Dataset_Button(self):
+        self.loginpage = Loginpage(self.driver)
+        sleep(3)
+        self.driver.execute_script("window.localStorage.clear();")
+        sleep(3)
+        self.driver.execute_script("window.location.reload(true);")
+        sleep(2)
+        self.driver.maximize_window()
+        self.loginpage.do_click(Loginpage.LOGIN_AS_ADMIN_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.USERNAME_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.USERNAME_FIELD, Testdata.USER_NAME)
+        self.loginpage.do_click(Loginpage.SEND_OTP_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.ENTER_OTP)
+        self.loginpage.do_sendkeys(Loginpage.ENTER_OTP, Testdata.OTP)
+        self.loginpage.do_click(Loginpage.VERIFY_OTP_BUTTON)
+        sleep(3)
+        self.datasets_page = Datasetspage(self.driver)
+        sleep(2)
+        self.loginpage.do_click(Datasetspage.DATASET_TAB)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,500);")
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.FIRST_DATASET)
+        sleep(5)
+        self.driver.execute_script("window.scrollBy(0,700);")
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.ACCORDION_UPLOADED_FILES)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.DOWNLOAD_UPLOADED_FILES)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.DATASET_TAB)
+        sleep(2)
+
+        if self.driver.current_url == "https://datahubethstage.farmstack.co/datahub/new_datasets":
+            allure.attach(self.driver.get_screenshot_as_png(), name="Successfully Dataset file is downloaded",
+                          attachment_type=AttachmentType.PNG)
+            assert True, "Successfully Dataset file is downloaded"
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="Failed to download dataset file",
+                          attachment_type=AttachmentType.PNG)
+            assert False, "Failed to download dataset file"
+        self.datasets_page.do_click(Datasetspage.SIGN_OUT_BUTTON)
+        print("Completed Test Case")
+
+    @allure.description("Testing Delete dataset button is visible")
+    @allure.severity(allure.severity_level.CRITICAL)
+    def test_Delete_Dataset_Button(self):
+        self.loginpage = Loginpage(self.driver)
+        sleep(3)
+        self.driver.execute_script("window.localStorage.clear();")
+        sleep(3)
+        self.driver.execute_script("window.location.reload(true);")
+        sleep(2)
+        self.driver.maximize_window()
+        self.loginpage.do_click(Loginpage.LOGIN_AS_ADMIN_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.USERNAME_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.USERNAME_FIELD, Testdata.USER_NAME)
+        self.loginpage.do_click(Loginpage.SEND_OTP_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.ENTER_OTP)
+        self.loginpage.do_sendkeys(Loginpage.ENTER_OTP, Testdata.OTP)
+        self.loginpage.do_click(Loginpage.VERIFY_OTP_BUTTON)
+        sleep(3)
+        self.datasets_page = Datasetspage(self.driver)
+        sleep(2)
+        self.loginpage.do_click(Datasetspage.DATASET_TAB)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,500);")
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.SECOND_DATASET)
+        sleep(5)
+        self.datasets_page.do_click(Datasetspage.DELETE_DATASET)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.CONFIRM_DELETE_BUTTON)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.DATASET_TAB)
+        sleep(2)
+
+        if self.driver.current_url == "https://datahubethstage.farmstack.co/datahub/new_datasets":
+            allure.attach(self.driver.get_screenshot_as_png(), name="Successfully Dataset file is downloaded",
+                          attachment_type=AttachmentType.PNG)
+            assert True, "Successfully Dataset file is downloaded"
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="Failed to download dataset file",
+                          attachment_type=AttachmentType.PNG)
+            assert False, "Failed to download dataset file"
+        self.datasets_page.do_click(Datasetspage.SIGN_OUT_BUTTON)
+        print("Completed Test Case")
+
+    @allure.description("Testing Back_Button is visible")
+    @allure.severity(allure.severity_level.CRITICAL)
+    def test_Back_Button(self):
+        self.loginpage = Loginpage(self.driver)
+        sleep(3)
+        self.driver.execute_script("window.localStorage.clear();")
+        sleep(3)
+        self.driver.execute_script("window.location.reload(true);")
+        sleep(2)
+        self.driver.maximize_window()
+        self.loginpage.do_click(Loginpage.LOGIN_AS_ADMIN_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.USERNAME_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.USERNAME_FIELD, Testdata.USER_NAME)
+        self.loginpage.do_click(Loginpage.SEND_OTP_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.ENTER_OTP)
+        self.loginpage.do_sendkeys(Loginpage.ENTER_OTP, Testdata.OTP)
+        self.loginpage.do_click(Loginpage.VERIFY_OTP_BUTTON)
+        sleep(3)
+        self.datasets_page = Datasetspage(self.driver)
+        sleep(2)
+        self.loginpage.do_click(Datasetspage.DATASET_TAB)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,500);")
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.FIRST_DATASET)
+        sleep(5)
+        self.driver.execute_script("window.scrollBy(0,1000);")
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.BACK_BUTTON)
+        sleep(2)
+
+        if self.driver.current_url == "https://datahubethstage.farmstack.co/datahub/new_datasets":
+            allure.attach(self.driver.get_screenshot_as_png(), name="Back button is visible in dataset details",
+                          attachment_type=AttachmentType.PNG)
+            assert True, "Back button is visible in dataset details"
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="Back button is invisible in dataset details",
+                          attachment_type=AttachmentType.PNG)
+            assert False, "Back button is invisible in dataset details"
+        self.datasets_page.do_click(Datasetspage.SIGN_OUT_BUTTON)
+        print("Completed Test Case")
+
+    @allure.description("Testing Load_More Button is visible")
+    @allure.severity(allure.severity_level.CRITICAL)
+    def test_Load_more_Button(self):
+        self.loginpage = Loginpage(self.driver)
+        sleep(3)
+        self.driver.execute_script("window.localStorage.clear();")
+        sleep(3)
+        self.driver.execute_script("window.location.reload(true);")
+        sleep(2)
+        self.driver.maximize_window()
+        self.loginpage.do_click(Loginpage.LOGIN_AS_ADMIN_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.USERNAME_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.USERNAME_FIELD, Testdata.USER_NAME)
+        self.loginpage.do_click(Loginpage.SEND_OTP_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.ENTER_OTP)
+        self.loginpage.do_sendkeys(Loginpage.ENTER_OTP, Testdata.OTP)
+        self.loginpage.do_click(Loginpage.VERIFY_OTP_BUTTON)
+        sleep(3)
+        self.datasets_page = Datasetspage(self.driver)
+        sleep(2)
+        self.loginpage.do_click(Datasetspage.DATASET_TAB)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,1000);")
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.DATASETS_LOAD_MORE_BUTTON)
+        sleep(3)
+
+        if self.driver.current_url == "https://datahubethstage.farmstack.co/datahub/new_datasets":
+            allure.attach(self.driver.get_screenshot_as_png(), name="Back button is visible in dataset details",
+                          attachment_type=AttachmentType.PNG)
+            assert True, "Back button is visible in dataset details"
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="Back button is invisible in dataset details",
+                          attachment_type=AttachmentType.PNG)
+            assert False, "Back button is invisible in dataset details"
+        self.datasets_page.do_click(Datasetspage.SIGN_OUT_BUTTON)
+        print("Completed Test Case")
+
+    @allure.description("Testing Search input for datasets is visible")
+    @allure.severity(allure.severity_level.CRITICAL)
+    def test_Search_input_field(self):
+        self.loginpage = Loginpage(self.driver)
+        sleep(3)
+        self.driver.execute_script("window.localStorage.clear();")
+        sleep(3)
+        self.driver.execute_script("window.location.reload(true);")
+        sleep(2)
+        self.driver.maximize_window()
+        self.loginpage.do_click(Loginpage.LOGIN_AS_ADMIN_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.USERNAME_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.USERNAME_FIELD, Testdata.USER_NAME)
+        self.loginpage.do_click(Loginpage.SEND_OTP_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.ENTER_OTP)
+        self.loginpage.do_sendkeys(Loginpage.ENTER_OTP, Testdata.OTP)
+        self.loginpage.do_click(Loginpage.VERIFY_OTP_BUTTON)
+        sleep(3)
+        self.datasets_page = Datasetspage(self.driver)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.DATASET_TAB)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,300);")
+        sleep(2)
+        self.datasets_page.do_sendkeys(Datasetspage.SEARCH_DATASET, Testdata.SEARCH_INPUT_TEXT)
+        sleep(4)
+
+        if self.driver.current_url == "https://datahubethstage.farmstack.co/datahub/new_datasets":
+            allure.attach(self.driver.get_screenshot_as_png(), name="Input field for dataset search is functional",
+                          attachment_type=AttachmentType.PNG)
+            assert True, "Input field for dataset search is functional"
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="Input field for dataset search is not functional",
+                          attachment_type=AttachmentType.PNG)
+            assert False, "Input field for dataset search is not functional"
+        self.datasets_page.do_click(Datasetspage.SIGN_OUT_BUTTON)
+        print("Completed Test Case")
+
+    @allure.description("Testing Search datasets by geography")
+    @allure.severity(allure.severity_level.CRITICAL)
+    def test_Search_Datasets_By_Geography(self):
+        self.loginpage = Loginpage(self.driver)
+        sleep(3)
+        self.driver.execute_script("window.localStorage.clear();")
+        sleep(3)
+        self.driver.execute_script("window.location.reload(true);")
+        sleep(2)
+        self.driver.maximize_window()
+        self.loginpage.do_click(Loginpage.LOGIN_AS_ADMIN_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.USERNAME_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.USERNAME_FIELD, Testdata.USER_NAME)
+        self.loginpage.do_click(Loginpage.SEND_OTP_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.ENTER_OTP)
+        self.loginpage.do_sendkeys(Loginpage.ENTER_OTP, Testdata.OTP)
+        self.loginpage.do_click(Loginpage.VERIFY_OTP_BUTTON)
+        sleep(3)
+        self.datasets_page = Datasetspage(self.driver)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.DATASET_TAB)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.FILTER_GEOGRAPHY)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.FILTER_COUNTRY)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.FILTER_SELECT_COUNTRY)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.FILTER_STATE)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.FILTER_SELECT_STATE)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.FILTER_CITY)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.FILTER_SELECT_CITY)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,600);")
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.CANCEL_CITY)
+        sleep(5)
+        if self.driver.current_url == "https://datahubethstage.farmstack.co/datahub/new_datasets":
+            allure.attach(self.driver.get_screenshot_as_png(), name="Filter dataset by geography is successful",
+                          attachment_type=AttachmentType.PNG)
+            assert True, "Filter by geography is successful"
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="Failed to filter dataset by geography",
+                          attachment_type=AttachmentType.PNG)
+            assert False, "Failed to filter dataset by geography"
+        self.datasets_page.do_click(Datasetspage.SIGN_OUT_BUTTON)
+        print("Completed Test Case")
+
+    @allure.description("Testing Search datasets by Category")
+    @allure.severity(allure.severity_level.CRITICAL)
+    def test_Search_Datasets_By_Category(self):
+        self.loginpage = Loginpage(self.driver)
+        sleep(3)
+        self.driver.execute_script("window.localStorage.clear();")
+        sleep(3)
+        self.driver.execute_script("window.location.reload(true);")
+        sleep(2)
+        self.driver.maximize_window()
+        self.loginpage.do_click(Loginpage.LOGIN_AS_ADMIN_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.USERNAME_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.USERNAME_FIELD, Testdata.USER_NAME)
+        self.loginpage.do_click(Loginpage.SEND_OTP_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.ENTER_OTP)
+        self.loginpage.do_sendkeys(Loginpage.ENTER_OTP, Testdata.OTP)
+        self.loginpage.do_click(Loginpage.VERIFY_OTP_BUTTON)
+        sleep(3)
+        self.datasets_page = Datasetspage(self.driver)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.DATASET_TAB)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.FILTER_CATEGORY)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,300);")
+        sleep(2)
+        self.datasets_page.do_click_checkbox_filter_Subcategories()
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,300);")
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.CANCEL_CITY)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,-200);")
+        sleep(3)
+        if self.driver.current_url == "https://datahubethstage.farmstack.co/datahub/new_datasets":
+            allure.attach(self.driver.get_screenshot_as_png(), name="Filter dataset by catgeory is successful",
+                          attachment_type=AttachmentType.PNG)
+            assert True, "Filter dataset by catgeory is successful"
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="Failed to filter catgeory by catgeory",
+                          attachment_type=AttachmentType.PNG)
+            assert False, "Failed to filter dataset by catgeory"
+        self.datasets_page.do_click(Datasetspage.SIGN_OUT_BUTTON)
+        print("Completed Test Case")
+
+    @allure.description("Testing Search datasets by Date")
+    @allure.severity(allure.severity_level.CRITICAL)
+    def test_Search_Datasets_By_Date(self):
+        self.loginpage = Loginpage(self.driver)
+        sleep(3)
+        self.driver.execute_script("window.localStorage.clear();")
+        sleep(3)
+        self.driver.execute_script("window.location.reload(true);")
+        sleep(2)
+        self.driver.maximize_window()
+        self.loginpage.do_click(Loginpage.LOGIN_AS_ADMIN_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.USERNAME_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.USERNAME_FIELD, Testdata.USER_NAME)
+        self.loginpage.do_click(Loginpage.SEND_OTP_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.ENTER_OTP)
+        self.loginpage.do_sendkeys(Loginpage.ENTER_OTP, Testdata.OTP)
+        self.loginpage.do_click(Loginpage.VERIFY_OTP_BUTTON)
+        sleep(3)
+        self.datasets_page = Datasetspage(self.driver)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.DATASET_TAB)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.FILTER_DATE)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,300);")
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.FROM_DATE_FIELD_FILTER)
+        sleep(2)
+        self.datasets_page.do_sendkeys(Datasetspage.FROM_DATE_FIELD_FILTER, Testdata.FILTER_START_DATE)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.END_DATE_FIELD_FILTER)
+        sleep(2)
+        self.datasets_page.do_sendkeys(Datasetspage.FROM_DATE_FIELD_FILTER, Testdata.FILTER_END_DATE)
+        sleep(4)
+        self.driver.execute_script("window.scrollBy(0,300);")
+        sleep(3)
+        if self.driver.current_url == "https://datahubethstage.farmstack.co/datahub/new_datasets":
+            allure.attach(self.driver.get_screenshot_as_png(), name="Filter dataset by Date is successful",
+                          attachment_type=AttachmentType.PNG)
+            assert True, "Filter dataset by Date is successful"
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="Failed to filter catgeory by Date",
+                          attachment_type=AttachmentType.PNG)
+            assert False, "Failed to filter dataset by Date"
+        self.datasets_page.do_click(Datasetspage.SIGN_OUT_BUTTON)
+        print("Completed Test Case")
+
+    @allure.description("Testing Clear all button")
+    @allure.severity(allure.severity_level.CRITICAL)
+    def test_Clear_all_Button(self):
+        self.loginpage = Loginpage(self.driver)
+        sleep(3)
+        self.driver.execute_script("window.localStorage.clear();")
+        sleep(3)
+        self.driver.execute_script("window.location.reload(true);")
+        sleep(2)
+        self.driver.maximize_window()
+        self.loginpage.do_click(Loginpage.LOGIN_AS_ADMIN_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.USERNAME_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.USERNAME_FIELD, Testdata.USER_NAME)
+        self.loginpage.do_click(Loginpage.SEND_OTP_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.ENTER_OTP)
+        self.loginpage.do_sendkeys(Loginpage.ENTER_OTP, Testdata.OTP)
+        self.loginpage.do_click(Loginpage.VERIFY_OTP_BUTTON)
+        sleep(3)
+        self.datasets_page = Datasetspage(self.driver)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.DATASET_TAB)
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.FILTER_CATEGORY)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,300);")
+        sleep(2)
+        self.datasets_page.do_click_checkbox_filter_Subcategories()
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,300);")
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,-300);")
+        sleep(2)
+        self.datasets_page.do_click(Datasetspage.CLEAR_ALL_BUTTON_FILTERS)
+        sleep(3)
+        if self.driver.current_url == "https://datahubethstage.farmstack.co/datahub/new_datasets":
+            allure.attach(self.driver.get_screenshot_as_png(), name="Filter dataset by Date is successful",
+                          attachment_type=AttachmentType.PNG)
+            assert True, "Filter dataset by Date is successful"
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="Failed to filter catgeory by Date",
+                          attachment_type=AttachmentType.PNG)
+            assert False, "Failed to filter dataset by Date"
+        self.datasets_page.do_click(Datasetspage.SIGN_OUT_BUTTON)
+        print("Completed Test Case")
Index: Testcases/test_settingspage.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Testcases/test_settingspage.py b/Testcases/test_settingspage.py
new file mode 100644
--- /dev/null	(date 1690897073219)
+++ b/Testcases/test_settingspage.py	(date 1690897073219)
@@ -0,0 +1,711 @@
+from time import sleep
+
+import pytest
+import allure
+from allure_commons.types import AttachmentType
+from selenium.webdriver.support.ui import WebDriverWait
+from selenium.webdriver.support import expected_conditions as EC
+from Pageobjects.Homepage import Homepage
+from Configurations.config import Testdata
+from Pageobjects.Loginpage import Loginpage
+from Pageobjects.SettingsPage import SettingsPage
+from Testcases.confitest import init_driver
+from Testcases.test_base import Basetest
+from Pageobjects.AddParticipant_page import Participant_page
+
+
+class Test_Settings_page(Basetest):
+
+    @allure.description("Testing Account Settings Page")
+    @allure.severity(allure.severity_level.CRITICAL)
+    def test_update_account_settings_page(self):
+        self.loginpage = Loginpage(self.driver)
+        sleep(3)
+        self.driver.execute_script("window.localStorage.clear();")
+        sleep(3)
+        self.driver.execute_script("window.location.reload(true);")
+        sleep(2)
+        self.driver.maximize_window()
+        self.loginpage.do_click(Loginpage.LOGIN_AS_ADMIN_BUTTON)
+        self.loginpage.do_click(Loginpage.USERNAME_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.USERNAME_FIELD, Testdata.USER_NAME)
+        self.loginpage.do_click(Loginpage.SEND_OTP_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.ENTER_OTP)
+        self.loginpage.do_sendkeys(Loginpage.ENTER_OTP, Testdata.OTP)
+        self.loginpage.do_click(Loginpage.VERIFY_OTP_BUTTON)
+        sleep(5)
+        self.settings_page = SettingsPage(self.driver)
+        self.settings_page.do_click(SettingsPage.SETTINGS_BUTTON)
+        self.settings_page.do_click(SettingsPage.FIRST_NAME_FIELD)
+        self.settings_page.do_select_all(SettingsPage.FIRST_NAME_FIELD)
+        self.settings_page.do_clear(SettingsPage.FIRST_NAME_FIELD)
+        sleep(2)
+        self.settings_page.do_sendkeys(SettingsPage.FIRST_NAME_FIELD, Testdata.ACCOUNT_FIRST_NAME)
+        self.settings_page.do_click(SettingsPage.LAST_NAME_FIELD)
+        self.settings_page.do_select_all(SettingsPage.LAST_NAME_FIELD)
+        self.settings_page.do_clear(SettingsPage.LAST_NAME_FIELD)
+        sleep(2)
+        self.settings_page.do_sendkeys(SettingsPage.LAST_NAME_FIELD, Testdata.ACCOUNT_LAST_NAME)
+        self.settings_page.do_click(SettingsPage.CONTACT_NUMBER_FIELD)
+        for i in range(10):
+            self.settings_page.do_clear(SettingsPage.CONTACT_NUMBER_FIELD)
+        sleep(2)
+        self.settings_page.do_sendkeys(SettingsPage.CONTACT_NUMBER_FIELD, Testdata.ACCOUNT_CONTACT_NUMBER)
+        sleep(1)
+        self.settings_page.do_click(SettingsPage.SUBMIT_BUTTON)
+        sleep(2)
+        if self.driver.current_url == "https://datahubethstage.farmstack.co/datahub/settings/1":
+            allure.attach(self.driver.get_screenshot_as_png(), name="Updating account details is successful",
+                          attachment_type=AttachmentType.PNG)
+            assert True, "Updating account details is successful"
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="Updating account details is failed",
+                          attachment_type=AttachmentType.PNG)
+            assert False, "Updating account details is failed"
+        self.settings_page.do_click(SettingsPage.SIGN_OUT_BUTTON)
+        print("jbds")
+
+    @allure.description("Testing Cancel Button in account settings is Visible")
+    @allure.severity(allure.severity_level.CRITICAL)
+    def test_Cancel_Button_Account_Settings(self):
+        self.loginpage = Loginpage(self.driver)
+        sleep(3)
+        self.driver.execute_script("window.localStorage.clear();")
+        sleep(3)
+        self.driver.execute_script("window.location.reload(true);")
+        sleep(2)
+        self.driver.maximize_window()
+        self.loginpage.do_click(Loginpage.LOGIN_AS_ADMIN_BUTTON)
+        self.loginpage.do_click(Loginpage.USERNAME_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.USERNAME_FIELD, Testdata.USER_NAME)
+        self.loginpage.do_click(Loginpage.SEND_OTP_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.ENTER_OTP)
+        self.loginpage.do_sendkeys(Loginpage.ENTER_OTP, Testdata.OTP)
+        self.loginpage.do_click(Loginpage.VERIFY_OTP_BUTTON)
+        sleep(5)
+        self.settings_page = SettingsPage(self.driver)
+        self.settings_page.do_click(SettingsPage.SETTINGS_BUTTON)
+        self.settings_page.do_click(SettingsPage.CANCEL_BUTTON)
+        sleep(2)
+        if self.driver.current_url == "https://datahubethstage.farmstack.co/datahub/new_datasets":
+            allure.attach(self.driver.get_screenshot_as_png(), name="Cancel Button in account settings is Visible",
+                          attachment_type=AttachmentType.PNG)
+            assert True, "Cancel Button in account settings is Visible"
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="Cancel Button in account settings is Visible",
+                          attachment_type=AttachmentType.PNG)
+            assert False, "Cancel Button in account settings is Visible"
+        self.settings_page.do_click(SettingsPage.SIGN_OUT_BUTTON)
+
+    #
+    @allure.description("Testing Organization Setting Page")
+    @allure.severity(allure.severity_level.CRITICAL)
+    def test_update_organization_settings_page(self):
+        self.loginpage = Loginpage(self.driver)
+        sleep(3)
+        self.driver.execute_script("window.localStorage.clear();")
+        sleep(3)
+        self.driver.execute_script("window.location.reload(true);")
+        sleep(2)
+        self.driver.maximize_window()
+        self.loginpage.do_click(Loginpage.LOGIN_AS_ADMIN_BUTTON)
+        self.loginpage.do_click(Loginpage.USERNAME_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.USERNAME_FIELD, Testdata.USER_NAME)
+        self.loginpage.do_click(Loginpage.SEND_OTP_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.ENTER_OTP)
+        self.loginpage.do_sendkeys(Loginpage.ENTER_OTP, Testdata.OTP)
+        self.loginpage.do_click(Loginpage.VERIFY_OTP_BUTTON)
+        sleep(3)
+        self.settings_page = SettingsPage(self.driver)
+        self.settings_page.do_click(SettingsPage.SETTINGS_BUTTON)
+        self.settings_page.do_click(SettingsPage.ORGANIZATION_SETTINGS_TAB)
+        self.settings_page.do_click(SettingsPage.ORGANIZATION_NAME_FIELD)
+        self.settings_page.do_select_all(SettingsPage.ORGANIZATION_NAME_FIELD)
+        self.settings_page.do_clear(SettingsPage.ORGANIZATION_NAME_FIELD)
+        self.settings_page.do_sendkeys(SettingsPage.ORGANIZATION_NAME_FIELD, Testdata.UPDATE_ORGANIZATION_NAME)
+        self.settings_page.do_click(SettingsPage.ORGANIZATION_EMAIL_FIELD)
+        self.settings_page.do_select_all(SettingsPage.ORGANIZATION_EMAIL_FIELD)
+        self.settings_page.do_clear(SettingsPage.ORGANIZATION_EMAIL_FIELD)
+        self.settings_page.do_sendkeys(SettingsPage.ORGANIZATION_EMAIL_FIELD, Testdata.UPDATE_ORGANIZATION_MAIL_ID)
+        self.settings_page.do_click(SettingsPage.ORGANIZATION_WEBSITE_LINK_FIELD)
+        self.settings_page.do_select_all(SettingsPage.ORGANIZATION_WEBSITE_LINK_FIELD)
+        self.settings_page.do_clear(SettingsPage.ORGANIZATION_WEBSITE_LINK_FIELD)
+        self.settings_page.do_sendkeys(SettingsPage.ORGANIZATION_WEBSITE_LINK_FIELD,
+                                       Testdata.UPDATE_ORGANIZATION_WEBSITE_LINK)
+        self.settings_page.do_click(SettingsPage.ORGANIZATION_CONTACTNUMBER_FIELD)
+        for i in range(10):
+            self.settings_page.do_clear(SettingsPage.ORGANIZATION_CONTACTNUMBER_FIELD)
+        sleep(1)
+        self.settings_page.do_sendkeys(SettingsPage.ORGANIZATION_CONTACTNUMBER_FIELD,
+                                       Testdata.UPDATE_ORGANIZATION_CONTACT_NUMBER)
+        self.settings_page.do_click(SettingsPage.ORGANIZATION_ADDRESS_FIELD)
+        self.settings_page.do_select_all(SettingsPage.ORGANIZATION_ADDRESS_FIELD)
+        self.settings_page.do_clear(SettingsPage.ORGANIZATION_ADDRESS_FIELD)
+        self.settings_page.do_sendkeys(SettingsPage.ORGANIZATION_ADDRESS_FIELD, Testdata.ORGANIZATION_ADDRESS)
+        sleep(2)
+        self.settings_page.do_click(SettingsPage.COUNTRY_FIELD)
+        self.settings_page.do_click(SettingsPage.SELECT_COUNTRY)
+        self.settings_page.do_click(SettingsPage.ORGANIZATION_PINCODE_FIELD)
+        self.settings_page.do_select_all(SettingsPage.ORGANIZATION_PINCODE_FIELD)
+        self.settings_page.do_clear(SettingsPage.ORGANIZATION_PINCODE_FIELD)
+        self.settings_page.do_sendkeys(SettingsPage.ORGANIZATION_PINCODE_FIELD, Testdata.UPDATE_ORGANIZATION_PINCODE)
+        self.driver.execute_script("window.scrollBy(0,300);")
+        sleep(2)
+        self.settings_page.do_click(SettingsPage.ORGANIZATION_DESCRIPTION_FIELD)
+        self.settings_page.do_select_all(SettingsPage.ORGANIZATION_DESCRIPTION_FIELD)
+        self.settings_page.do_clear(SettingsPage.ORGANIZATION_DESCRIPTION_FIELD)
+        self.settings_page.do_sendkeys(SettingsPage.ORGANIZATION_DESCRIPTION_FIELD,
+                                       Testdata.UPDATE_ORGANIZATION_DESCRIPTION)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,400);")
+        sleep(2)
+        self.settings_page.do_sendkeys_ORG_LOGO()
+        sleep(2)
+        self.settings_page.do_click(SettingsPage.DONE_BUTTON_LOGO)
+        sleep(2)
+        self.settings_page.do_click(SettingsPage.CANCEL_LOGO_BUTTON)
+        sleep(1)
+        self.settings_page.do_sendkeys_ORG_LOGO()
+        sleep(2)
+        self.settings_page.do_click(SettingsPage.DONE_BUTTON_LOGO)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,300);")
+        sleep(2)
+        self.settings_page.do_click(SettingsPage.ORGANIZATION_SUBMIT_BUTTON)
+        sleep(2)
+        if self.driver.current_url == "https://datahubethstage.farmstack.co/datahub/settings/2":
+            allure.attach(self.driver.get_screenshot_as_png(), name="Updating organizational details is successful",
+                          attachment_type=AttachmentType.PNG)
+            assert True, "Updating organizational details is successful"
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="Updating organizational details is failed",
+                          attachment_type=AttachmentType.PNG)
+            assert False, "Updating organizational details is failed"
+        self.settings_page.do_click(SettingsPage.SIGN_OUT_BUTTON)
+
+    @allure.description("Testing Policy Settings Page")
+    @allure.severity(allure.severity_level.CRITICAL)
+    def test_add_policy_settings_page(self):
+        self.loginpage = Loginpage(self.driver)
+        sleep(3)
+        self.driver.execute_script("window.localStorage.clear();")
+        sleep(3)
+        self.driver.execute_script("window.location.reload(true);")
+        sleep(2)
+        self.driver.maximize_window()
+        self.loginpage.do_click(Loginpage.LOGIN_AS_ADMIN_BUTTON)
+        self.loginpage.do_click(Loginpage.USERNAME_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.USERNAME_FIELD, Testdata.USER_NAME)
+        self.loginpage.do_click(Loginpage.SEND_OTP_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.ENTER_OTP)
+        self.loginpage.do_sendkeys(Loginpage.ENTER_OTP, Testdata.OTP)
+        self.loginpage.do_click(Loginpage.VERIFY_OTP_BUTTON)
+        sleep(5)
+        self.settings_page = SettingsPage(self.driver)
+        self.settings_page.do_click(SettingsPage.SETTINGS_BUTTON)
+        self.settings_page.do_click(SettingsPage.POLICY_TAB)
+        self.settings_page.do_click(SettingsPage.ADD_NEW_POLICY)
+        self.settings_page.do_click(SettingsPage.POLICY_NAME_FIELD)
+        self.settings_page.do_sendkeys(SettingsPage.POLICY_NAME_FIELD, Testdata.POLICY_NAME)
+        self.driver.execute_script("window.scrollBy(0,300);")
+        sleep(2)
+        self.settings_page.do_click(SettingsPage.POLICY_DESCRIPTION)
+        self.settings_page.do_sendkeys(SettingsPage.POLICY_DESCRIPTION, Testdata.POLICY_DESCRIPTION)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,300);")
+        sleep(2)
+        self.settings_page.do_sendkeys_POLICIES()
+        sleep(2)
+        self.settings_page.do_click(SettingsPage.ADD_POLICY)
+        sleep(2)
+        if self.driver.current_url == "https://datahubethstage.farmstack.co/datahub/settings/3":
+            allure.attach(self.driver.get_screenshot_as_png(), name="Adding Policy is successful",
+                          attachment_type=AttachmentType.PNG)
+            assert True, "Adding Policy is successful"
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="Adding Policy is failed",
+                          attachment_type=AttachmentType.PNG)
+            assert False, "Adding Policy is successful"
+        self.settings_page.do_click(SettingsPage.SIGN_OUT_BUTTON)
+
+    @allure.description("Updating Policy")
+    @allure.severity(allure.severity_level.CRITICAL)
+    def test_update_policy(self):
+        self.loginpage = Loginpage(self.driver)
+        sleep(3)
+        self.driver.execute_script("window.localStorage.clear();")
+        sleep(3)
+        self.driver.execute_script("window.location.reload(true);")
+        sleep(2)
+        self.driver.maximize_window()
+        self.loginpage.do_click(Loginpage.LOGIN_AS_ADMIN_BUTTON)
+        self.loginpage.do_click(Loginpage.USERNAME_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.USERNAME_FIELD, Testdata.USER_NAME)
+        self.loginpage.do_click(Loginpage.SEND_OTP_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.ENTER_OTP)
+        self.loginpage.do_sendkeys(Loginpage.ENTER_OTP, Testdata.OTP)
+        self.loginpage.do_click(Loginpage.VERIFY_OTP_BUTTON)
+        sleep(3)
+        self.settings_page = SettingsPage(self.driver)
+        self.settings_page.do_click(SettingsPage.SETTINGS_BUTTON)
+        self.settings_page.do_click(SettingsPage.POLICY_TAB)
+        sleep(2)
+        self.settings_page.do_click(SettingsPage.UPDATE_POLICY)
+        self.settings_page.do_click(SettingsPage.UPDATE_POLICY_NAME_FIELD)
+        self.settings_page.do_select_all(SettingsPage.UPDATE_POLICY_NAME_FIELD)
+        self.settings_page.do_clear(SettingsPage.UPDATE_POLICY_NAME_FIELD)
+        self.driver.execute_script("window.scrollBy(0,300);")
+        sleep(2)
+        self.settings_page.do_sendkeys(SettingsPage.UPDATE_POLICY_NAME_FIELD, Testdata.UPDATE_POLICY_NAME)
+        self.settings_page.do_click(SettingsPage.UPDATE_POLICY_DESCRIPTION_FIELD)
+        self.settings_page.do_select_all(SettingsPage.UPDATE_POLICY_DESCRIPTION_FIELD)
+        self.settings_page.do_clear(SettingsPage.UPDATE_POLICY_DESCRIPTION_FIELD)
+        self.settings_page.do_sendkeys(SettingsPage.UPDATE_POLICY_DESCRIPTION_FIELD, Testdata.UPDATE_POLICY_DESCRIPTION)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,300);")
+        sleep(2)
+        # # self.settings_page.do_click(SettingsPage.UPDATE_CLOSE_BUTTON)
+        # # sleep(2)
+        # self.settings_page.do_sendkeys_UPDATE_POLICIES()
+        # sleep(5)
+        print("IMRAN")
+        self.settings_page.do_click(SettingsPage.UPDATE_SAVE_BUTTON)
+        sleep(2)
+        # self.settings_page.do_click(SettingsPage.UPDATE_POLICY_DELETE_BUTTON)
+        # self.settings_page.do_click(SettingsPage.UPDATE_POLICY_DELETE_BUTTON_2)
+
+        if self.driver.current_url == "https://datahubethstage.farmstack.co/datahub/settings/3":
+            allure.attach(self.driver.get_screenshot_as_png(), name="Settings button is visible",
+                          attachment_type=AttachmentType.PNG)
+            assert True, ""
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="Settings button is invisible",
+                          attachment_type=AttachmentType.PNG)
+
+    @allure.description("Testing Delete Policy")
+    @allure.severity(allure.severity_level.CRITICAL)
+    def test_Delete_Policy(self):
+        self.loginpage = Loginpage(self.driver)
+        sleep(3)
+        self.driver.execute_script("window.localStorage.clear();")
+        sleep(3)
+        self.driver.execute_script("window.location.reload(true);")
+        sleep(2)
+        self.driver.maximize_window()
+        self.loginpage.do_click(Loginpage.LOGIN_AS_ADMIN_BUTTON)
+        self.loginpage.do_click(Loginpage.USERNAME_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.USERNAME_FIELD, Testdata.USER_NAME)
+        self.loginpage.do_click(Loginpage.SEND_OTP_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.ENTER_OTP)
+        self.loginpage.do_sendkeys(Loginpage.ENTER_OTP, Testdata.OTP)
+        self.loginpage.do_click(Loginpage.VERIFY_OTP_BUTTON)
+        sleep(5)
+        self.settings_page = SettingsPage(self.driver)
+        self.settings_page.do_click(SettingsPage.SETTINGS_BUTTON)
+        self.settings_page.do_click(SettingsPage.POLICY_TAB)
+        self.settings_page.do_click(SettingsPage.UPDATE_POLICY_DELETE_ICON)
+        sleep(2)
+        self.settings_page.do_click(SettingsPage.UPDATE_POLICY_DELETE_POPPER)
+        sleep(2)
+        if self.driver.current_url == "https://datahubethstage.farmstack.co/datahub/settings/3":
+            allure.attach(self.driver.get_screenshot_as_png(), name="Deleting Policy is successful",
+                          attachment_type=AttachmentType.PNG)
+            assert True, "Deleting Policy is successful"
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="Deleting Policy is failed",
+                          attachment_type=AttachmentType.PNG)
+            assert False, "Deleting Policy is failed"
+        self.settings_page.do_click(SettingsPage.SIGN_OUT_BUTTON)
+
+    @allure.description("Testing Delete Policy Button2")
+    @allure.severity(allure.severity_level.CRITICAL)
+    def test_Delete_Policy_Button2(self):
+        self.loginpage = Loginpage(self.driver)
+        sleep(3)
+        self.driver.execute_script("window.localStorage.clear();")
+        sleep(3)
+        self.driver.execute_script("window.location.reload(true);")
+        sleep(2)
+        self.driver.maximize_window()
+        self.loginpage.do_click(Loginpage.LOGIN_AS_ADMIN_BUTTON)
+        self.loginpage.do_click(Loginpage.USERNAME_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.USERNAME_FIELD, Testdata.USER_NAME)
+        self.loginpage.do_click(Loginpage.SEND_OTP_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.ENTER_OTP)
+        self.loginpage.do_sendkeys(Loginpage.ENTER_OTP, Testdata.OTP)
+        self.loginpage.do_click(Loginpage.VERIFY_OTP_BUTTON)
+        sleep(5)
+        self.settings_page = SettingsPage(self.driver)
+        self.settings_page.do_click(SettingsPage.SETTINGS_BUTTON)
+        self.settings_page.do_click(SettingsPage.POLICY_TAB)
+        self.settings_page.do_click(SettingsPage.UPDATE_POLICY)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,900);")
+        sleep(2)
+        self.settings_page.do_click(SettingsPage.UPDATE_POLICY_DELETE_BUTTON2)
+        sleep(2)
+        self.settings_page.do_click(SettingsPage.UPDATE_POLICY_DELETE_POPPER2)
+        sleep(2)
+        if self.driver.current_url == "https://datahubethstage.farmstack.co/datahub/settings/3":
+            allure.attach(self.driver.get_screenshot_as_png(), name="Deleting Policy is successful",
+                          attachment_type=AttachmentType.PNG)
+            assert True, "Deleting Policy is successful"
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="Deleting Policy is failed",
+                          attachment_type=AttachmentType.PNG)
+            assert False, "Deleting Policy is failed"
+        self.settings_page.do_click(SettingsPage.SIGN_OUT_BUTTON)
+
+    @allure.description("Adding Categories")
+    @allure.severity(allure.severity_level.CRITICAL)
+    def test_adding_category(self):
+        self.loginpage = Loginpage(self.driver)
+        sleep(3)
+        self.driver.execute_script("window.localStorage.clear();")
+        sleep(3)
+        self.driver.execute_script("window.location.reload(true);")
+        sleep(2)
+        self.driver.maximize_window()
+        self.loginpage.do_click(Loginpage.LOGIN_AS_ADMIN_BUTTON)
+        self.loginpage.do_click(Loginpage.USERNAME_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.USERNAME_FIELD, Testdata.USER_NAME)
+        self.loginpage.do_click(Loginpage.SEND_OTP_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.ENTER_OTP)
+        self.loginpage.do_sendkeys(Loginpage.ENTER_OTP, Testdata.OTP)
+        self.loginpage.do_click(Loginpage.VERIFY_OTP_BUTTON)
+        sleep(5)
+        self.settings_page = SettingsPage(self.driver)
+        self.settings_page.do_click(SettingsPage.SETTINGS_BUTTON)
+        self.settings_page.do_click(SettingsPage.CATEGORY_TAB)
+        self.settings_page.do_click(SettingsPage.ADD_NEW_CATEGORY)
+        self.settings_page.do_click(SettingsPage.CATEGORY_NAME_FIELD)
+        self.settings_page.do_sendkeys(SettingsPage.CATEGORY_NAME_FIELD, Testdata.CATEGORY_NAME)
+        self.settings_page.do_click(SettingsPage.CATEGORY_DESCRIPTION_FIELD)
+        self.settings_page.do_sendkeys(SettingsPage.CATEGORY_DESCRIPTION_FIELD, Testdata.POLICY_DESCRIPTION)
+        self.settings_page.do_click(SettingsPage.ADD_CATEGORY_BUTTON)
+        self.driver.execute_script("window.scrollBy(0,700);")
+        sleep(2)
+        self.settings_page.do_click(SettingsPage.CATEGORY_SUBMIT_BUTTON)
+        sleep(2)
+
+        if self.driver.current_url == "https://datahubethstage.farmstack.co/datahub/settings/4":
+            allure.attach(self.driver.get_screenshot_as_png(), name="Adding Categories is successful",
+                          attachment_type=AttachmentType.PNG)
+            assert True, "Adding Categories is successful"
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="Failed to add categories",
+                          attachment_type=AttachmentType.PNG)
+            assert False, "Failed to add categories"
+
+    @allure.description("Adding sub categories")
+    @allure.severity(allure.severity_level.CRITICAL)
+    def test_adding_sub_category(self):
+        self.loginpage = Loginpage(self.driver)
+        sleep(3)
+        self.driver.execute_script("window.localStorage.clear();")
+        sleep(3)
+        self.driver.execute_script("window.location.reload(true);")
+        sleep(2)
+        self.driver.maximize_window()
+        self.loginpage.do_click(Loginpage.LOGIN_AS_ADMIN_BUTTON)
+        self.loginpage.do_click(Loginpage.USERNAME_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.USERNAME_FIELD, Testdata.USER_NAME)
+        self.loginpage.do_click(Loginpage.SEND_OTP_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.ENTER_OTP)
+        self.loginpage.do_sendkeys(Loginpage.ENTER_OTP, Testdata.OTP)
+        self.loginpage.do_click(Loginpage.VERIFY_OTP_BUTTON)
+        sleep(5)
+        self.settings_page = SettingsPage(self.driver)
+        self.settings_page.do_click(SettingsPage.SETTINGS_BUTTON)
+        self.settings_page.do_click(SettingsPage.CATEGORY_TAB)
+        self.settings_page.do_click(SettingsPage.UPDATE_CATEGORY_ACCORDION)
+        self.settings_page.do_click(SettingsPage.ADD_SUB_CATEGORY_NAME_FIELD)
+        self.settings_page.do_sendkeys(SettingsPage.ADD_SUB_CATEGORY_NAME_FIELD, Testdata.ADD_SUB_CATEGORY_NAME)
+        self.settings_page.do_click(SettingsPage.ADD_SUB_CATEGORY_ICON)
+        self.driver.execute_script("window.scrollBy(0,700);")
+        sleep(2)
+        self.settings_page.do_click(SettingsPage.CATEGORY_SUBMIT_BUTTON)
+        sleep(2)
+        # self.settings_page.do_click(SettingsPage.UPDATE_CATEGORY_EDIT_ICON)
+        # self.settings_page.do_click(SettingsPage.EDIT_CATEGORY_NAME_FIELD)
+        # self.settings_page.do_click(SettingsPage.CATEGORY_SUBMIT_BUTTON)
+        # self.settings_page.do_click(SettingsPage.UPDATE_CATEGORY_DELETE_BUTTON)
+        # self.settings_page.do_click(SettingsPage.UPDATE_CATEGORY_DELETE_BUTTON_2)
+        if self.driver.current_url == "https://datahubethstage.farmstack.co/datahub/settings/4":
+            allure.attach(self.driver.get_screenshot_as_png(), name="Adding Subcategory is successful",
+                          attachment_type=AttachmentType.PNG)
+            assert True, "Adding Subcategory is successful"
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="Failed to add sub-categories",
+                          attachment_type=AttachmentType.PNG)
+            assert False, "Failed to add sub-categories"
+
+    @allure.description("Updating Category Name")
+    @allure.severity(allure.severity_level.CRITICAL)
+    def test_Updating_Category_Name(self):
+        self.loginpage = Loginpage(self.driver)
+        sleep(3)
+        self.driver.execute_script("window.localStorage.clear();")
+        sleep(3)
+        self.driver.execute_script("window.location.reload(true);")
+        sleep(2)
+        self.driver.maximize_window()
+        self.loginpage.do_click(Loginpage.LOGIN_AS_ADMIN_BUTTON)
+        self.loginpage.do_click(Loginpage.USERNAME_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.USERNAME_FIELD, Testdata.USER_NAME)
+        self.loginpage.do_click(Loginpage.SEND_OTP_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.ENTER_OTP)
+        self.loginpage.do_sendkeys(Loginpage.ENTER_OTP, Testdata.OTP)
+        self.loginpage.do_click(Loginpage.VERIFY_OTP_BUTTON)
+        sleep(5)
+        self.settings_page = SettingsPage(self.driver)
+        self.settings_page.do_click(SettingsPage.SETTINGS_BUTTON)
+        self.settings_page.do_click(SettingsPage.CATEGORY_TAB)
+        self.settings_page.do_click(SettingsPage.UPDATE_CATEGORY_ACCORDION)
+        sleep(2)
+        self.settings_page.do_click(SettingsPage.UPDATE_CATEGORY_EDIT_ICON)
+        sleep(2)
+        self.settings_page.do_click(SettingsPage.EDIT_CATEGORY_NAME_FIELD)
+        self.settings_page.do_select_all(SettingsPage.EDIT_CATEGORY_NAME_FIELD)
+        self.settings_page.do_clear(SettingsPage.EDIT_CATEGORY_NAME_FIELD)
+        sleep(2)
+        self.settings_page.do_sendkeys(SettingsPage.EDIT_CATEGORY_NAME_FIELD, Testdata.UPDATE_CATGEORY_NAME_FIELD)
+        self.driver.execute_script("window.scrollBy(0,400);")
+        sleep(2)
+        self.settings_page.do_click(SettingsPage.UPDATE_CATEGORY_NAME_BUTTON)
+        self.driver.execute_script("window.scrollBy(0,700);")
+        sleep(2)
+        self.settings_page.do_click(SettingsPage.CATEGORY_SUBMIT_BUTTON)
+        sleep(2)
+        if self.driver.current_url == "https://datahubethstage.farmstack.co/datahub/settings/4":
+            allure.attach(self.driver.get_screenshot_as_png(), name="Updating Category Name is successful",
+                          attachment_type=AttachmentType.PNG)
+            assert True, "Updating Category Name is successful"
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="Failed to Updating Category Name",
+                          attachment_type=AttachmentType.PNG)
+            assert False, "Failed to Updating Category Name"
+
+    @allure.description("Delete Icon Category ")
+    @allure.severity(allure.severity_level.CRITICAL)
+    def test_Delete_Icon_Category(self):
+        self.loginpage = Loginpage(self.driver)
+        sleep(3)
+        self.driver.execute_script("window.localStorage.clear();")
+        sleep(3)
+        self.driver.execute_script("window.location.reload(true);")
+        sleep(2)
+        self.driver.maximize_window()
+        self.loginpage.do_click(Loginpage.LOGIN_AS_ADMIN_BUTTON)
+        self.loginpage.do_click(Loginpage.USERNAME_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.USERNAME_FIELD, Testdata.USER_NAME)
+        self.loginpage.do_click(Loginpage.SEND_OTP_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.ENTER_OTP)
+        self.loginpage.do_sendkeys(Loginpage.ENTER_OTP, Testdata.OTP)
+        self.loginpage.do_click(Loginpage.VERIFY_OTP_BUTTON)
+        sleep(5)
+        self.settings_page = SettingsPage(self.driver)
+        self.settings_page.do_click(SettingsPage.SETTINGS_BUTTON)
+        self.settings_page.do_click(SettingsPage.CATEGORY_TAB)
+        sleep(2)
+        self.settings_page.do_click(SettingsPage.UPDATE_CATEGORY_DELETE_ICON)
+        # self.settings_page.do_click(SettingsPage.UPDATE_CATEGORY_ACCORDION3)
+        # sleep(2)
+        self.settings_page.do_click(SettingsPage.UPDATE_CATEGORY_POPPER_BUTTON_2)
+        self.driver.execute_script("window.scrollBy(0,500);")
+        sleep(2)
+        self.settings_page.do_click(SettingsPage.CATEGORY_SUBMIT_BUTTON)
+        sleep(2)
+        if self.driver.current_url == "https://datahubethstage.farmstack.co/datahub/settings/4":
+            allure.attach(self.driver.get_screenshot_as_png(), name="Deleting Category is successful",
+                          attachment_type=AttachmentType.PNG)
+            assert True, "Deleting Category is successful"
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="Failed to Delete Category",
+                          attachment_type=AttachmentType.PNG)
+            assert False, "Failed to Delete Category"
+    #
+
+    @allure.description("Delete Button Category ")
+    @allure.severity(allure.severity_level.CRITICAL)
+    def test_Delete_Button_Category(self):
+        self.loginpage = Loginpage(self.driver)
+        sleep(3)
+        self.driver.execute_script("window.localStorage.clear();")
+        sleep(3)
+        self.driver.execute_script("window.location.reload(true);")
+        sleep(2)
+        self.driver.maximize_window()
+        self.loginpage.do_click(Loginpage.LOGIN_AS_ADMIN_BUTTON)
+        self.loginpage.do_click(Loginpage.USERNAME_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.USERNAME_FIELD, Testdata.USER_NAME)
+        self.loginpage.do_click(Loginpage.SEND_OTP_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.ENTER_OTP)
+        self.loginpage.do_sendkeys(Loginpage.ENTER_OTP, Testdata.OTP)
+        self.loginpage.do_click(Loginpage.VERIFY_OTP_BUTTON)
+        sleep(5)
+        self.settings_page = SettingsPage(self.driver)
+        self.settings_page.do_click(SettingsPage.SETTINGS_BUTTON)
+        self.settings_page.do_click(SettingsPage.CATEGORY_TAB)
+        sleep(2)
+        # self.settings_page.do_click(SettingsPage.UPDATE_CATEGORY_DELETE_ICON)
+        self.settings_page.do_click(SettingsPage.UPDATE_CATEGORY_ACCORDION3)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,300);")
+        sleep(2)
+        self.settings_page.do_click(SettingsPage.DELETE_CATEGORY_BUTTON)
+        sleep(2)
+        self.settings_page.do_click(SettingsPage.UPDATE_CATEGORY_POPPER_BUTTON_2)
+        self.driver.execute_script("window.scrollBy(0,500);")
+        sleep(2)
+        self.settings_page.do_click(SettingsPage.CATEGORY_SUBMIT_BUTTON)
+        sleep(2)
+        if self.driver.current_url == "https://datahubethstage.farmstack.co/datahub/settings/4":
+            allure.attach(self.driver.get_screenshot_as_png(), name="Deleting Category is successful",
+                          attachment_type=AttachmentType.PNG)
+            assert True, "Deleting Category is successful"
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="Failed to Delete Category",
+                          attachment_type=AttachmentType.PNG)
+            assert False, "Failed to Delete Category"
+    # @allure.description("Cancel Button in Category ")
+    # @allure.severity(allure.severity_level.CRITICAL)
+    # def test_Cancel_Button_Category(self):
+    #     self.loginpage = Loginpage(self.driver)
+    #     sleep(3)
+    #     self.driver.execute_script("window.localStorage.clear();")
+    #     sleep(3)
+    #     self.driver.execute_script("window.location.reload(true);")
+    #     sleep(2)
+    #     self.driver.maximize_window()
+    #     self.loginpage.do_click(Loginpage.LOGIN_AS_ADMIN_BUTTON)
+    #     self.loginpage.do_click(Loginpage.USERNAME_FIELD)
+    #     self.loginpage.do_sendkeys(Loginpage.USERNAME_FIELD, Testdata.USER_NAME)
+    #     self.loginpage.do_click(Loginpage.SEND_OTP_BUTTON)
+    #     sleep(2)
+    #     self.loginpage.do_click(Loginpage.ENTER_OTP)
+    #     self.loginpage.do_sendkeys(Loginpage.ENTER_OTP, Testdata.OTP)
+    #     self.loginpage.do_click(Loginpage.VERIFY_OTP_BUTTON)
+    #     sleep(5)
+    #     self.settings_page = SettingsPage(self.driver)
+    #     self.settings_page.do_click(SettingsPage.SETTINGS_BUTTON)
+    #     self.settings_page.do_click(SettingsPage.CATEGORY_TAB)
+    #     sleep(2)
+    #     self.driver.execute_script("window.scrollBy(0,500);")
+    #     sleep(2)
+    #     self.settings_page.do_click(SettingsPage.CANCEL_BUTTON_CATEGORY)
+    #     sleep(2)
+    #     if self.driver.current_url == "https://datahubethstage.farmstack.co/datahub/new_datasets":
+    #         allure.attach(self.driver.get_screenshot_as_png(), name="Cancel Button is visible",
+    #                       attachment_type=AttachmentType.PNG)
+    #         assert True, "Cancel Button is visible"
+    #     else:
+    #         allure.attach(self.driver.get_screenshot_as_png(), name="Cancel Button is invisible",
+    #                       attachment_type=AttachmentType.PNG)
+    #         assert False, "Cancel Button is invisible"
+
+    @allure.description("Adding Datapoint_category")
+    @allure.severity(allure.severity_level.CRITICAL)
+    def test_adding_datapoint_category(self):
+        self.loginpage = Loginpage(self.driver)
+        sleep(3)
+        self.driver.execute_script("window.localStorage.clear();")
+        sleep(3)
+        self.driver.execute_script("window.location.reload(true);")
+        sleep(2)
+        self.driver.maximize_window()
+        self.loginpage.do_click(Loginpage.LOGIN_AS_ADMIN_BUTTON)
+        self.loginpage.do_click(Loginpage.USERNAME_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.USERNAME_FIELD, Testdata.USER_NAME)
+        self.loginpage.do_click(Loginpage.SEND_OTP_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.ENTER_OTP)
+        self.loginpage.do_sendkeys(Loginpage.ENTER_OTP, Testdata.OTP)
+        self.loginpage.do_click(Loginpage.VERIFY_OTP_BUTTON)
+        sleep(5)
+        self.settings_page = SettingsPage(self.driver)
+        self.settings_page.do_click(SettingsPage.SETTINGS_BUTTON)
+        self.settings_page.do_click(SettingsPage.DATAPOINT_TAB)
+        self.settings_page.do_click(SettingsPage.DATAPOINT_CATEGORY_NAME_FIELD)
+        self.settings_page.do_sendkeys(SettingsPage.DATAPOINT_CATEGORY_NAME_FIELD, Testdata.DATAPOINT_CATEGORY_NAME)
+        self.settings_page.do_click(SettingsPage.DATAPOINT_CATEGORY_DESCRIPTION_FIELD)
+        self.settings_page.do_sendkeys(SettingsPage.DATAPOINT_CATEGORY_DESCRIPTION_FIELD,
+                                       Testdata.DATAPOINT_CATEGORY_DESCRIPTION)
+        self.settings_page.do_click(SettingsPage.DATAPOINT_CATEGORY_ADD_BUTTON)
+        self.driver.execute_script("window.scrollBy(0,900);")
+        sleep(2)
+        self.settings_page.do_click(SettingsPage.DATAPOINT_CATEGORY_SUBMIT_BUTTON)
+
+        if self.driver.current_url == "https://datahubethstage.farmstack.co/datahub/settings/5":
+            allure.attach(self.driver.get_screenshot_as_png(), name="Settings button is visible",
+                          attachment_type=AttachmentType.PNG)
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="Settings button is invisible",
+                          attachment_type=AttachmentType.PNG)
+
+    # @allure.description("Adding Datapoint Attributes")
+    # @allure.severity(allure.severity_level.CRITICAL)
+    # def test_Adding_Datapoint_Attributes(self):
+    #     self.loginpage = Loginpage(self.driver)
+    #     sleep(2)
+    #     self.driver.execute_script("window.localStorage.clear();")
+    #     self.driver.maximize_window()
+    #     self.loginpage.do_click(Loginpage.LOGIN_AS_ADMIN_BUTTON)
+    #     self.loginpage.do_click(Loginpage.USERNAME_FIELD)
+    #     self.loginpage.do_sendkeys(Loginpage.USERNAME_FIELD, Testdata.USER_NAME)
+    #     self.loginpage.do_click(Loginpage.SEND_OTP_BUTTON)
+    #     sleep(2)
+    #     self.loginpage.do_click(Loginpage.ENTER_OTP)
+    #     self.loginpage.do_sendkeys(Loginpage.ENTER_OTP, Testdata.OTP)
+    #     self.loginpage.do_click(Loginpage.VERIFY_OTP_BUTTON)
+    #     sleep(5)
+    #     self.settings_page = SettingsPage(self.driver)
+    #     self.settings_page.do_click(SettingsPage.SETTINGS_BUTTON)
+    #     self.settings_page.do_click(SettingsPage.DATAPOINT_TAB)
+    #     sleep(2)
+    #     self.driver.execute_script("window.scrollBy(0,700);")
+    #     sleep(2)
+    #     self.settings_page.do_click(SettingsPage.UPDATE_DATAPOINT_CATEGORY)
+    #     sleep(2)
+    #     self.driver.execute_script("window.scrollBy(0,300);")
+    #     sleep(2)
+    #     # self.settings_page.do_click(SettingsPage.ADD_DATAPOINT_ATTRIBUTE_NAME_FIELD)
+    #     # sleep(2)
+    #     self.settings_page.do_click_ADD_DATAPOINT_ATTRIBUTE_NAME_FIELD()
+    #     sleep(2)
+    #     # self.settings_page.do_sendkeys(SettingsPage.ADD_DATAPOINT_ATTRIBUTE_NAME_FIELD, Testdata.ADD_DATAPOINT_ATTRIBUTES)
+    #     # sleep(2)
+    #     # self.settings_page.do_click(SettingsPage.ADD_DATAPOINT_ATTRIBUTE_ICON)
+    #     # sleep(2)
+    #     # self.driver.execute_script("window.scrollBy(0,500);")
+    #     # sleep(2)
+    #     # self.settings_page.do_click(SettingsPage.DATAPOINT_CATEGORY_SUBMIT_BUTTON)
+    #     # self.settings_page.do_click(SettingsPage.UPDATE_DATAPOINT_CATEGORY_EDIT_BUTTON)
+    #     # self.settings_page.do_click(SettingsPage.EDIT_DATAPOINT_CATEGORY_NAME_FIELD)
+    #     # self.settings_page.do_select_all(SettingsPage.EDIT_DATAPOINT_CATEGORY_NAME_FIELD)
+    #     # self.settings_page.do_clear(SettingsPage.EDIT_DATAPOINT_CATEGORY_NAME_FIELD)
+    #     # self.settings_page.do_sendkeys(SettingsPage.EDIT_DATAPOINT_CATEGORY_NAME_FIELD,Testdata.UPDATED_DATAPOINT_CATEGORY_NAME)
+    #     # self.settings_page.do_click(SettingsPage.UPDATE_DATAPOINT_CATEGORY_NAME_BUTTON)
+    #     # self.settings_page.do_click(SettingsPage.DATAPOINT_CATEGORY_SUBMIT_BUTTON)
+    #     # self.settings_page.do_click(SettingsPage.UPDATE_CATEGORY_DELETE_BUTTON)
+    #     # self.settings_page.do_click(SettingsPage.UPDATE_CATEGORY_DELETE_BUTTON_2)
+    #     if self.driver.current_url == "https://datahubethstage.farmstack.co/datahub/settings/4":
+    #         allure.attach(self.driver.get_screenshot_as_png(), name="Adding Datapoint Attributes is successful",
+    #                       attachment_type=AttachmentType.PNG)
+    #         assert True,"Adding Datapoint Attributes is successful"
+    #     else:
+    #         allure.attach(self.driver.get_screenshot_as_png(), name="Failed to add Datapoint Attributes ",
+    #                       attachment_type=AttachmentType.PNG)
+    #         assert False,"Failed to add Datapoint Attributes"
Index: Testcases/test_connectorpage.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Testcases/test_connectorpage.py b/Testcases/test_connectorpage.py
new file mode 100644
--- /dev/null	(date 1687244071661)
+++ b/Testcases/test_connectorpage.py	(date 1687244071661)
@@ -0,0 +1,116 @@
+from time import sleep
+from selenium.webdriver.support.ui import WebDriverWait
+from selenium.webdriver.support import expected_conditions as EC
+from selenium.webdriver.common.action_chains import ActionChains
+from selenium.webdriver.common.by import By
+
+from Pageobjects.Connectorpage import Connectorspage
+from Pageobjects.Homepage import Homepage
+from Pageobjects.Loginpage import Loginpage
+from Testcases.test_base import Basetest
+from Configurations.config import Testdata
+from Testcases.confitest import init_driver
+from selenium import webdriver
+
+from time import sleep
+
+import pytest
+import allure
+from allure_commons.types import AttachmentType
+
+from Configurations.config import Testdata
+from Pageobjects.Loginpage import Loginpage
+from Testcases.confitest import init_driver
+from Testcases.test_base import Basetest
+
+
+class Test_add_connector(Basetest):
+
+    @allure.description("Testing Adding Connector")
+    @allure.severity(allure.severity_level.CRITICAL)
+    def test_add_connector(self):
+        self.loginpage = Loginpage(self.driver)
+        sleep(2)
+        self.driver.execute_script("window.localStorage.clear();")
+        self.driver.maximize_window()
+        self.loginpage.do_click(Loginpage.LOGIN_AS_ADMIN_BUTTON)
+        self.loginpage.do_click(Loginpage.USERNAME_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.USERNAME_FIELD, Testdata.USER_NAME)
+        self.loginpage.do_click(Loginpage.SEND_OTP_BUTTON)
+        sleep(2)
+        self.loginpage.do_click(Loginpage.ENTER_OTP)
+        self.loginpage.do_sendkeys(Loginpage.ENTER_OTP, Testdata.OTP)
+        self.loginpage.do_click(Loginpage.VERIFY_OTP_BUTTON)
+        sleep(2)
+        self.connectors_page = Connectorspage(self.driver)
+        self.connectors_page.do_click(Connectorspage.CONNECTOR_BUTTON)
+        sleep(2)
+        self.connectors_page.do_click(Connectorspage.ADD_CONNECTOR_BUTTON)
+        self.connectors_page.do_click(Connectorspage.CONNECTOR_NAME_FIELD)
+        self.connectors_page.do_sendkeys(Connectorspage.CONNECTOR_NAME_FIELD, Testdata.CONNECTOR_NAME)
+        self.connectors_page.do_click(Connectorspage.CONNECTOR_DESCRIPTION_FIELD)
+        self.connectors_page.do_sendkeys(Connectorspage.CONNECTOR_DESCRIPTION_FIELD, Testdata.CONNECTOR_DESCRIPTION)
+        self.driver.execute_script("window.scrollBy(0,300);")
+        sleep(2)
+        self.connectors_page.do_click(Connectorspage.SELECT_ORGANIZATION_DROPDOWN)
+        self.connectors_page.do_click(Connectorspage.SELECT_ORGANIZATION_1)
+        self.connectors_page.do_click(Connectorspage.SELECT_DATASET_DROPDOWN)
+        sleep(2)
+        self.connectors_page.do_click(Connectorspage.SELECT_DATASET_1)
+        self.connectors_page.do_click(Connectorspage.SELECT_FILE_DROPDOWN)
+        self.connectors_page.do_click(Connectorspage.SELECT_DATASET_FILE)
+        self.connectors_page.do_click(Connectorspage.ADD_BUTTON)
+        self.driver.execute_script("window.scrollBy(0,500);")
+        sleep(2)
+        self.connectors_page.do_clickable_Checkbox_Connectors()
+        sleep(3)
+        self.connectors_page.do_scroll_up(Connectorspage.CONNECTOR_NAME_FIELD)
+        # self.driver.execute_script("window.scrollBy(0,-3000);")
+        self.connectors_page.do_click(Connectorspage.SELECT_ORGANIZATION_DROPDOWN)
+        self.connectors_page.do_click(Connectorspage.SELECT_ORGANIZATION_2)
+        sleep(2)
+        self.connectors_page.do_click(Connectorspage.SELECT_DATASET_DROPDOWN)
+        self.connectors_page.do_click(Connectorspage.SELECT_DATASET_2)
+        self.connectors_page.do_click(Connectorspage.SELECT_FILE_DROPDOWN)
+        self.connectors_page.do_click(Connectorspage.SELECT_DATASET_FILE)
+        self.connectors_page.do_click(Connectorspage.ADD_BUTTON)
+        sleep(3)
+        self.driver.execute_script("window.scrollBy(0,1100);")
+        sleep(2)
+        self.connectors_page.do_clickable_Checkbox_Connectors_2()
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,-300);")
+        sleep(2)
+        self.connectors_page.do_click(Connectorspage.JOIN_BY_ICON)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,600);")
+        self.connectors_page.do_click(Connectorspage.LEFT_JOIN_FIELD)
+        sleep(2)
+        self.connectors_page.do_click(Connectorspage.SELECT_ANY_COLUMN_LEFT)
+        sleep(2)
+        self.connectors_page.do_click(Connectorspage.RIGHT_JOIN_FIELD)
+        sleep(2)
+        self.connectors_page.do_click(Connectorspage.SELECT_ANY_COLUMN_RIGHT)
+        sleep(2)
+        self.connectors_page.do_click(Connectorspage.JOIN_TYPE_ICON)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,300);")
+        sleep(2)
+        self.connectors_page.do_click(Connectorspage.APPLY_BUTTON)
+        print("IMRAN")
+        sleep(3)
+        self.driver.execute_script("window.scrollBy(0,1300);")
+        sleep(2)
+        self.connectors_page.do_click(Connectorspage.DOWNLOAD_BUTTON)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,300);")
+        self.connectors_page.do_click(Connectorspage.SAVE_CONNECTOR_BUTTON)
+        sleep(3)
+        if self.driver.current_url == "https://datahubethstage.farmstack.co/datahub/connectors":
+            allure.attach(self.driver.get_screenshot_as_png(), name="Creating connector is successfully",
+                          attachment_type=AttachmentType.PNG)
+            assert True, "Creating connector is successfully"
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="Creating connector is failed",
+                          attachment_type=AttachmentType.PNG)
+            assert False, "Creating connector is failed"
Index: Testcases/test_base.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Testcases/test_base.py b/Testcases/test_base.py
new file mode 100644
--- /dev/null	(date 1690437371199)
+++ b/Testcases/test_base.py	(date 1690437371199)
@@ -0,0 +1,7 @@
+import pytest
+
+#
+# @pytest.mark.flaky(reruns=5)
+@pytest.mark.usefixtures("init_driver")
+class Basetest:
+    pass
Index: Testcases/test_homepage.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Testcases/test_homepage.py b/Testcases/test_homepage.py
new file mode 100644
--- /dev/null	(date 1690788553826)
+++ b/Testcases/test_homepage.py	(date 1690788553826)
@@ -0,0 +1,412 @@
+from time import sleep
+
+from selenium.webdriver.support.ui import WebDriverWait
+from selenium.webdriver.support import expected_conditions as EC
+from Pageobjects.Homepage import Homepage
+from Pageobjects.Loginpage import Loginpage
+from Testcases.test_base import Basetest
+from Configurations.config import Testdata
+from Testcases.confitest import init_driver
+import allure
+import allure_pytest
+from allure_commons.types import AttachmentType
+
+
+class Test_homepage(Basetest):
+    @allure.description("Testing Hompage Title")
+    @allure.severity(allure.severity_level.CRITICAL)
+    def test_Home_page_title(self):
+        self.Homepage = Loginpage(self.driver)
+        title = self.Homepage.get_title(Testdata.HOMEPAGE_TITLE)
+        print(title)
+        sleep(2)
+        if self.driver.title == "DataHub":
+            allure.attach(self.driver.get_screenshot_as_png(), name="Datahub title is present",
+                          attachment_type=AttachmentType.PNG)
+            assert True, "Datahub title is present"
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="Datahub title is absent",
+                          attachment_type=AttachmentType.PNG)
+            assert False, "Datahub title is absent"
+
+    @allure.description("Testing Participants Tab")
+    @allure.severity(allure.severity_level.CRITICAL)
+    def test_participants_tab(self):
+        self.loginpage = Loginpage(self.driver)
+        sleep(3)
+        self.driver.execute_script("window.localStorage.clear();")
+        sleep(3)
+        self.driver.execute_script("window.location.reload(true);")
+        sleep(2)
+        self.loginpage.driver.maximize_window()
+        self.loginpage.do_click(Loginpage.LOGIN_AS_ADMIN_BUTTON)
+        self.loginpage.do_click(Loginpage.USERNAME_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.USERNAME_FIELD, Testdata.USER_NAME)
+        self.loginpage.do_click(Loginpage.SEND_OTP_BUTTON)
+        self.loginpage.do_click(Loginpage.ENTER_OTP)
+        self.loginpage.do_sendkeys(Loginpage.ENTER_OTP, Testdata.OTP)
+        self.loginpage.do_click(Loginpage.VERIFY_OTP_BUTTON)
+        homepage = Homepage(self.driver)
+        bool = homepage.is_visible(Homepage.PARTICIPANT_TAB)
+        print(bool)
+        homepage.do_click(Homepage.PARTICIPANT_TAB)
+        sleep(2)
+        if self.driver.current_url == "https://datahubethstage.farmstack.co/datahub/participants":
+            allure.attach(self.driver.get_screenshot_as_png(), name="Participants tab is visible",
+                          attachment_type=AttachmentType.PNG)
+            assert True, "Participants tab is visible"
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="Participants tab is invisible",
+                          attachment_type=AttachmentType.PNG)
+            assert False, "Participants tab is invisible"
+        homepage.do_click(Homepage.SIGN_OUT_BUTTON)
+        print("Completed")
+
+    @allure.description("Testing Dashboard Tab")
+    @allure.severity(allure.severity_level.CRITICAL)
+    def test_Dashboard_tab(self):
+        self.loginpage = Loginpage(self.driver)
+        sleep(3)
+        self.driver.execute_script("window.localStorage.clear();")
+        sleep(3)
+        self.driver.execute_script("window.location.reload(true);")
+        sleep(2)
+        self.loginpage.driver.maximize_window()
+        self.loginpage.do_click(Loginpage.LOGIN_AS_ADMIN_BUTTON)
+        self.loginpage.do_click(Loginpage.USERNAME_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.USERNAME_FIELD, Testdata.USER_NAME)
+        self.loginpage.do_click(Loginpage.SEND_OTP_BUTTON)
+        self.loginpage.do_click(Loginpage.ENTER_OTP)
+        self.loginpage.do_sendkeys(Loginpage.ENTER_OTP, Testdata.OTP)
+        self.loginpage.do_click(Loginpage.VERIFY_OTP_BUTTON)
+        homepage = Homepage(self.driver)
+        bool = homepage.is_visible(Homepage.DASHBOARD_TAB)
+        print(bool)
+        homepage.do_click(Homepage.DASHBOARD_TAB)
+        sleep(6)
+        if self.driver.current_url == "https://datahubethstage.farmstack.co/datahub/new_dashboard":
+            allure.attach(self.driver.get_screenshot_as_png(), name="Dashboard tab is visible",
+                          attachment_type=AttachmentType.PNG)
+            assert True, "Dashboard tab is visible"
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="Dashboard tab is invisible",
+                          attachment_type=AttachmentType.PNG)
+            assert False, "Dashboard tab is invisible"
+        homepage.do_click(Homepage.SIGN_OUT_BUTTON)
+        print("Completed")
+
+    @allure.description("Testing Datasets Tab")
+    @allure.severity(allure.severity_level.CRITICAL)
+    def test_Datasets_tab(self):
+        self.loginpage = Loginpage(self.driver)
+        sleep(3)
+        self.driver.execute_script("window.localStorage.clear();")
+        sleep(3)
+        self.driver.execute_script("window.location.reload(true);")
+        sleep(2)
+        self.loginpage.driver.maximize_window()
+        self.loginpage.do_click(Loginpage.LOGIN_AS_ADMIN_BUTTON)
+        self.loginpage.do_click(Loginpage.USERNAME_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.USERNAME_FIELD, Testdata.USER_NAME)
+        self.loginpage.do_click(Loginpage.SEND_OTP_BUTTON)
+        self.loginpage.do_click(Loginpage.ENTER_OTP)
+        self.loginpage.do_sendkeys(Loginpage.ENTER_OTP, Testdata.OTP)
+        self.loginpage.do_click(Loginpage.VERIFY_OTP_BUTTON)
+        homepage = Homepage(self.driver)
+        bool = homepage.is_visible(Homepage.DATASETS_TAB)
+        print(bool)
+        homepage.do_click(Homepage.DATASETS_TAB)
+        sleep(2)
+        if self.driver.current_url == "https://datahubethstage.farmstack.co/datahub/new_datasets":
+            allure.attach(self.driver.get_screenshot_as_png(), name="Datasets tab is visible",
+                          attachment_type=AttachmentType.PNG)
+            assert True, "Datasets tab is visible"
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="Datasets tab is invisible",
+                          attachment_type=AttachmentType.PNG)
+            assert False, "Datasets tab is invisible"
+        homepage.do_click(Homepage.SIGN_OUT_BUTTON)
+        print("Completed")
+
+    @allure.description("Testing Connectors Tab")
+    @allure.severity(allure.severity_level.CRITICAL)
+    def test_Connectors_tab(self):
+        self.loginpage = Loginpage(self.driver)
+        sleep(3)
+        self.driver.execute_script("window.localStorage.clear();")
+        sleep(3)
+        self.driver.execute_script("window.location.reload(true);")
+        sleep(2)
+        self.loginpage.driver.maximize_window()
+        self.loginpage.do_click(Loginpage.LOGIN_AS_ADMIN_BUTTON)
+        self.loginpage.do_click(Loginpage.USERNAME_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.USERNAME_FIELD, Testdata.USER_NAME)
+        self.loginpage.do_click(Loginpage.SEND_OTP_BUTTON)
+        self.loginpage.do_click(Loginpage.ENTER_OTP)
+        self.loginpage.do_sendkeys(Loginpage.ENTER_OTP, Testdata.OTP)
+        self.loginpage.do_click(Loginpage.VERIFY_OTP_BUTTON)
+        homepage = Homepage(self.driver)
+        bool = homepage.is_visible(Homepage.CONNECTORS_TAB)
+        print(bool)
+        homepage.do_click(Homepage.CONNECTORS_TAB)
+        sleep(2)
+        if self.driver.current_url == "https://datahubethstage.farmstack.co/datahub/connectors":
+            allure.attach(self.driver.get_screenshot_as_png(), name="Connectors tab is visible",
+                          attachment_type=AttachmentType.PNG)
+            assert True, "Connectors tab is visible"
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="Connectors tab is invisible",
+                          attachment_type=AttachmentType.PNG)
+            assert False, "Connectors tab is invisible"
+        homepage.do_click(Homepage.SIGN_OUT_BUTTON)
+        print("Completed")
+
+    @allure.description("Testing Settings tab")
+    @allure.severity(allure.severity_level.CRITICAL)
+    def test_settings_tab(self):
+        self.loginpage = Loginpage(self.driver)
+        sleep(3)
+        self.driver.execute_script("window.localStorage.clear();")
+        sleep(3)
+        self.driver.execute_script("window.location.reload(true);")
+        sleep(2)
+        self.loginpage.driver.maximize_window()
+        self.loginpage.do_click(Loginpage.LOGIN_AS_ADMIN_BUTTON)
+        self.loginpage.do_click(Loginpage.USERNAME_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.USERNAME_FIELD, Testdata.USER_NAME)
+        self.loginpage.do_click(Loginpage.SEND_OTP_BUTTON)
+        self.loginpage.do_click(Loginpage.ENTER_OTP)
+        self.loginpage.do_sendkeys(Loginpage.ENTER_OTP, Testdata.OTP)
+        self.loginpage.do_click(Loginpage.VERIFY_OTP_BUTTON)
+        homepage = Homepage(self.driver)
+        bool = homepage.is_visible(Homepage.SETTINGS_BUTTON)
+        print(bool)
+        homepage.do_click(Homepage.SETTINGS_BUTTON)
+        sleep(2)
+        if self.driver.current_url == "https://datahubethstage.farmstack.co/datahub/settings/1":
+            allure.attach(self.driver.get_screenshot_as_png(), name="Settings tab is visible",
+                          attachment_type=AttachmentType.PNG)
+            assert True, "Settings tab is visible"
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="Settings tab is invisible",
+                          attachment_type=AttachmentType.PNG)
+            assert False, "Settings tab is invisible"
+        homepage.do_click(Homepage.SIGN_OUT_BUTTON)
+        print("Completed")
+
+    @allure.description("Testing sign_out Icon")
+    @allure.severity(allure.severity_level.CRITICAL)
+    def test_sign_out_button(self):
+        self.loginpage = Loginpage(self.driver)
+        sleep(3)
+        self.driver.execute_script("window.localStorage.clear();")
+        sleep(3)
+        self.driver.execute_script("window.location.reload(true);")
+        sleep(2)
+        self.driver.maximize_window()
+        self.loginpage.do_click(Loginpage.LOGIN_AS_ADMIN_BUTTON)
+        self.loginpage.do_click(Loginpage.USERNAME_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.USERNAME_FIELD, Testdata.USER_NAME)
+        self.loginpage.do_click(Loginpage.SEND_OTP_BUTTON)
+        self.loginpage.do_click(Loginpage.ENTER_OTP)
+        self.loginpage.do_sendkeys(Loginpage.ENTER_OTP, Testdata.OTP)
+        self.loginpage.do_click(Loginpage.VERIFY_OTP_BUTTON)
+        homepage = Homepage(self.driver)
+        bool = homepage.is_enabled(Homepage.SIGN_OUT_BUTTON)
+        print(bool)
+        sleep(2)
+        if self.driver.current_url == "https://datahubethstage.farmstack.co/datahub/new_datasets":
+            allure.attach(self.driver.get_screenshot_as_png(), name="Sign out button is present",
+                          attachment_type=AttachmentType.PNG)
+            assert True, "Sign out button is present"
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="Sign out button is absent",
+                          attachment_type=AttachmentType.PNG)
+            assert False, "Sign out button is absent"
+        homepage.do_click(Homepage.SIGN_OUT_BUTTON)
+        print("Completed")
+
+    @allure.description("Testing get_started button")
+    @allure.severity(allure.severity_level.NORMAL)
+    def test_get_started_button(self):
+        self.loginpage = Loginpage(self.driver)
+        sleep(3)
+        self.driver.execute_script("window.localStorage.clear();")
+        sleep(3)
+        self.driver.execute_script("window.location.reload(true);")
+        sleep(2)
+        self.loginpage.driver.maximize_window()
+        self.loginpage.do_click(Loginpage.LOGIN_AS_ADMIN_BUTTON)
+        self.loginpage.do_click(Loginpage.USERNAME_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.USERNAME_FIELD, Testdata.USER_NAME)
+        self.loginpage.do_click(Loginpage.SEND_OTP_BUTTON)
+        self.loginpage.do_click(Loginpage.ENTER_OTP)
+        self.loginpage.do_sendkeys(Loginpage.ENTER_OTP, Testdata.OTP)
+        self.loginpage.do_click(Loginpage.VERIFY_OTP_BUTTON)
+        homepage = Homepage(self.driver)
+        homepage.do_click(Homepage.HOME_BUTTON)
+        sleep(3)
+        homepage.do_click(Homepage.GET_STARTED_BUTTON_1)
+        sleep(2)
+        if self.driver.current_url == "https://datahubethstage.farmstack.co/home/get-started":
+            allure.attach(self.driver.get_screenshot_as_png(), name="Get_started button is clickable",
+                          attachment_type=AttachmentType.PNG)
+            assert True, "Get_started button is clickable"
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="Get_started button is not clickable",
+                          attachment_type=AttachmentType.PNG)
+            assert False, "Get_started button is not clickable"
+        homepage.do_click(Homepage.SIGN_OUT_BUTTON)
+        print("Completed")
+
+    #
+    @allure.description("Testing view_all_datasets Button")
+    @allure.severity(allure.severity_level.CRITICAL)
+    def test_view_all_datasets_button(self):
+        self.loginpage = Loginpage(self.driver)
+        sleep(3)
+        self.driver.execute_script("window.localStorage.clear();")
+        sleep(3)
+        self.driver.execute_script("window.location.reload(true);")
+        sleep(2)
+        self.loginpage.driver.maximize_window()
+        self.loginpage.do_click(Loginpage.LOGIN_AS_ADMIN_BUTTON)
+        self.loginpage.do_click(Loginpage.USERNAME_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.USERNAME_FIELD, Testdata.USER_NAME)
+        self.loginpage.do_click(Loginpage.SEND_OTP_BUTTON)
+        self.loginpage.do_click(Loginpage.ENTER_OTP)
+        self.loginpage.do_sendkeys(Loginpage.ENTER_OTP, Testdata.OTP)
+        self.loginpage.do_click(Loginpage.VERIFY_OTP_BUTTON)
+        homepage = Homepage(self.driver)
+        homepage.do_click(Homepage.HOME_BUTTON)
+        sleep(3)
+        self.driver.execute_script("window.scrollBy(0,1000);")
+        sleep(2)
+        homepage.do_click(Homepage.VIEW_ALL_DATASETS_BUTTON)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,500);")
+        sleep(3)
+        if self.driver.current_url == "https://datahubethstage.farmstack.co/home/datasets":
+            allure.attach(self.driver.get_screenshot_as_png(), name="View all datasets is clickable",
+                          attachment_type=AttachmentType.PNG)
+            assert True, "View all datasets is clickable"
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="View all datasets is not clickable",
+                          attachment_type=AttachmentType.PNG)
+            assert False, "View all datasets is not clickable"
+        homepage.do_click(Homepage.SIGN_OUT_BUTTON)
+        print("Completed")
+
+    @allure.description("Testing view_all_costeward Button")
+    @allure.severity(allure.severity_level.CRITICAL)
+    def test_view_all_costeward_button(self):
+        self.loginpage = Loginpage(self.driver)
+        sleep(3)
+        self.driver.execute_script("window.localStorage.clear();")
+        sleep(3)
+        self.driver.execute_script("window.location.reload(true);")
+        sleep(2)
+        self.loginpage.driver.maximize_window()
+        self.loginpage.do_click(Loginpage.LOGIN_AS_ADMIN_BUTTON)
+        self.loginpage.do_click(Loginpage.USERNAME_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.USERNAME_FIELD, Testdata.USER_NAME)
+        self.loginpage.do_click(Loginpage.SEND_OTP_BUTTON)
+        self.loginpage.do_click(Loginpage.ENTER_OTP)
+        self.loginpage.do_sendkeys(Loginpage.ENTER_OTP, Testdata.OTP)
+        self.loginpage.do_click(Loginpage.VERIFY_OTP_BUTTON)
+        homepage = Homepage(self.driver)
+        homepage.do_click(Homepage.HOME_BUTTON)
+        self.driver.execute_script("window.scrollBy(0,2000);")
+        sleep(2)
+        homepage.do_click(Homepage.VIEW_ALL_CO_STEWARDS_BUTTON)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,500);")
+        sleep(2)
+        if self.driver.current_url == "https://datahubethstage.farmstack.co/home/costeward":
+            allure.attach(self.driver.get_screenshot_as_png(), name="View_all_costeward Button is clickable",
+                          attachment_type=AttachmentType.PNG)
+            assert True, "View_all_costeward Button is clickable"
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="View_all_costeward Button is not clickable",
+                          attachment_type=AttachmentType.PNG)
+            assert False, "View_all_costeward Button is not clickable"
+        homepage.do_click(Homepage.SIGN_OUT_BUTTON)
+        print("Completed")
+
+    @allure.description("Testing view_all_participants Button")
+    @allure.severity(allure.severity_level.CRITICAL)
+    def test_view_all_participants_button(self):
+        self.loginpage = Loginpage(self.driver)
+        sleep(3)
+        self.driver.execute_script("window.localStorage.clear();")
+        sleep(3)
+        self.driver.execute_script("window.location.reload(true);")
+        sleep(2)
+        self.loginpage.driver.maximize_window()
+        self.loginpage.do_click(Loginpage.LOGIN_AS_ADMIN_BUTTON)
+        self.loginpage.do_click(Loginpage.USERNAME_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.USERNAME_FIELD, Testdata.USER_NAME)
+        self.loginpage.do_click(Loginpage.SEND_OTP_BUTTON)
+        self.loginpage.do_click(Loginpage.ENTER_OTP)
+        self.loginpage.do_sendkeys(Loginpage.ENTER_OTP, Testdata.OTP)
+        self.loginpage.do_click(Loginpage.VERIFY_OTP_BUTTON)
+        homepage = Homepage(self.driver)
+        homepage.do_click(Homepage.HOME_BUTTON)
+        sleep(2)
+        homepage.do_scroll_down(Homepage.VIEW_ALL_PARTICIPANTS_BUTTON)
+        self.driver.execute_script("window.scrollBy(0,2500);")
+        sleep(2)
+        homepage.do_click(Homepage.VIEW_ALL_PARTICIPANTS_BUTTON)
+        sleep(2)
+        self.driver.execute_script("window.scrollBy(0,500);")
+        sleep(2)
+        if self.driver.current_url == "https://datahubethstage.farmstack.co/home/participants":
+            allure.attach(self.driver.get_screenshot_as_png(), name="View_all_participants Button is clickable",
+                          attachment_type=AttachmentType.PNG)
+            assert True, "View_all_participants Button is clickable"
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="View_all_participants Button is not clickable",
+                          attachment_type=AttachmentType.PNG)
+            assert False, "View_all_participants Button is not clickable"
+        homepage.do_click(Homepage.SIGN_OUT_BUTTON)
+        print("Completed")
+
+    @allure.description("Testing get_started_button2")
+    @allure.severity(allure.severity_level.CRITICAL)
+    def test_get_started_button2(self):
+        self.loginpage = Loginpage(self.driver)
+        sleep(3)
+        self.driver.execute_script("window.localStorage.clear();")
+        sleep(3)
+        self.driver.execute_script("window.location.reload(true);")
+        sleep(2)
+        self.loginpage.driver.maximize_window()
+        self.loginpage.do_click(Loginpage.LOGIN_AS_ADMIN_BUTTON)
+        self.loginpage.do_click(Loginpage.USERNAME_FIELD)
+        self.loginpage.do_sendkeys(Loginpage.USERNAME_FIELD, Testdata.USER_NAME)
+        self.loginpage.do_click(Loginpage.SEND_OTP_BUTTON)
+        self.loginpage.do_click(Loginpage.ENTER_OTP)
+        self.loginpage.do_sendkeys(Loginpage.ENTER_OTP, Testdata.OTP)
+        self.loginpage.do_click(Loginpage.VERIFY_OTP_BUTTON)
+        homepage = Homepage(self.driver)
+        homepage.do_click(Homepage.HOME_BUTTON)
+        self.driver.execute_script("window.scrollBy(0,3800);")
+        sleep(2)
+        homepage.do_click(Homepage.GET_STARTED_BUTTON_2)
+        sleep(2)
+        if self.driver.current_url == "https://datahubethstage.farmstack.co/home/get-started":
+            allure.attach(self.driver.get_screenshot_as_png(), name="Get_started button is clickable",
+                          attachment_type=AttachmentType.PNG)
+            assert True, "Get_started button is clickable"
+        else:
+            allure.attach(self.driver.get_screenshot_as_png(), name="Get_started button is not clickable",
+                          attachment_type=AttachmentType.PNG)
+            assert False, "Get_started button is not clickable"
+        homepage.do_click(Homepage.SIGN_OUT_BUTTON)
+        print("Completed")
+
+
+
+#             #
+# # """ignoreexceptions="""
+# #
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1676187555634)
+++ b/.idea/misc.xml	(date 1676187555634)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager">
+    <output url="file://$PROJECT_DIR$/out" />
+  </component>
+</project>
\ No newline at end of file
Index: Pageobjects/Homepage.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Pageobjects/Homepage.py b/Pageobjects/Homepage.py
new file mode 100644
--- /dev/null	(date 1690452466292)
+++ b/Pageobjects/Homepage.py	(date 1690452466292)
@@ -0,0 +1,80 @@
+from selenium.webdriver.common.by import By
+
+from Configurations.config import Testdata
+from Pageobjects.Basepage import Basepage
+
+"""By locators"""
+
+
+class Homepage(Basepage):
+    SETTINGS_BUTTON = (By.ID, "navbar-settings")
+    PARTICIPANT_TAB = (By.ID,"navbar-participants")
+    DATASETS_TAB = (By.ID,"navbar-dataset")
+    CONNECTORS_TAB = (By.ID,"navbar-connectors")
+    DASHBOARD_TAB = (By.ID,"navbar-new_dashboard")
+    SIGN_OUT_BUTTON = (By.ID, "navbar-signout")
+    HOME_BUTTON = (By.ID,"navbar-home")
+    GET_STARTED_BUTTON_1 = (By.ID,"home-get-started-btn")
+    GET_STARTED_BUTTON_2 = (By.ID,"home-get-started-btn2-id")
+    VIEW_ALL_DATASETS_BUTTON = (By.ID,"details-page-load-more-dataset-button")
+    VIEW_ALL_CO_STEWARDS_BUTTON = (By.ID,"home-view-all-costeward-btn-id")
+    VIEW_ALL_PARTICIPANTS_BUTTON = (By.ID,"home-view-all-participants-btn-id")
+
+    ORGANIZATION_NAME_FIELD = (By.ID, "organisation-name-id")
+    ORGANIZATION_EMAIL_ID_FIELD = (By.ID, "add-participant-mail-id")
+    ORGANIZATION_WEBSITE_LINK = (By.ID, "add-participant-website-link")
+    ORGANIZATION_ADDRESS = (By.ID, "add-participant-organisation-address")
+    COUNTRY_DROP_DOWN = (By.ID, "country-in-add-participants")
+    SELECT_COUNTRY = (By.ID, "country-[object Object]103")
+    PINCODE_FIELD = (By.ID, "add-participant-pin-code")
+    FIRST_NAME_FIELD = (By.ID, "add-participant-first-name")
+    LAST_NAME_FIELD = (By.ID, "add-participant-last-name")
+    ORGANIZATION_ROOT_USER_EMAIL_ID_FIELD = (By.ID,"add-participant-rootuser-mail-id")
+    ORGANIZATION_CONTACT_NUMBER = (By.ID, "add-participant-phone-number")
+    SELECT_COSTEWARD_DROP_DOWN = (By.ID,"select_costeward")
+    SELECT_COSTEWARD = (By.ID,"select-costeward-7")
+    CANCEL_BUTTON = (By.ID,"add-participant-cancel-button")
+    SUBMIT_BUTTON = (By.ID, "add-participant-submit-button")
+    """Constructor of the page class"""
+
+    def __init__(self, driver):
+        super().__init__(driver)
+        # self.driver.get(Testdata.BASEURL)
+
+        """This is to get the Homepage title"""
+
+    def get_Home_page_title(self, title):
+        return self.get_title(title)
+
+    """ These are the page actions for the Home_page"""
+
+    def is_settings_button_exists(self):
+        return self.is_visible(self.SETTINGS_BUTTON)
+
+    def is_signout_button_exists(self):
+        return self.is_enabled(self.SIGN_OUT_BUTTON)
+
+    def test_get_started(self):
+        self.do_click(self.HOME_BUTTON)
+        self.do_click(self.GET_STARTED_BUTTON_1)
+
+    def test_View_all_datasets(self):
+        self.do_click(self.HOME_BUTTON)
+        self.do_scroll_down(self.VIEW_ALL_DATASETS_BUTTON)
+        self.do_click(self.VIEW_ALL_DATASETS_BUTTON)
+
+    def test_view_all_Costeward(self):
+        self.do_click(self.HOME_BUTTON)
+        self.do_scroll_down(self.VIEW_ALL_CO_STEWARDS_BUTTON)
+        self.do_click(self.VIEW_ALL_CO_STEWARDS_BUTTON)
+
+    def test_view_all_Participants(self):
+        self.do_click(self.HOME_BUTTON)
+        # self.do_scroll_down(self.VIEW_ALL_PARTICIPANTS_BUTTON)
+        self.do_scroll_down(self.GET_STARTED_BUTTON_2)
+        self.do_click(self.VIEW_ALL_PARTICIPANTS_BUTTON)
+        self.do_scroll_up(self.GET_STARTED_BUTTON_2)
+
+    def test_get_started_2(self):
+        self.do_click(self.HOME_BUTTON)
+        self.do_click(self.GET_STARTED_BUTTON_2)
\ No newline at end of file
diff --git a/Pageobjects/__init__.py b/Pageobjects/__init__.py
new file mode 100644
diff --git a/Testcases/__init__.py b/Testcases/__init__.py
new file mode 100644
diff --git a/Utilities/__init__.py b/Utilities/__init__.py
new file mode 100644
